Makefile:INSTALL = /usr/bin/install -c
Makefile:install_sh_DATA = $(install_sh) -c -m 644
Makefile:install_sh_PROGRAM = $(install_sh) -c
Makefile:install_sh_SCRIPT = $(install_sh) -c
Makefile:host_triplet = i686-pc-linux-gnu
Makefile:DEFAULT_INCLUDES = -I. -I$(srcdir) -I.
Makefile:	-o $@
Makefile:ACLOCAL = ${SHELL} /home/shini/sandbox/jikes/jikes-1.22/missing --run aclocal-1.8
Makefile:AMTAR = ${SHELL} /home/shini/sandbox/jikes/jikes-1.22/missing --run tar
Makefile:AUTOCONF = ${SHELL} /home/shini/sandbox/jikes/jikes-1.22/missing --run autoconf
Makefile:AUTOHEADER = ${SHELL} /home/shini/sandbox/jikes/jikes-1.22/missing --run autoheader
Makefile:AUTOMAKE = ${SHELL} /home/shini/sandbox/jikes/jikes-1.22/missing --run automake-1.8
Makefile:CXXCPP = g++ -E
Makefile:CXXFLAGS = -g -O2
Makefile:DEFS = -DHAVE_CONFIG_H
Makefile:ECHO_N = -n
Makefile:EGREP = grep -E
Makefile:INSTALL_DATA = ${INSTALL} -m 644
Makefile:INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
Makefile:MAKEINFO = ${SHELL} /home/shini/sandbox/jikes/jikes-1.22/missing --run makeinfo
Makefile:build = i686-pc-linux-gnu
Makefile:build_os = linux-gnu
Makefile:host = i686-pc-linux-gnu
Makefile:host_os = linux-gnu
Makefile:install_sh = /home/shini/sandbox/jikes/jikes-1.22/install-sh
Makefile:mkdir_p = mkdir -p -- .
Makefile:#JAVAC = jikes -nowarn -source 1.4
Makefile:	$(MAKE) $(AM_MAKEFLAGS) all-am
Makefile:	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
Makefile:	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  src/Makefile'; \
Makefile:	  $(AUTOMAKE) --foreign  src/Makefile
Makefile:	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
Makefile:	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Makefile:	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Makefile:	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Makefile:config.h: stamp-h1
Makefile:	@if test ! -f $@; then \
Makefile:	  rm -f stamp-h1; \
Makefile:	  $(MAKE) stamp-h1; \
Makefile:stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
Makefile:	@rm -f stamp-h1
Makefile:	rm -f stamp-h1
Makefile:distclean-hdr:
Makefile:	-rm -f config.h stamp-h1
Makefile:install-binPROGRAMS: $(bin_PROGRAMS)
Makefile:	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
Makefile:	  if test -f $$p \
Makefile:uninstall-binPROGRAMS:
Makefile:	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
Makefile:	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
Makefile:clean-binPROGRAMS:
Makefile:	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
Makefile:	@rm -f jikes$(EXEEXT)
Makefile:mostlyclean-compile:
Makefile:	-rm -f *.$(OBJEXT)
Makefile:distclean-compile:
Makefile:	-rm -f *.tab.c
Makefile:	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
Makefile:	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
Makefile:#	$(CXXCOMPILE) -c -o $@ $<
Makefile:	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
Makefile:	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
Makefile:#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
Makefile:uninstall-info-am:
Makefile:install-includeHEADERS: $(include_HEADERS)
Makefile:	test -z "$(includedir)" || $(mkdir_p) "$(DESTDIR)$(includedir)"
Makefile:	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
Makefile:	  f="`echo $$p | sed -e 's|^.*/||'`"; \
Makefile:uninstall-includeHEADERS:
Makefile:	  f="`echo $$p | sed -e 's|^.*/||'`"; \
Makefile:	  echo " rm -f '$(DESTDIR)$(includedir)/$$f'"; \
Makefile:	  rm -f "$(DESTDIR)$(includedir)/$$f"; \
Makefile:	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
Makefile:	mkid -fID $$unique
Makefile:	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
Makefile:	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
Makefile:	  test -z "$$unique" && unique=$$empty_fix; \
Makefile:	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
Makefile:	test -z "$(CTAGS_ARGS)$$tags$$unique" \
Makefile:	  && gtags -i $(GTAGS_ARGS) $$here
Makefile:distclean-tags:
Makefile:	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
Makefile:	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
Makefile:	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
Makefile:	  if test -d $$d/$$file; then \
Makefile:	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
Makefile:	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
Makefile:	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
Makefile:	    test -f $(distdir)/$$file \
Makefile:	    || cp -p $$d/$$file $(distdir)/$$file \
Makefile:check-am: all-am
Makefile:	$(MAKE) $(AM_MAKEFLAGS) check-am
Makefile:all-am: Makefile $(PROGRAMS) $(HEADERS) config.h
Makefile:	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
Makefile:	$(MAKE) $(AM_MAKEFLAGS) install-am
Makefile:install-exec: install-exec-am
Makefile:install-data: install-data-am
Makefile:uninstall: uninstall-am
Makefile:install-am: all-am
Makefile:	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
Makefile:installcheck: installcheck-am
Makefile:install-strip:
Makefile:	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
Makefile:	  `test -z '$(STRIP)' || \
Makefile:mostlyclean-generic:
Makefile:clean-generic:
Makefile:distclean-generic:
Makefile:	-rm -f $(CONFIG_CLEAN_FILES)
Makefile:maintainer-clean-generic:
Makefile:	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
Makefile:clean: clean-am
Makefile:clean-am: clean-binPROGRAMS clean-generic mostlyclean-am
Makefile:distclean: distclean-am
Makefile:	-rm -rf ./$(DEPDIR)
Makefile:	-rm -f Makefile
Makefile:distclean-am: clean-am distclean-compile distclean-generic \
Makefile:	distclean-hdr distclean-tags
Makefile:dvi: dvi-am
Makefile:dvi-am:
Makefile:html: html-am
Makefile:info: info-am
Makefile:info-am:
Makefile:install-data-am: install-includeHEADERS
Makefile:install-exec-am: install-binPROGRAMS
Makefile:install-info: install-info-am
Makefile:install-man:
Makefile:installcheck-am:
Makefile:maintainer-clean: maintainer-clean-am
Makefile:	-rm -rf ./$(DEPDIR)
Makefile:	-rm -f Makefile
Makefile:maintainer-clean-am: distclean-am maintainer-clean-generic
Makefile:mostlyclean: mostlyclean-am
Makefile:mostlyclean-am: mostlyclean-compile mostlyclean-generic
Makefile:pdf: pdf-am
Makefile:pdf-am:
Makefile:ps: ps-am
Makefile:ps-am:
Makefile:uninstall-am: uninstall-binPROGRAMS uninstall-includeHEADERS \
Makefile:	uninstall-info-am
Makefile:.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
Makefile:	clean-generic ctags distclean distclean-compile \
Makefile:	distclean-generic distclean-hdr distclean-tags distdir dvi \
Makefile:	dvi-am html html-am info info-am install install-am \
Makefile:	install-binPROGRAMS install-data install-data-am install-exec \
Makefile:	install-exec-am install-includeHEADERS install-info \
Makefile:	install-info-am install-man install-strip installcheck \
Makefile:	installcheck-am installdirs maintainer-clean \
Makefile:	maintainer-clean-generic mostlyclean mostlyclean-compile \
Makefile:	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
Makefile:	uninstall-am uninstall-binPROGRAMS uninstall-includeHEADERS \
Makefile:	uninstall-info-am
Makefile:#	@rm -f javaact.tmp
Makefile:#	rm -f $(srcdir)/java.l
Makefile:#	@mv -f javaact.tmp $@
Makefile:#	@if test -f $@; then :; else \
Makefile:#	  rm -f javaact.stamp; \
Makefile:#	@rm -f code.tmp
Makefile:#	$(JAVAC) -d $(srcdir) $<
Makefile:#	(cd $(srcdir); $(JAVA) -classpath . gencode)
Makefile:#	@mv -f code.tmp $@
Makefile:#	@if test -f $@; then :; else \
Makefile:#	  rm -f code.stamp; \
Makefile:	@rm -f jikes$(EXEEXT)
Makefile:	$(CXXLINK) -o jikes$(EXEEXT) $(jikes_OBJECTS) -lstdc++ -lefence
Makefile.am:	@rm -f javaact.tmp
Makefile.am:	rm -f $(srcdir)/java.l
Makefile.am:	@mv -f javaact.tmp $@
Makefile.am:	@if test -f $@; then :; else \
Makefile.am:	  rm -f javaact.stamp; \
Makefile.am:JAVAC = jikes -nowarn -source 1.4
Makefile.am:	@rm -f code.tmp
Makefile.am:	$(JAVAC) -d $(srcdir) $<
Makefile.am:	(cd $(srcdir); $(JAVA) -classpath . gencode)
Makefile.am:	@mv -f code.tmp $@
Makefile.am:	@if test -f $@; then :; else \
Makefile.am:	  rm -f code.stamp; \
Makefile.am:	@rm -f jikes$(EXEEXT)
Makefile.am:	$(CXXLINK) -o jikes$(EXEEXT) $(jikes_OBJECTS) -lstdc++ -lefence
Makefile.in:install_sh_DATA = $(install_sh) -c -m 644
Makefile.in:install_sh_PROGRAM = $(install_sh) -c
Makefile.in:install_sh_SCRIPT = $(install_sh) -c
Makefile.in:DEFAULT_INCLUDES = -I. -I$(srcdir) -I.
Makefile.in:	-o $@
Makefile.in:@MAINTAINER_MODE_TRUE@JAVAC = jikes -nowarn -source 1.4
Makefile.in:	$(MAKE) $(AM_MAKEFLAGS) all-am
Makefile.in:	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
Makefile.in:	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  src/Makefile'; \
Makefile.in:	  $(AUTOMAKE) --foreign  src/Makefile
Makefile.in:	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
Makefile.in:	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Makefile.in:	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Makefile.in:	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Makefile.in:config.h: stamp-h1
Makefile.in:	@if test ! -f $@; then \
Makefile.in:	  rm -f stamp-h1; \
Makefile.in:	  $(MAKE) stamp-h1; \
Makefile.in:stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
Makefile.in:	@rm -f stamp-h1
Makefile.in:	rm -f stamp-h1
Makefile.in:distclean-hdr:
Makefile.in:	-rm -f config.h stamp-h1
Makefile.in:install-binPROGRAMS: $(bin_PROGRAMS)
Makefile.in:	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
Makefile.in:	  if test -f $$p \
Makefile.in:uninstall-binPROGRAMS:
Makefile.in:	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
Makefile.in:	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
Makefile.in:clean-binPROGRAMS:
Makefile.in:	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
Makefile.in:	@rm -f jikes$(EXEEXT)
Makefile.in:mostlyclean-compile:
Makefile.in:	-rm -f *.$(OBJEXT)
Makefile.in:distclean-compile:
Makefile.in:	-rm -f *.tab.c
Makefile.in:@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
Makefile.in:@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
Makefile.in:@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<
Makefile.in:@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
Makefile.in:@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
Makefile.in:@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
Makefile.in:uninstall-info-am:
Makefile.in:install-includeHEADERS: $(include_HEADERS)
Makefile.in:	test -z "$(includedir)" || $(mkdir_p) "$(DESTDIR)$(includedir)"
Makefile.in:	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
Makefile.in:	  f="`echo $$p | sed -e 's|^.*/||'`"; \
Makefile.in:uninstall-includeHEADERS:
Makefile.in:	  f="`echo $$p | sed -e 's|^.*/||'`"; \
Makefile.in:	  echo " rm -f '$(DESTDIR)$(includedir)/$$f'"; \
Makefile.in:	  rm -f "$(DESTDIR)$(includedir)/$$f"; \
Makefile.in:	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
Makefile.in:	mkid -fID $$unique
Makefile.in:	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
Makefile.in:	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
Makefile.in:	  test -z "$$unique" && unique=$$empty_fix; \
Makefile.in:	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
Makefile.in:	test -z "$(CTAGS_ARGS)$$tags$$unique" \
Makefile.in:	  && gtags -i $(GTAGS_ARGS) $$here
Makefile.in:distclean-tags:
Makefile.in:	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
Makefile.in:	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
Makefile.in:	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
Makefile.in:	  if test -d $$d/$$file; then \
Makefile.in:	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
Makefile.in:	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
Makefile.in:	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
Makefile.in:	    test -f $(distdir)/$$file \
Makefile.in:	    || cp -p $$d/$$file $(distdir)/$$file \
Makefile.in:check-am: all-am
Makefile.in:	$(MAKE) $(AM_MAKEFLAGS) check-am
Makefile.in:all-am: Makefile $(PROGRAMS) $(HEADERS) config.h
Makefile.in:	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
Makefile.in:	$(MAKE) $(AM_MAKEFLAGS) install-am
Makefile.in:install-exec: install-exec-am
Makefile.in:install-data: install-data-am
Makefile.in:uninstall: uninstall-am
Makefile.in:install-am: all-am
Makefile.in:	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
Makefile.in:installcheck: installcheck-am
Makefile.in:install-strip:
Makefile.in:	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
Makefile.in:	  `test -z '$(STRIP)' || \
Makefile.in:mostlyclean-generic:
Makefile.in:clean-generic:
Makefile.in:distclean-generic:
Makefile.in:	-rm -f $(CONFIG_CLEAN_FILES)
Makefile.in:maintainer-clean-generic:
Makefile.in:	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
Makefile.in:clean: clean-am
Makefile.in:clean-am: clean-binPROGRAMS clean-generic mostlyclean-am
Makefile.in:distclean: distclean-am
Makefile.in:	-rm -rf ./$(DEPDIR)
Makefile.in:	-rm -f Makefile
Makefile.in:distclean-am: clean-am distclean-compile distclean-generic \
Makefile.in:	distclean-hdr distclean-tags
Makefile.in:dvi: dvi-am
Makefile.in:dvi-am:
Makefile.in:html: html-am
Makefile.in:info: info-am
Makefile.in:info-am:
Makefile.in:install-data-am: install-includeHEADERS
Makefile.in:install-exec-am: install-binPROGRAMS
Makefile.in:install-info: install-info-am
Makefile.in:install-man:
Makefile.in:installcheck-am:
Makefile.in:maintainer-clean: maintainer-clean-am
Makefile.in:	-rm -rf ./$(DEPDIR)
Makefile.in:	-rm -f Makefile
Makefile.in:maintainer-clean-am: distclean-am maintainer-clean-generic
Makefile.in:mostlyclean: mostlyclean-am
Makefile.in:mostlyclean-am: mostlyclean-compile mostlyclean-generic
Makefile.in:pdf: pdf-am
Makefile.in:pdf-am:
Makefile.in:ps: ps-am
Makefile.in:ps-am:
Makefile.in:uninstall-am: uninstall-binPROGRAMS uninstall-includeHEADERS \
Makefile.in:	uninstall-info-am
Makefile.in:.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
Makefile.in:	clean-generic ctags distclean distclean-compile \
Makefile.in:	distclean-generic distclean-hdr distclean-tags distdir dvi \
Makefile.in:	dvi-am html html-am info info-am install install-am \
Makefile.in:	install-binPROGRAMS install-data install-data-am install-exec \
Makefile.in:	install-exec-am install-includeHEADERS install-info \
Makefile.in:	install-info-am install-man install-strip installcheck \
Makefile.in:	installcheck-am installdirs maintainer-clean \
Makefile.in:	maintainer-clean-generic mostlyclean mostlyclean-compile \
Makefile.in:	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
Makefile.in:	uninstall-am uninstall-binPROGRAMS uninstall-includeHEADERS \
Makefile.in:	uninstall-info-am
Makefile.in:@MAINTAINER_MODE_TRUE@	@rm -f javaact.tmp
Makefile.in:@MAINTAINER_MODE_TRUE@	rm -f $(srcdir)/java.l
Makefile.in:@MAINTAINER_MODE_TRUE@	@mv -f javaact.tmp $@
Makefile.in:@MAINTAINER_MODE_TRUE@	@if test -f $@; then :; else \
Makefile.in:@MAINTAINER_MODE_TRUE@	  rm -f javaact.stamp; \
Makefile.in:@MAINTAINER_MODE_TRUE@	@rm -f code.tmp
Makefile.in:@MAINTAINER_MODE_TRUE@	$(JAVAC) -d $(srcdir) $<
Makefile.in:@MAINTAINER_MODE_TRUE@	(cd $(srcdir); $(JAVA) -classpath . gencode)
Makefile.in:@MAINTAINER_MODE_TRUE@	@mv -f code.tmp $@
Makefile.in:@MAINTAINER_MODE_TRUE@	@if test -f $@; then :; else \
Makefile.in:@MAINTAINER_MODE_TRUE@	  rm -f code.stamp; \
Makefile.in:	@rm -f jikes$(EXEEXT)
Makefile.in:	$(CXXLINK) -o jikes$(EXEEXT) $(jikes_OBJECTS) -lstdc++ -lefence
declarations/access.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/access.h:        return (acc & - acc) == acc;
astGeneration/ast.cpp:        assert(base_size <= pool -> Blksize());
astGeneration/ast.cpp:        base = (T**) pool -> Alloc(sizeof(T*) * base_size);
astGeneration/ast.cpp:               (base_size - old_base_size) * sizeof(T*));
astGeneration/ast.cpp:    assert(Blksize() <= pool -> Blksize());
astGeneration/ast.cpp:    base[k] = (T*) pool -> Alloc(sizeof(T) * Blksize());
astGeneration/ast.cpp:    base[k] -= size;
astGeneration/ast.cpp:    assert(pool -> Blksize() >= 256);
astGeneration/ast.cpp:    base_increment = (Blksize() > pool -> Blksize()
astGeneration/ast.cpp:                      ? Blksize() / pool -> Blksize() : 1) * 2;
astGeneration/ast.cpp:    while (Blksize() >= pool -> Blksize())
astGeneration/ast.cpp:        log_blksize--;
astGeneration/ast.cpp:        top--;
astGeneration/ast.cpp:            // The array is most-likely almost sorted. Therefore,
astGeneration/ast.cpp:            if ((i - lower) < (upper - i))
astGeneration/ast.cpp:                upper = i - 1;
astGeneration/ast.cpp:                histack[top] = i - 1;
astGeneration/ast.cpp:// is a no-op for this constant.
astGeneration/ast.cpp:        if (elt -> value == value)
astGeneration/ast.cpp:        if (elt -> value > value)
astGeneration/ast.cpp:            upper = mid - 1;
astGeneration/ast.cpp:        : symbol -> Kind() == Symbol::TYPE
astGeneration/ast.cpp:        : symbol -> Kind() == Symbol::VARIABLE
astGeneration/ast.cpp:        ? ((VariableSymbol*) symbol) -> Type()
astGeneration/ast.cpp:        : symbol -> Kind() == Symbol::METHOD
astGeneration/ast.cpp:        ? ((MethodSymbol*) symbol) -> Type()
astGeneration/ast.cpp:    AstBlock* clone = ast_pool -> GenBlock();
astGeneration/ast.cpp:    clone -> CloneBlock(ast_pool, this);
astGeneration/ast.cpp:    other_tag = orig -> other_tag;
astGeneration/ast.cpp:    label_opt = orig -> label_opt;
astGeneration/ast.cpp:    nesting_level = orig -> nesting_level;
astGeneration/ast.cpp:    left_brace_token = orig -> left_brace_token;
astGeneration/ast.cpp:    unsigned count = orig -> NumStatements();
astGeneration/ast.cpp:        AddStatement((AstStatement*) orig -> Statement(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    right_brace_token = orig -> right_brace_token;
astGeneration/ast.cpp:    no_braces = orig -> no_braces;
astGeneration/ast.cpp:    AstName* clone = ast_pool -> GenName(identifier_token);
astGeneration/ast.cpp:        clone -> base_opt = (AstName*) base_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> resolution_opt =
astGeneration/ast.cpp:            (AstExpression*) resolution_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    return ast_pool -> GenPrimitiveType(kind, primitive_kind_token);
astGeneration/ast.cpp:        ast_pool -> GenBrackets(left_bracket_token, right_bracket_token);
astGeneration/ast.cpp:    clone -> dims = dims;
astGeneration/ast.cpp:    return ast_pool -> GenArrayType((AstType*) type -> Clone(ast_pool),
astGeneration/ast.cpp:                                    ((AstBrackets*) brackets ->
astGeneration/ast.cpp:    AstWildcard* clone = ast_pool -> GenWildcard(question_token);
astGeneration/ast.cpp:    clone -> extends_token_opt = extends_token_opt;
astGeneration/ast.cpp:    clone -> super_token_opt = super_token_opt;
astGeneration/ast.cpp:        clone -> bounds_opt = (AstType*) bounds_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstTypeArguments* clone = ast_pool -> GenTypeArguments(left_angle_token,
astGeneration/ast.cpp:    clone -> AllocateTypeArguments(NumTypeArguments());
astGeneration/ast.cpp:        clone -> AddTypeArgument((AstType*) TypeArgument(i) ->
astGeneration/ast.cpp:        ast_pool -> GenTypeName((AstName*) name -> Clone(ast_pool));
astGeneration/ast.cpp:        clone -> base_opt = (AstTypeName*) base_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> type_arguments_opt =
astGeneration/ast.cpp:            (AstTypeArguments*) type_arguments_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstMemberValuePair* clone = ast_pool -> GenMemberValuePair();
astGeneration/ast.cpp:    clone -> identifier_token_opt = identifier_token_opt;
astGeneration/ast.cpp:    clone -> member_value = (AstMemberValue*) member_value -> Clone(ast_pool);
astGeneration/ast.cpp:    AstAnnotation* clone = ast_pool -> GenAnnotation();
astGeneration/ast.cpp:    clone -> at_token = at_token;
astGeneration/ast.cpp:    clone -> name = (AstName*) name -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateMemberValuePairs(NumMemberValuePairs());
astGeneration/ast.cpp:        clone -> AddMemberValuePair((AstMemberValuePair*)
astGeneration/ast.cpp:                                    MemberValuePair(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> right_paren_token_opt = right_paren_token_opt;
astGeneration/ast.cpp:    return ast_pool -> GenModifierKeyword(modifier_token);
astGeneration/ast.cpp:    AstModifiers* clone = ast_pool -> GenModifiers();
astGeneration/ast.cpp:    clone -> AllocateModifiers(NumModifiers());
astGeneration/ast.cpp:        if (Modifier(i) -> ModifierKeywordCast())
astGeneration/ast.cpp:            clone -> AddModifier((AstModifierKeyword*)
astGeneration/ast.cpp:                                 Modifier(i) -> Clone(ast_pool));
astGeneration/ast.cpp:        else clone -> AddModifier((AstAnnotation*)
astGeneration/ast.cpp:                                  Modifier(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> static_token_opt = static_token_opt;
astGeneration/ast.cpp:    AstPackageDeclaration* clone = ast_pool -> GenPackageDeclaration();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> package_token = package_token;
astGeneration/ast.cpp:    clone -> name = (AstName*) name -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstImportDeclaration* clone = ast_pool -> GenImportDeclaration();
astGeneration/ast.cpp:    clone -> import_token = import_token;
astGeneration/ast.cpp:    clone -> static_token_opt = static_token_opt;
astGeneration/ast.cpp:    clone -> name = (AstName*) name -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> star_token_opt = star_token_opt;
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstCompilationUnit* clone = ast_pool -> GenCompilationUnit();
astGeneration/ast.cpp:    clone -> other_tag = other_tag;
astGeneration/ast.cpp:        clone -> package_declaration_opt = (AstPackageDeclaration*)
astGeneration/ast.cpp:            package_declaration_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateImportDeclarations(NumImportDeclarations());
astGeneration/ast.cpp:        clone -> AddImportDeclaration((AstImportDeclaration*)
astGeneration/ast.cpp:                                      ImportDeclaration(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> AllocateTypeDeclarations(NumTypeDeclarations());
astGeneration/ast.cpp:        clone -> AddTypeDeclaration((AstDeclaredType*) TypeDeclaration(i) ->
astGeneration/ast.cpp:    return ast_pool -> GenEmptyDeclaration(semicolon_token);
astGeneration/ast.cpp:    AstClassBody* clone = ast_pool -> GenClassBody();
astGeneration/ast.cpp:    clone -> identifier_token = identifier_token;
astGeneration/ast.cpp:    clone -> left_brace_token = left_brace_token;
astGeneration/ast.cpp:    clone -> AllocateClassBodyDeclarations(NumClassBodyDeclarations());
astGeneration/ast.cpp:    clone -> AllocateInstanceVariables(NumInstanceVariables());
astGeneration/ast.cpp:    clone -> AllocateClassVariables(NumClassVariables());
astGeneration/ast.cpp:    clone -> AllocateMethods(NumMethods());
astGeneration/ast.cpp:    clone -> AllocateConstructors(NumConstructors());
astGeneration/ast.cpp:    clone -> AllocateStaticInitializers(NumStaticInitializers());
astGeneration/ast.cpp:    clone -> AllocateInstanceInitializers(NumInstanceInitializers());
astGeneration/ast.cpp:    clone -> AllocateNestedClasses(NumNestedClasses());
astGeneration/ast.cpp:    clone -> AllocateNestedEnums(NumNestedEnums());
astGeneration/ast.cpp:    clone -> AllocateNestedInterfaces(NumNestedInterfaces());
astGeneration/ast.cpp:    clone -> AllocateNestedAnnotations(NumNestedAnnotations());
astGeneration/ast.cpp:    clone -> AllocateEmptyDeclarations(NumEmptyDeclarations());
astGeneration/ast.cpp:        clone -> AddClassBodyDeclaration((AstDeclaredType*)
astGeneration/ast.cpp:                                         ClassBodyDeclaration(i) ->
astGeneration/ast.cpp:    clone -> right_brace_token = right_brace_token;
astGeneration/ast.cpp:    AstFieldDeclaration* field_declaration = member -> FieldDeclarationCast();
astGeneration/ast.cpp:        member -> MethodDeclarationCast();
astGeneration/ast.cpp:        member -> ConstructorDeclarationCast();
astGeneration/ast.cpp:        member -> InitializerDeclarationCast();
astGeneration/ast.cpp:    AstClassDeclaration* class_declaration = member -> ClassDeclarationCast();
astGeneration/ast.cpp:    AstEnumDeclaration* enum_declaration = member -> EnumDeclarationCast();
astGeneration/ast.cpp:        member -> InterfaceDeclarationCast();
astGeneration/ast.cpp:        member -> AnnotationDeclarationCast();
astGeneration/ast.cpp:    class_body_declarations -> Next() = member;
astGeneration/ast.cpp:        if (field_declaration -> StaticFieldCast())
astGeneration/ast.cpp:        if (initializer -> StaticInitializerCast())
astGeneration/ast.cpp:    AstTypeParameter* clone = ast_pool -> GenTypeParameter(identifier_token);
astGeneration/ast.cpp:    clone -> AllocateBounds(NumBounds());
astGeneration/ast.cpp:        clone -> AddBound((AstTypeName*) Bound(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    AstTypeParameters* clone = ast_pool -> GenTypeParameters();
astGeneration/ast.cpp:    clone -> left_angle_token = left_angle_token;
astGeneration/ast.cpp:    clone -> AllocateTypeParameters(NumTypeParameters());
astGeneration/ast.cpp:        clone -> AddTypeParameter((AstTypeParameter*) TypeParameter(i) ->
astGeneration/ast.cpp:    clone -> right_angle_token = right_angle_token;
astGeneration/ast.cpp:    AstClassDeclaration* clone = ast_pool -> GenClassDeclaration();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> class_token = class_token;
astGeneration/ast.cpp:        clone -> type_parameters_opt =
astGeneration/ast.cpp:            (AstTypeParameters*) type_parameters_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> super_opt = (AstTypeName*) super_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateInterfaces(NumInterfaces());
astGeneration/ast.cpp:        clone -> AddInterface((AstTypeName*) Interface(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> class_body = (AstClassBody*) class_body -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> class_body -> owner = clone;
astGeneration/ast.cpp:    AstArrayInitializer* clone = ast_pool -> GenArrayInitializer();
astGeneration/ast.cpp:    clone -> left_brace_token = left_brace_token;
astGeneration/ast.cpp:    clone -> AllocateVariableInitializers(NumVariableInitializers());
astGeneration/ast.cpp:        clone -> AddVariableInitializer((AstMemberValue*)
astGeneration/ast.cpp:                                        VariableInitializer(i) ->
astGeneration/ast.cpp:    clone -> right_brace_token = right_brace_token;
astGeneration/ast.cpp:    AstVariableDeclaratorId* clone = ast_pool -> GenVariableDeclaratorId();
astGeneration/ast.cpp:    clone -> identifier_token = identifier_token;
astGeneration/ast.cpp:        clone -> brackets_opt = (AstBrackets*) brackets_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstVariableDeclarator* clone = ast_pool -> GenVariableDeclarator();
astGeneration/ast.cpp:    clone -> variable_declarator_name = (AstVariableDeclaratorId*)
astGeneration/ast.cpp:        variable_declarator_name -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> variable_initializer_opt =
astGeneration/ast.cpp:            variable_initializer_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstFieldDeclaration* clone = ast_pool -> GenFieldDeclaration();
astGeneration/ast.cpp:    clone -> other_tag = other_tag;
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> type = (AstType*) type -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateVariableDeclarators(NumVariableDeclarators());
astGeneration/ast.cpp:        clone -> AddVariableDeclarator((AstVariableDeclarator*)
astGeneration/ast.cpp:                                       VariableDeclarator(i) ->
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstFormalParameter* clone = ast_pool -> GenFormalParameter();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> type = (AstType*) type -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> ellipsis_token_opt = ellipsis_token_opt;
astGeneration/ast.cpp:    clone -> formal_declarator =
astGeneration/ast.cpp:        (AstVariableDeclarator*) formal_declarator -> Clone(ast_pool);
astGeneration/ast.cpp:    AstMethodDeclarator* clone = ast_pool -> GenMethodDeclarator();
astGeneration/ast.cpp:    clone -> identifier_token = identifier_token;
astGeneration/ast.cpp:    clone -> left_parenthesis_token = left_parenthesis_token;
astGeneration/ast.cpp:    clone -> AllocateFormalParameters(NumFormalParameters());
astGeneration/ast.cpp:        clone -> AddFormalParameter((AstFormalParameter*)
astGeneration/ast.cpp:                                    FormalParameter(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> right_parenthesis_token = right_parenthesis_token;
astGeneration/ast.cpp:        clone -> brackets_opt = (AstBrackets*) brackets_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstMethodBody* clone = ast_pool -> GenMethodBody();
astGeneration/ast.cpp:    clone -> CloneBlock(ast_pool, this);
astGeneration/ast.cpp:        clone -> explicit_constructor_opt =
astGeneration/ast.cpp:            (AstStatement*) explicit_constructor_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstMethodDeclaration* clone = ast_pool -> GenMethodDeclaration();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> type_parameters_opt =
astGeneration/ast.cpp:            (AstTypeParameters*) type_parameters_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> type = (AstType*) type -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> method_declarator =
astGeneration/ast.cpp:        (AstMethodDeclarator*) method_declarator -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateThrows(NumThrows());
astGeneration/ast.cpp:        clone -> AddThrow((AstTypeName*) Throw(i) -> Clone(ast_pool));
astGeneration/ast.cpp:        clone -> default_value_opt =
astGeneration/ast.cpp:            (AstMemberValue*) default_value_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> method_body_opt =
astGeneration/ast.cpp:            (AstMethodBody*) method_body_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token_opt = semicolon_token_opt;
astGeneration/ast.cpp:    AstInitializerDeclaration* clone = ast_pool -> GenInitializerDeclaration();
astGeneration/ast.cpp:    clone -> other_tag = other_tag;
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> block = (AstMethodBody*) block -> Clone(ast_pool);
astGeneration/ast.cpp:    AstArguments* clone = ast_pool -> GenArguments(left_parenthesis_token,
astGeneration/ast.cpp:    clone -> AllocateArguments(NumArguments());
astGeneration/ast.cpp:        clone -> AddArgument((AstExpression*) Argument(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> AllocateLocalArguments(NumLocalArguments());
astGeneration/ast.cpp:        clone -> AddLocalArgument((AstName*) LocalArgument(i) ->
astGeneration/ast.cpp:    clone -> other_tag = other_tag;
astGeneration/ast.cpp:    AstThisCall* clone = ast_pool -> GenThisCall();
astGeneration/ast.cpp:        clone -> type_arguments_opt =
astGeneration/ast.cpp:            (AstTypeArguments*) type_arguments_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> this_token = this_token;
astGeneration/ast.cpp:    clone -> arguments = (AstArguments*) arguments -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstSuperCall* clone = ast_pool -> GenSuperCall();
astGeneration/ast.cpp:        clone -> base_opt = (AstExpression*) base_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> type_arguments_opt =
astGeneration/ast.cpp:            (AstTypeArguments*) type_arguments_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> super_token = super_token;
astGeneration/ast.cpp:    clone -> arguments = (AstArguments*) arguments -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstConstructorDeclaration* clone = ast_pool -> GenConstructorDeclaration();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> type_parameters_opt =
astGeneration/ast.cpp:            (AstTypeParameters*) type_parameters_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> constructor_declarator =
astGeneration/ast.cpp:        (AstMethodDeclarator*) constructor_declarator -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateThrows(NumThrows());
astGeneration/ast.cpp:        clone -> AddThrow((AstTypeName*) Throw(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> constructor_body =
astGeneration/ast.cpp:        (AstMethodBody*) constructor_body -> Clone(ast_pool);
astGeneration/ast.cpp:    AstEnumDeclaration* clone = ast_pool -> GenEnumDeclaration();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateInterfaces(NumInterfaces());
astGeneration/ast.cpp:        clone -> AddInterface((AstTypeName*) Interface(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> AllocateEnumConstants(NumEnumConstants());
astGeneration/ast.cpp:        clone -> AddEnumConstant((AstEnumConstant*) EnumConstant(i) ->
astGeneration/ast.cpp:    clone -> class_body = (AstClassBody*) class_body -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> class_body -> owner = clone;
astGeneration/ast.cpp:    AstEnumConstant* clone = ast_pool -> GenEnumConstant(identifier_token);
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> arguments_opt =
astGeneration/ast.cpp:            (AstArguments*) arguments_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> class_body_opt =
astGeneration/ast.cpp:            (AstClassBody*) class_body_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstInterfaceDeclaration* clone = ast_pool -> GenInterfaceDeclaration();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> interface_token = interface_token;
astGeneration/ast.cpp:        clone -> type_parameters_opt =
astGeneration/ast.cpp:            (AstTypeParameters*) type_parameters_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateInterfaces(NumInterfaces());
astGeneration/ast.cpp:        clone -> AddInterface((AstTypeName*) Interface(i) -> Clone(ast_pool));
astGeneration/ast.cpp:    clone -> class_body = (AstClassBody*) class_body -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> class_body -> owner = clone;
astGeneration/ast.cpp:        ast_pool -> GenAnnotationDeclaration(interface_token);
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> class_body = (AstClassBody*) class_body -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> class_body -> owner = clone;
astGeneration/ast.cpp:    AstLocalVariableStatement* clone = ast_pool -> GenLocalVariableStatement();
astGeneration/ast.cpp:        clone -> modifiers_opt =
astGeneration/ast.cpp:            (AstModifiers*) modifiers_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> type = (AstType*) type -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateVariableDeclarators(NumVariableDeclarators());
astGeneration/ast.cpp:        clone -> AddVariableDeclarator((AstVariableDeclarator*)
astGeneration/ast.cpp:                                       VariableDeclarator(i) ->
astGeneration/ast.cpp:    clone -> semicolon_token_opt = semicolon_token_opt;
astGeneration/ast.cpp:    Ast* p = declaration -> Clone(ast_pool);
astGeneration/ast.cpp:    if (p -> ClassDeclarationCast())
astGeneration/ast.cpp:        return ast_pool -> GenLocalClassStatement((AstClassDeclaration*) p);
astGeneration/ast.cpp:    else return ast_pool -> GenLocalClassStatement((AstEnumDeclaration*) p);
astGeneration/ast.cpp:    AstIfStatement* clone = ast_pool -> GenIfStatement();
astGeneration/ast.cpp:    clone -> if_token = if_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> true_statement = (AstBlock*) true_statement -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> false_statement_opt =
astGeneration/ast.cpp:            (AstBlock*) false_statement_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    return ast_pool -> GenEmptyStatement(semicolon_token);
astGeneration/ast.cpp:    AstExpressionStatement* clone = ast_pool -> GenExpressionStatement();
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token_opt = semicolon_token_opt;
astGeneration/ast.cpp:    AstSwitchLabel* clone = ast_pool -> GenSwitchLabel();
astGeneration/ast.cpp:    clone -> case_token = case_token;
astGeneration/ast.cpp:        clone -> expression_opt =
astGeneration/ast.cpp:            (AstExpression*) expression_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> colon_token = colon_token;
astGeneration/ast.cpp:    clone -> map_index = map_index;
astGeneration/ast.cpp:    AstSwitchBlockStatement* clone = ast_pool -> GenSwitchBlockStatement();
astGeneration/ast.cpp:    clone -> CloneBlock(ast_pool, this);
astGeneration/ast.cpp:    clone -> AllocateSwitchLabels(NumSwitchLabels());
astGeneration/ast.cpp:        clone -> AddSwitchLabel((AstSwitchLabel*) SwitchLabel(i) ->
astGeneration/ast.cpp:    AstSwitchStatement* clone = ast_pool -> GenSwitchStatement();
astGeneration/ast.cpp:    clone -> switch_token = switch_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> switch_block = (AstBlock*) switch_block -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateCases(NumCases());
astGeneration/ast.cpp:        clone -> DefaultCase() = ast_pool -> GenCaseElement(0, 0);
astGeneration/ast.cpp:        *clone -> DefaultCase() = *DefaultCase();
astGeneration/ast.cpp:        CaseElement* elt = ast_pool -> GenCaseElement(0, 0);
astGeneration/ast.cpp:        clone -> AddCase(elt);
astGeneration/ast.cpp:    AstWhileStatement* clone = ast_pool -> GenWhileStatement();
astGeneration/ast.cpp:    clone -> while_token = while_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> statement = (AstBlock*) statement -> Clone(ast_pool);
astGeneration/ast.cpp:    AstDoStatement* clone = ast_pool -> GenDoStatement();
astGeneration/ast.cpp:    clone -> do_token = do_token;
astGeneration/ast.cpp:    clone -> statement = (AstBlock*) statement -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> while_token = while_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstForStatement* clone = ast_pool -> GenForStatement();
astGeneration/ast.cpp:    clone -> for_token = for_token;
astGeneration/ast.cpp:    clone -> AllocateForInitStatements(NumForInitStatements());
astGeneration/ast.cpp:        clone -> AddForInitStatement((AstStatement*)
astGeneration/ast.cpp:                                     ForInitStatement(i) -> Clone(ast_pool));
astGeneration/ast.cpp:        clone -> end_expression_opt =
astGeneration/ast.cpp:            (AstExpression*) end_expression_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateForUpdateStatements(NumForUpdateStatements());
astGeneration/ast.cpp:        clone -> AddForUpdateStatement((AstExpressionStatement*)
astGeneration/ast.cpp:                                       ForUpdateStatement(i) ->
astGeneration/ast.cpp:    clone -> statement = (AstBlock*) statement -> Clone(ast_pool);
astGeneration/ast.cpp:    AstForeachStatement* clone = ast_pool -> GenForeachStatement();
astGeneration/ast.cpp:    clone -> for_token = for_token;
astGeneration/ast.cpp:    clone -> formal_parameter =
astGeneration/ast.cpp:        (AstFormalParameter*) formal_parameter -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> statement = (AstBlock*) statement -> Clone(ast_pool);
astGeneration/ast.cpp:    AstBreakStatement* clone = ast_pool -> GenBreakStatement();
astGeneration/ast.cpp:    clone -> break_token = break_token;
astGeneration/ast.cpp:    clone -> identifier_token_opt = identifier_token_opt;
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    clone -> nesting_level = nesting_level;
astGeneration/ast.cpp:    AstContinueStatement* clone = ast_pool -> GenContinueStatement();
astGeneration/ast.cpp:    clone -> continue_token = continue_token;
astGeneration/ast.cpp:    clone -> identifier_token_opt = identifier_token_opt;
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    clone -> nesting_level = nesting_level;
astGeneration/ast.cpp:    AstReturnStatement* clone = ast_pool -> GenReturnStatement();
astGeneration/ast.cpp:    clone -> return_token = return_token;
astGeneration/ast.cpp:        clone -> expression_opt =
astGeneration/ast.cpp:            (AstExpression*) expression_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstThrowStatement* clone = ast_pool -> GenThrowStatement();
astGeneration/ast.cpp:    clone -> throw_token = throw_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstSynchronizedStatement* clone = ast_pool -> GenSynchronizedStatement();
astGeneration/ast.cpp:    clone -> synchronized_token = synchronized_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> block = (AstBlock*) block -> Clone(ast_pool);
astGeneration/ast.cpp:    AstAssertStatement* clone = ast_pool -> GenAssertStatement();
astGeneration/ast.cpp:    clone -> assert_token = assert_token;
astGeneration/ast.cpp:    clone -> condition = (AstExpression*) condition -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> message_opt = (AstExpression*) message_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> semicolon_token = semicolon_token;
astGeneration/ast.cpp:    AstCatchClause* clone = ast_pool -> GenCatchClause();
astGeneration/ast.cpp:    clone -> catch_token = catch_token;
astGeneration/ast.cpp:    clone -> formal_parameter =
astGeneration/ast.cpp:        (AstFormalParameter*) formal_parameter -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> block = (AstBlock*) block -> Clone(ast_pool);
astGeneration/ast.cpp:    AstFinallyClause* clone = ast_pool -> GenFinallyClause();
astGeneration/ast.cpp:    clone -> finally_token = finally_token;
astGeneration/ast.cpp:    clone -> block = (AstBlock*) block -> Clone(ast_pool);
astGeneration/ast.cpp:    AstTryStatement* clone = ast_pool -> GenTryStatement();
astGeneration/ast.cpp:    clone -> try_token = try_token;
astGeneration/ast.cpp:    clone -> block = (AstBlock*) block -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateCatchClauses(NumCatchClauses());
astGeneration/ast.cpp:        clone -> AddCatchClause((AstCatchClause*) CatchClause(i) ->
astGeneration/ast.cpp:        clone -> finally_clause_opt =
astGeneration/ast.cpp:            (AstFinallyClause*) finally_clause_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    return ast_pool -> GenIntegerLiteral(integer_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenLongLiteral(long_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenFloatLiteral(float_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenDoubleLiteral(double_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenTrueLiteral(true_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenFalseLiteral(false_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenStringLiteral(string_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenCharacterLiteral(character_literal_token);
astGeneration/ast.cpp:    return ast_pool -> GenNullLiteral(null_token);
astGeneration/ast.cpp:    AstClassLiteral* clone = ast_pool -> GenClassLiteral(class_token);
astGeneration/ast.cpp:    clone -> type = (AstTypeName*) type -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> resolution_opt =
astGeneration/ast.cpp:            (AstExpression*) resolution_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstThisExpression* clone = ast_pool -> GenThisExpression(this_token);
astGeneration/ast.cpp:        clone -> base_opt = (AstTypeName*) base_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> resolution_opt =
astGeneration/ast.cpp:            (AstExpression*) resolution_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstSuperExpression* clone = ast_pool -> GenSuperExpression(super_token);
astGeneration/ast.cpp:        clone -> base_opt = (AstTypeName*) base_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> resolution_opt =
astGeneration/ast.cpp:            (AstExpression*) resolution_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        ast_pool -> GenParenthesizedExpression();
astGeneration/ast.cpp:    clone -> left_parenthesis_token = left_parenthesis_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> right_parenthesis_token = right_parenthesis_token;
astGeneration/ast.cpp:        ast_pool -> GenClassCreationExpression();
astGeneration/ast.cpp:        clone -> base_opt = (AstExpression*) base_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> new_token = new_token;
astGeneration/ast.cpp:        clone -> type_arguments_opt =
astGeneration/ast.cpp:            (AstTypeArguments*) type_arguments_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> class_type = (AstTypeName*) class_type -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> arguments = (AstArguments*) arguments -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> class_body_opt =
astGeneration/ast.cpp:            (AstClassBody*) class_body_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> resolution_opt =
astGeneration/ast.cpp:            (AstClassCreationExpression*) resolution_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstDimExpr* clone = ast_pool -> GenDimExpr();
astGeneration/ast.cpp:    clone -> left_bracket_token = left_bracket_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> right_bracket_token = right_bracket_token;
astGeneration/ast.cpp:        ast_pool -> GenArrayCreationExpression();
astGeneration/ast.cpp:    clone -> new_token = new_token;
astGeneration/ast.cpp:    clone -> array_type = (AstType*) array_type -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> AllocateDimExprs(NumDimExprs());
astGeneration/ast.cpp:        clone -> AddDimExpr((AstDimExpr*) DimExpr(i) -> Clone(ast_pool));
astGeneration/ast.cpp:        clone -> brackets_opt = (AstBrackets*) brackets_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> array_initializer_opt =
astGeneration/ast.cpp:            (AstArrayInitializer*) array_initializer_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstFieldAccess* clone = ast_pool -> GenFieldAccess();
astGeneration/ast.cpp:    clone -> base = (AstExpression*) base -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> identifier_token = identifier_token;
astGeneration/ast.cpp:        clone -> resolution_opt =
astGeneration/ast.cpp:            (AstExpression*) resolution_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        ast_pool -> GenMethodInvocation(identifier_token);
astGeneration/ast.cpp:        clone -> base_opt = (AstExpression*) base_opt -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> type_arguments_opt =
astGeneration/ast.cpp:            (AstTypeArguments*) type_arguments_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> identifier_token = identifier_token;
astGeneration/ast.cpp:    clone -> arguments = (AstArguments*) arguments -> Clone(ast_pool);
astGeneration/ast.cpp:        clone -> resolution_opt =
astGeneration/ast.cpp:            (AstExpression*) resolution_opt -> Clone(ast_pool);
astGeneration/ast.cpp:    AstArrayAccess* clone = ast_pool -> GenArrayAccess();
astGeneration/ast.cpp:    clone -> base = (AstExpression*) base -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> left_bracket_token = left_bracket_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> right_bracket_token = right_bracket_token;
astGeneration/ast.cpp:        ast_pool -> GenPostUnaryExpression((PostUnaryExpressionTag) other_tag);
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> post_operator_token = post_operator_token;
astGeneration/ast.cpp:        ast_pool -> GenPreUnaryExpression((PreUnaryExpressionTag) other_tag);
astGeneration/ast.cpp:    clone -> pre_operator_token = pre_operator_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    AstCastExpression* clone = ast_pool -> GenCastExpression();
astGeneration/ast.cpp:    clone -> left_parenthesis_token = left_parenthesis_token;
astGeneration/ast.cpp:        clone -> type = (AstType*) type -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> right_parenthesis_token = right_parenthesis_token;
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:        ast_pool -> GenBinaryExpression((BinaryExpressionTag) other_tag);
astGeneration/ast.cpp:    clone -> left_expression =
astGeneration/ast.cpp:        (AstExpression*) left_expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> binary_operator_token = binary_operator_token;
astGeneration/ast.cpp:    clone -> right_expression =
astGeneration/ast.cpp:        (AstExpression*) right_expression -> Clone(ast_pool);
astGeneration/ast.cpp:    AstInstanceofExpression* clone = ast_pool -> GenInstanceofExpression();
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> instanceof_token = instanceof_token;
astGeneration/ast.cpp:    clone -> type = (AstType*) type -> Clone(ast_pool);
astGeneration/ast.cpp:    AstConditionalExpression* clone = ast_pool -> GenConditionalExpression();
astGeneration/ast.cpp:    clone -> test_expression =
astGeneration/ast.cpp:        (AstExpression*) test_expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> question_token = question_token;
astGeneration/ast.cpp:    clone -> true_expression =
astGeneration/ast.cpp:        (AstExpression*) true_expression -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> colon_token = colon_token;
astGeneration/ast.cpp:    clone -> false_expression =
astGeneration/ast.cpp:        (AstExpression*) false_expression -> Clone(ast_pool);
astGeneration/ast.cpp:    AstAssignmentExpression* clone = ast_pool ->
astGeneration/ast.cpp:    clone -> left_hand_side =
astGeneration/ast.cpp:        (AstExpression*) left_hand_side -> Clone(ast_pool);
astGeneration/ast.cpp:    clone -> expression = (AstExpression*) expression -> Clone(ast_pool);
astGeneration/ast.cpp:                << block_symbol -> max_variable_index
astGeneration/ast.cpp:                << block_symbol -> helper_variable_index;
astGeneration/ast.cpp:            Coutput << " #" << Statement(i) -> id;
astGeneration/ast.cpp:            Statement(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << (base_opt ? base_opt -> id : 0) << '.'
astGeneration/ast.cpp:        base_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << '#' << type -> id << ' ' << brackets -> id << endl;
astGeneration/ast.cpp:    type -> Print(lex_stream);
astGeneration/ast.cpp:    brackets -> Print(lex_stream);
astGeneration/ast.cpp:                << bounds_opt -> id;
astGeneration/ast.cpp:                << bounds_opt -> id;
astGeneration/ast.cpp:        bounds_opt -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << TypeArgument(i) -> id;
astGeneration/ast.cpp:        TypeArgument(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << (base_opt ? base_opt -> id : 0) << ".#" << name -> id << "<#"
astGeneration/ast.cpp:            << (type_arguments_opt ? type_arguments_opt -> id : 0) << '>'
astGeneration/ast.cpp:        base_opt -> Print(lex_stream);
astGeneration/ast.cpp:    name -> Print(lex_stream);
astGeneration/ast.cpp:        type_arguments_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << "=#" << member_value -> id << endl;
astGeneration/ast.cpp:    member_value -> Print(lex_stream);
astGeneration/ast.cpp:    Coutput << '#' << id << " (Annotation):  #" << name -> id << '(';
astGeneration/ast.cpp:        Coutput << " #" << MemberValuePair(i) -> id;
astGeneration/ast.cpp:    name -> Print(lex_stream);
astGeneration/ast.cpp:        MemberValuePair(i) -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << Modifier(i) -> id;
astGeneration/ast.cpp:        Modifier(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << " #" << name -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:    name -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << name -> id;
astGeneration/ast.cpp:    name -> Print(lex_stream);
astGeneration/ast.cpp:            << (package_declaration_opt ? package_declaration_opt -> id : 0)
astGeneration/ast.cpp:        Coutput << " #" << ImportDeclaration(i) -> id;
astGeneration/ast.cpp:        Coutput << " #" << TypeDeclaration(i) -> id;
astGeneration/ast.cpp:        package_declaration_opt -> Print(lex_stream);
astGeneration/ast.cpp:        ImportDeclaration(i) -> Print(lex_stream);
astGeneration/ast.cpp:        TypeDeclaration(i) -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << ClassBodyDeclaration(i) -> id;
astGeneration/ast.cpp:        ClassBodyDeclaration(i) -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << Bound(i) -> id;
astGeneration/ast.cpp:        Bound(i) -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << TypeParameter(i) -> id;
astGeneration/ast.cpp:        TypeParameter(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << lex_stream.NameString(class_body -> identifier_token) << " #"
astGeneration/ast.cpp:            << (type_parameters_opt ? type_parameters_opt -> id : 0)
astGeneration/ast.cpp:            << " #" << (super_opt ? super_opt -> id : 0) << '(';
astGeneration/ast.cpp:        Coutput << " #" << Interface(i) -> id;
astGeneration/ast.cpp:    Coutput << ") #" << class_body -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:        type_parameters_opt -> Print(lex_stream);
astGeneration/ast.cpp:        super_opt -> Print(lex_stream);
astGeneration/ast.cpp:        Interface(i) -> Print(lex_stream);
astGeneration/ast.cpp:    class_body -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << VariableInitializer(i) -> id;
astGeneration/ast.cpp:        VariableInitializer(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << (brackets_opt ? brackets_opt -> id : 0) << endl;
astGeneration/ast.cpp:        brackets_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << variable_declarator_name -> id << " #"
astGeneration/ast.cpp:            << (variable_initializer_opt ? variable_initializer_opt -> id : 0)
astGeneration/ast.cpp:    variable_declarator_name -> Print(lex_stream);
astGeneration/ast.cpp:        variable_initializer_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0)
astGeneration/ast.cpp:            << " #" << type -> id << '(';
astGeneration/ast.cpp:        Coutput << " #" << VariableDeclarator(i) -> id;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:    type -> Print(lex_stream);
astGeneration/ast.cpp:        VariableDeclarator(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0)
astGeneration/ast.cpp:            << " #" << type -> id << " #" << formal_declarator -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:    type -> Print(lex_stream);
astGeneration/ast.cpp:    formal_declarator -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << FormalParameter(i) -> id;
astGeneration/ast.cpp:    Coutput << " ) #" << (brackets_opt ? brackets_opt -> id : 0) << endl;
astGeneration/ast.cpp:        FormalParameter(i) -> Print(lex_stream);
astGeneration/ast.cpp:        brackets_opt -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << explicit_constructor_opt -> id << endl;
astGeneration/ast.cpp:        explicit_constructor_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << " <#"
astGeneration/ast.cpp:            << (type_parameters_opt ? type_parameters_opt -> id : 0)
astGeneration/ast.cpp:            << "> #" << type -> id << " #" << method_declarator -> id
astGeneration/ast.cpp:        Coutput << " #" << Throw(i) -> id;
astGeneration/ast.cpp:            << (default_value_opt ? default_value_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << (method_body_opt ? method_body_opt -> id : 0) << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:        type_parameters_opt -> Print(lex_stream);
astGeneration/ast.cpp:    type -> Print(lex_stream);
astGeneration/ast.cpp:    method_declarator -> Print(lex_stream);
astGeneration/ast.cpp:        Throw(i) -> Print(lex_stream);
astGeneration/ast.cpp:        default_value_opt -> Print(lex_stream);
astGeneration/ast.cpp:        method_body_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0)
astGeneration/ast.cpp:            << " #" << block -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:    block -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << Argument(i) -> id;
astGeneration/ast.cpp:        Argument(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << (type_arguments_opt ? type_arguments_opt -> id : 0)
astGeneration/ast.cpp:            << lex_stream.NameString(this_token) << " #" << arguments -> id
astGeneration/ast.cpp:        type_arguments_opt -> Print(lex_stream);
astGeneration/ast.cpp:    arguments -> Print(lex_stream);
astGeneration/ast.cpp:            << (base_opt ? base_opt -> id : 0) << ".#"
astGeneration/ast.cpp:            << (type_arguments_opt ? type_arguments_opt -> id : 0)
astGeneration/ast.cpp:            << lex_stream.NameString(super_token) << " #" << arguments -> id
astGeneration/ast.cpp:        base_opt -> Print(lex_stream);
astGeneration/ast.cpp:        type_arguments_opt -> Print(lex_stream);
astGeneration/ast.cpp:    arguments -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << " <#"
astGeneration/ast.cpp:            << (type_parameters_opt ? type_parameters_opt -> id : 0)
astGeneration/ast.cpp:            << " #" << constructor_declarator -> id << " throws: (";
astGeneration/ast.cpp:        Coutput << " #" << Throw(i) -> id;
astGeneration/ast.cpp:    Coutput << ") #" << constructor_body -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:        type_parameters_opt -> Print(lex_stream);
astGeneration/ast.cpp:    constructor_declarator -> Print(lex_stream);
astGeneration/ast.cpp:        Throw(i) -> Print(lex_stream);
astGeneration/ast.cpp:    constructor_body -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << lex_stream.NameString(class_body -> identifier_token) << " (";
astGeneration/ast.cpp:        Coutput << " #" << Interface(i) -> id;
astGeneration/ast.cpp:        Coutput << " #" << EnumConstant(i) -> id;
astGeneration/ast.cpp:    Coutput << "} #" << class_body -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:        Interface(i) -> Print(lex_stream);
astGeneration/ast.cpp:        EnumConstant(i) -> Print(lex_stream);
astGeneration/ast.cpp:    class_body -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << (arguments_opt ? arguments_opt -> id : 0) << " #"
astGeneration/ast.cpp:            << (class_body_opt ? class_body_opt -> id : 0) << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:        arguments_opt -> Print(lex_stream);
astGeneration/ast.cpp:        class_body_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << lex_stream.NameString(class_body -> identifier_token) << " #"
astGeneration/ast.cpp:            << (type_parameters_opt ? type_parameters_opt -> id : 0) << " (";
astGeneration/ast.cpp:        Coutput << " #" << Interface(i) -> id;
astGeneration/ast.cpp:    Coutput << ") #" << class_body -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:        type_parameters_opt -> Print(lex_stream);
astGeneration/ast.cpp:        Interface(i) -> Print(lex_stream);
astGeneration/ast.cpp:    class_body -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0) << " @"
astGeneration/ast.cpp:            << lex_stream.NameString(class_body -> identifier_token) << " #"
astGeneration/ast.cpp:            << class_body -> id << endl;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:    class_body -> Print(lex_stream);
astGeneration/ast.cpp:            << (modifiers_opt ? modifiers_opt -> id : 0)
astGeneration/ast.cpp:            << " #" << type -> id << '(';
astGeneration/ast.cpp:        Coutput << " #" << VariableDeclarator(i) -> id;
astGeneration/ast.cpp:        modifiers_opt -> Print(lex_stream);
astGeneration/ast.cpp:    type -> Print(lex_stream);
astGeneration/ast.cpp:        VariableDeclarator(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << declaration -> id << endl;
astGeneration/ast.cpp:    declaration -> Print(lex_stream);
astGeneration/ast.cpp:            << " ( #" << expression -> id << " ) #" << true_statement -> id;
astGeneration/ast.cpp:        Coutput << " else #" << false_statement_opt -> id;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:    true_statement -> Print(lex_stream);
astGeneration/ast.cpp:        false_statement_opt -> Print(lex_stream);
astGeneration/ast.cpp:    Coutput << '#' << id << " (ExpressionStatement):  #" << expression -> id
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:            << (expression_opt ? expression_opt -> id : 0) << ':' << endl;
astGeneration/ast.cpp:        expression_opt -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << SwitchLabel(i) -> id << ':';
astGeneration/ast.cpp:        SwitchLabel(i) -> Print(lex_stream);
astGeneration/ast.cpp:            << " ( #" << expression -> id << " ) #" << switch_block -> id
astGeneration/ast.cpp:            Coutput << "  block: " << cases[i] -> block_index
astGeneration/ast.cpp:                    << "  label: " << cases[i] -> case_index
astGeneration/ast.cpp:                    << "  value: " << cases[i] -> value << endl;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:    switch_block -> Print(lex_stream);
astGeneration/ast.cpp:            << " ( #" << expression -> id << " ) #" << statement -> id << endl;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:    statement -> Print(lex_stream);
astGeneration/ast.cpp:            << " { #" << statement -> id << " } "
astGeneration/ast.cpp:            << " ( #" << expression -> id << " ) #" << endl;
astGeneration/ast.cpp:    statement -> Print(lex_stream);
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << " #" << ForInitStatement(i) -> id;
astGeneration/ast.cpp:    Coutput << "; #" << (end_expression_opt ? end_expression_opt -> id : 0)
astGeneration/ast.cpp:        Coutput << " #" << ForUpdateStatement(i) -> id;
astGeneration/ast.cpp:    Coutput << ") #" << statement -> id << endl;
astGeneration/ast.cpp:        ForInitStatement(i) -> Print(lex_stream);
astGeneration/ast.cpp:        end_expression_opt -> Print(lex_stream);
astGeneration/ast.cpp:        ForUpdateStatement(i) -> Print(lex_stream);
astGeneration/ast.cpp:    statement -> Print(lex_stream);
astGeneration/ast.cpp:            << formal_parameter -> id << ": #" << expression -> id
astGeneration/ast.cpp:            << ") #" << statement -> id << endl;
astGeneration/ast.cpp:    formal_parameter -> Print(lex_stream);
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:    statement -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << (expression_opt ? expression_opt -> id : 0) << endl;
astGeneration/ast.cpp:        expression_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << expression -> id << endl;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:            << " ( #" << expression -> id
astGeneration/ast.cpp:            << " ) #" << block -> id << endl;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:    block -> Print(lex_stream);
astGeneration/ast.cpp:            << " ( #" << condition -> id;
astGeneration/ast.cpp:        Coutput << " : " << message_opt -> id;
astGeneration/ast.cpp:    condition -> Print(lex_stream);
astGeneration/ast.cpp:        message_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << formal_parameter -> id
astGeneration/ast.cpp:            << " #" << block -> id << endl;
astGeneration/ast.cpp:    formal_parameter -> Print(lex_stream);
astGeneration/ast.cpp:    block -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << block -> id << endl;
astGeneration/ast.cpp:    block -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << block -> id
astGeneration/ast.cpp:        Coutput << " #" << CatchClause(i) -> id;
astGeneration/ast.cpp:            << (finally_clause_opt ? finally_clause_opt -> id : 0) << endl;
astGeneration/ast.cpp:    block -> Print(lex_stream);
astGeneration/ast.cpp:        CatchClause(i) -> Print(lex_stream);
astGeneration/ast.cpp:        finally_clause_opt -> Print(lex_stream);
astGeneration/ast.cpp:    Coutput << '#' << id << " (ClassLiteral):  #" << type -> id << ". "
astGeneration/ast.cpp:    type -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << '#' << base_opt -> id << ". ";
astGeneration/ast.cpp:        base_opt -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << '#' << base_opt -> id << ". ";
astGeneration/ast.cpp:        base_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << '#' << expression -> id
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:            << (base_opt ? base_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << (type_arguments_opt ? type_arguments_opt -> id : 0) << " #"
astGeneration/ast.cpp:            << class_type -> id << " #" << arguments -> id << " #"
astGeneration/ast.cpp:            << (class_body_opt ? class_body_opt -> id : 0) << endl;
astGeneration/ast.cpp:        base_opt -> Print(lex_stream);
astGeneration/ast.cpp:        type_arguments_opt -> Print(lex_stream);
astGeneration/ast.cpp:    class_type -> Print(lex_stream);
astGeneration/ast.cpp:    arguments -> Print(lex_stream);
astGeneration/ast.cpp:        class_body_opt -> Print(lex_stream);
astGeneration/ast.cpp:    Coutput << '#' << id << " (DimExpr):  [ #" << expression -> id << " ]"
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << array_type -> id << "dimexpr:( ";
astGeneration/ast.cpp:        Coutput << " #" << DimExpr(i) -> id;
astGeneration/ast.cpp:    Coutput << ") brackets:#" << (brackets_opt ? brackets_opt -> id : 0)
astGeneration/ast.cpp:            << (array_initializer_opt ? array_initializer_opt -> id : 0)
astGeneration/ast.cpp:    array_type -> Print(lex_stream);
astGeneration/ast.cpp:        DimExpr(i) -> Print(lex_stream);
astGeneration/ast.cpp:        brackets_opt -> Print(lex_stream);
astGeneration/ast.cpp:        array_initializer_opt -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << base -> id << ' '
astGeneration/ast.cpp:    base -> Print(lex_stream);
astGeneration/ast.cpp:            << (base_opt ? base_opt -> id : 0) << ".#"
astGeneration/ast.cpp:            << (type_arguments_opt ? type_arguments_opt -> id : 0) << ' '
astGeneration/ast.cpp:            << " #" << arguments -> id << endl;
astGeneration/ast.cpp:        base_opt -> Print(lex_stream);
astGeneration/ast.cpp:        type_arguments_opt -> Print(lex_stream);
astGeneration/ast.cpp:    arguments -> Print(lex_stream);
astGeneration/ast.cpp:            << '#' << base -> id
astGeneration/ast.cpp:            << " [ #" << expression -> id << " ]" << endl;
astGeneration/ast.cpp:    base -> Print(lex_stream);
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:            << '#' << expression -> id
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:            << " #" << expression -> id << endl;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << '#' << id << " #" << expression -> id << endl;
astGeneration/ast.cpp:        type -> Print(lex_stream);
astGeneration/ast.cpp:        Coutput << '#' << id << " (Java Semantic Cast to " << Type() -> Name()
astGeneration/ast.cpp:                << "):  #" << expression -> id << endl;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:            << '#' << left_expression -> id << ' '
astGeneration/ast.cpp:            << " #" << right_expression -> id << endl;
astGeneration/ast.cpp:    left_expression -> Print(lex_stream);
astGeneration/ast.cpp:    right_expression -> Print(lex_stream);
astGeneration/ast.cpp:            << expression -> id << ' '
astGeneration/ast.cpp:            << " #" << type -> id << endl;
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.cpp:    type -> Print(lex_stream);
astGeneration/ast.cpp:            << '#' << test_expression -> id
astGeneration/ast.cpp:            << " ? #" << true_expression -> id
astGeneration/ast.cpp:            << " : #" << false_expression -> id << endl;
astGeneration/ast.cpp:    test_expression -> Print(lex_stream);
astGeneration/ast.cpp:    true_expression -> Print(lex_stream);
astGeneration/ast.cpp:    false_expression -> Print(lex_stream);
astGeneration/ast.cpp:            << '#' << left_hand_side -> id << ' '
astGeneration/ast.cpp:            << " #" << expression -> id << endl;
astGeneration/ast.cpp:    left_hand_side -> Print(lex_stream);
astGeneration/ast.cpp:    expression -> Print(lex_stream);
astGeneration/ast.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
astGeneration/ast.h:// each rule consists of a left-hand side nonterminal followed by "-->"
astGeneration/ast.h:// followed by a right-hand side symbol or a sequence enclosed in the pair of
astGeneration/ast.h:// when "Modifiers" is specified in the right-hand side of a rule either no
astGeneration/ast.h://    destruction - simply delete the pool to reclaim the entire tree.
astGeneration/ast.h://    slightly less time-efficient than a straightforward linked list. My
astGeneration/ast.h:    // nodes. The bit-fields allow smaller Ast objects without sacrificing
astGeneration/ast.h:    // type-safety or debug visibility.
astGeneration/ast.h:    // This is a catch-all set of bits free for the use of subclasses.
astGeneration/ast.h:    // by the constructor, thanks to the 0-initialization guaranteed by
astGeneration/ast.h:    // will be zero-initialized except for what the constructor explicitly
astGeneration/ast.h:    // Clones are used for various things, such as pre-evaluating final
astGeneration/ast.h:// This AstArray template class can be used to construct a bounds-checking
astGeneration/ast.h:        --count; // don't count these nodes
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return element -> LeftToken(); }
astGeneration/ast.h:    virtual TokenIndex RightToken() { return element -> RightToken(); }
astGeneration/ast.h:    LiteralValue* value; // The compile-time constant value of the expression.
astGeneration/ast.h:        return block_statements ? block_statements -> Length() : 0;
astGeneration/ast.h:        return defined_variables ? defined_variables -> Length() : 0;
astGeneration/ast.h:        return base_opt ? base_opt -> LeftToken() : identifier_token;
astGeneration/ast.h:// Type --> PrimitiveType
astGeneration/ast.h:// PrimitiveType --> <PrimitiveKind, PrimitiveName>
astGeneration/ast.h:// PrimitiveKind --> BYTE | SHORT | INT | LONG | CHAR | FLOAT | DOUBLE |
astGeneration/ast.h:// PrimitiveName --> byte_token | short_token | int_token | long_token |
astGeneration/ast.h:// ReferenceType --> ClassType
astGeneration/ast.h:// ClassType --> Name
astGeneration/ast.h:// ArrayType --> <ARRAY, ArrayKind, [_token, ]_token>
astGeneration/ast.h:// ArrayKind --> PrimitiveType
astGeneration/ast.h:    inline unsigned NumBrackets() { return brackets -> dims; }
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return type -> LeftToken(); }
astGeneration/ast.h:    virtual TokenIndex RightToken() { return brackets -> right_bracket_token; }
astGeneration/ast.h:    virtual TokenIndex IdentifierToken() { return type -> IdentifierToken(); }
astGeneration/ast.h:        return bounds_opt ? bounds_opt -> RightToken() : question_token;
astGeneration/ast.h:        return type_arguments -> Length();
astGeneration/ast.h:// Represents a type. Occurs in several contexts - imports; supertypes;
astGeneration/ast.h:        return type_arguments_opt -> TypeArgument(i);
astGeneration/ast.h:            ? type_arguments_opt -> NumTypeArguments() : 0;
astGeneration/ast.h:        return base_opt ? base_opt -> LeftToken() : name -> LeftToken();
astGeneration/ast.h:        return type_arguments_opt ? type_arguments_opt -> right_angle_token
astGeneration/ast.h:            :  name -> identifier_token;
astGeneration/ast.h:        return name -> identifier_token;
astGeneration/ast.h:            : member_value -> LeftToken();
astGeneration/ast.h:    virtual TokenIndex RightToken() { return member_value -> RightToken(); }
astGeneration/ast.h:        return member_value_pairs ? member_value_pairs -> Length() : 0;
astGeneration/ast.h:            : name -> identifier_token;
astGeneration/ast.h:    // Allows sorting between static and non-static declarations.
astGeneration/ast.h:        return modifiers -> Length();
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return Modifier(0) -> LeftToken(); }
astGeneration/ast.h:        return Modifier(NumModifiers() - 1) -> RightToken();
astGeneration/ast.h:// in package-info.java by JSR 175.
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken() : package_token;
astGeneration/ast.h:// ImportDeclaration --> <IMPORT, import_token, Name, *_token_opt, ;_token>
astGeneration/ast.h:        return import_declarations ? import_declarations -> Length() : 0;
astGeneration/ast.h:        return type_declarations ? type_declarations -> Length() : 0;
astGeneration/ast.h:            return package_declaration_opt -> package_token;
astGeneration/ast.h:            return ImportDeclaration(0) -> import_token;
astGeneration/ast.h:            return TypeDeclaration(0) -> LeftToken();
astGeneration/ast.h:            return TypeDeclaration(NumTypeDeclarations() - 1) -> RightToken();
astGeneration/ast.h:            return ImportDeclaration(NumImportDeclarations() - 1) ->
astGeneration/ast.h:            return package_declaration_opt -> semicolon_token;
astGeneration/ast.h:// EmptyDeclaration --> <EMPTY_DECLARATION, ;_token>
astGeneration/ast.h:            ? class_body_declarations -> Length() : 0;
astGeneration/ast.h:        return instance_variables ? instance_variables -> Length() : 0;
astGeneration/ast.h:        return class_variables ? class_variables -> Length() : 0;
astGeneration/ast.h:        return methods ? methods -> Length() : 0;
astGeneration/ast.h:        return constructors ? constructors -> Length() : 0;
astGeneration/ast.h:        return static_initializers ? static_initializers -> Length() : 0;
astGeneration/ast.h:        return instance_initializers ? instance_initializers -> Length() : 0;
astGeneration/ast.h:        return inner_classes ? inner_classes -> Length() : 0;
astGeneration/ast.h:        return inner_enums ? inner_enums -> Length() : 0;
astGeneration/ast.h:        return inner_interfaces ? inner_interfaces -> Length() : 0;
astGeneration/ast.h:        return inner_annotations ? inner_annotations -> Length() : 0;
astGeneration/ast.h:        return empty_declarations ? empty_declarations -> Length() : 0;
astGeneration/ast.h:    inline unsigned NumBounds() { return bounds ? bounds -> Length() : 0; }
astGeneration/ast.h:        return NumBounds() ? Bound(NumBounds() - 1) -> RightToken()
astGeneration/ast.h:        return parameters ? parameters -> Length() : 0;
astGeneration/ast.h:        return interfaces ? interfaces -> Length() : 0;
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken() : class_token;
astGeneration/ast.h:    virtual TokenIndex RightToken() { return class_body -> right_brace_token; }
astGeneration/ast.h:        return variable_initializers ? variable_initializers -> Length() : 0;
astGeneration/ast.h:// VariableDeclaratorId --> <VARIABLE_DECLARATOR_NAME, identifier_token,
astGeneration/ast.h:        return brackets_opt ? brackets_opt -> dims : 0;
astGeneration/ast.h:        return brackets_opt ? brackets_opt -> right_bracket_token
astGeneration/ast.h:// VariableDeclarator --> <VARIABLE_DECLARATOR, VariableDeclaratorId,
astGeneration/ast.h:        return variable_declarator_name -> LeftToken();
astGeneration/ast.h:            ? variable_initializer_opt -> RightToken()
astGeneration/ast.h:            : variable_declarator_name -> RightToken();
astGeneration/ast.h:// FieldDeclaration --> <FIELD, VariableModifiers, Type, VariableDeclarators,
astGeneration/ast.h:// FieldModifier --> Modifier (PUBLIC, PROTECTED, PRIVATE, FINAL, STATIC,
astGeneration/ast.h:        return variable_declarators ? variable_declarators -> Length() : 0;
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken()
astGeneration/ast.h:            : type -> LeftToken();
astGeneration/ast.h:// FormalParameter --> <PARAMETER, Type, VariableDeclaratorId>
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken()
astGeneration/ast.h:            : type -> LeftToken();
astGeneration/ast.h:        return formal_declarator -> RightToken();
astGeneration/ast.h:// MethodDeclarator --> <METHOD_DECLARATOR, identifier_token, (_token,
astGeneration/ast.h:        return formal_parameters ? formal_parameters -> Length() : 0;
astGeneration/ast.h:        return brackets_opt ? brackets_opt -> dims : 0;
astGeneration/ast.h:        return brackets_opt ? brackets_opt -> right_bracket_token
astGeneration/ast.h:    inline unsigned NumThrows() { return throws ? throws -> Length() : 0; }
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken()
astGeneration/ast.h:            : type_parameters_opt ? type_parameters_opt -> left_angle_token
astGeneration/ast.h:            : type -> LeftToken();
astGeneration/ast.h:        return method_body_opt ? method_body_opt -> right_brace_token
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken()
astGeneration/ast.h:            : block -> left_brace_token;
astGeneration/ast.h:    virtual TokenIndex RightToken() { return block -> right_brace_token; }
astGeneration/ast.h:        return arguments ? arguments -> Length() : 0;
astGeneration/ast.h:        return shadow_arguments ? shadow_arguments -> Length() : 0;
astGeneration/ast.h:        return type_arguments_opt ? type_arguments_opt -> left_angle_token
astGeneration/ast.h:        return base_opt ? base_opt -> LeftToken()
astGeneration/ast.h:            : type_arguments_opt ? type_arguments_opt -> left_angle_token
astGeneration/ast.h:// ConstructorDeclaration --> <CONSTRUCTOR, ConstructorModifiers,
astGeneration/ast.h:// ConstructorBody --> <METHOD_BODY, {_token,
astGeneration/ast.h:// ConstructorModifier --> Modifier (PUBLIC, PROTECTED or PRIVATE)
astGeneration/ast.h:// ExplicitConstructorInvocation --> ThisCall
astGeneration/ast.h:    inline unsigned NumThrows() { return throws ? throws -> Length() : 0; }
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken()
astGeneration/ast.h:            : type_parameters_opt ? type_parameters_opt -> left_angle_token
astGeneration/ast.h:            : constructor_declarator -> identifier_token;
astGeneration/ast.h:        return constructor_body -> right_brace_token;
astGeneration/ast.h:        return interfaces ? interfaces -> Length() : 0;
astGeneration/ast.h:        return enum_constants ? enum_constants -> Length() : 0;
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken() : enum_token;
astGeneration/ast.h:    virtual TokenIndex RightToken() { return class_body -> right_brace_token; }
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken() : identifier_token;
astGeneration/ast.h:        return class_body_opt ? class_body_opt -> right_brace_token
astGeneration/ast.h:            : arguments_opt ? arguments_opt -> right_parenthesis_token
astGeneration/ast.h:        return interfaces ? interfaces -> Length() : 0;
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken() : interface_token;
astGeneration/ast.h:    virtual TokenIndex RightToken() { return class_body -> right_brace_token; }
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken()
astGeneration/ast.h:            : interface_token - 1;
astGeneration/ast.h:    virtual TokenIndex RightToken() { return class_body -> right_brace_token; }
astGeneration/ast.h:        return variable_declarators ? variable_declarators -> Length() : 0;
astGeneration/ast.h:        return modifiers_opt ? modifiers_opt -> LeftToken()
astGeneration/ast.h:            : type -> LeftToken();
astGeneration/ast.h:            : (VariableDeclarator(NumVariableDeclarators() - 1) ->
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return declaration -> LeftToken(); }
astGeneration/ast.h:        return declaration -> class_body -> right_brace_token;
astGeneration/ast.h:        return false_statement_opt ? false_statement_opt -> RightToken()
astGeneration/ast.h:            : true_statement -> RightToken();
astGeneration/ast.h:// EmptyStatement --> <EMPTY_STATEMENT, Label_opt, ;_token>
astGeneration/ast.h:// ExpressionStatement --> <EXPRESSION_STATEMENT, Label_opt, Expression,
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return expression -> LeftToken(); }
astGeneration/ast.h:            : expression -> RightToken();
astGeneration/ast.h:// SwitchBlockStatement --> <SWITCH_BLOCK, SwitchLabels, BlockStatements>
astGeneration/ast.h:        return switch_labels ? switch_labels -> Length() : 0;
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return SwitchLabel(0) -> case_token; }
astGeneration/ast.h:// be a plain-old-data type (POD) for efficient copying.
astGeneration/ast.h:// SwitchStatement --> <SWITCH, Label_opt, switch_token, Expression, {_token,
astGeneration/ast.h:    // default case. Index 1 - size are for the case labels, and get sorted.
astGeneration/ast.h:        return (AstSwitchBlockStatement*) switch_block -> Statement(i);
astGeneration/ast.h:    inline unsigned NumBlocks() { return switch_block -> NumStatements(); }
astGeneration/ast.h:        return switch_block -> right_brace_token;
astGeneration/ast.h:// WhileStatement --> <WHILE, Label_opt, while_token, Expression, Statement>
astGeneration/ast.h:    virtual TokenIndex RightToken() { return statement -> right_brace_token; }
astGeneration/ast.h:// DoStatement --> <DO, Label_opt, do_token, Expression, Statement, ;_token>
astGeneration/ast.h:        return for_init_statements ? for_init_statements -> Length() : 0;
astGeneration/ast.h:        return for_update_statements ? for_update_statements -> Length() : 0;
astGeneration/ast.h:    virtual TokenIndex RightToken() { return statement -> right_brace_token; }
astGeneration/ast.h:    virtual TokenIndex RightToken() { return statement -> right_brace_token; }
astGeneration/ast.h:// BreakStatement --> <BREAK, Label_opt, break_token, identifier_token_opt,
astGeneration/ast.h:// ContinueStatement --> <CONTINUE, Label_opt, continue_token, SimpleName_opt,
astGeneration/ast.h:// ReturnStatement --> <RETURN, Label_opt, return_token, Expression_opt,
astGeneration/ast.h:// ThrowStatement --> <THROW, Label_opt, throw_token, Expression, ;_token>
astGeneration/ast.h:// SynchronizedStatement --> <SYNCHRONIZED_STATEMENT, Label_opt,
astGeneration/ast.h:    virtual TokenIndex RightToken() { return block -> right_brace_token; }
astGeneration/ast.h:// AssertStatement --> <ASSERT, Label_opt, assert_token, Expression, ;_token>
astGeneration/ast.h://                 --> <ASSERT, Label_opt, assert_token, Expression, :_token,
astGeneration/ast.h:// CatchClause --> <CATCH, catch_token, FormalParameter, Block>
astGeneration/ast.h:    virtual TokenIndex RightToken() { return block -> right_brace_token; }
astGeneration/ast.h:// FinallyClause --> <FINALLY, finally_token, Block>
astGeneration/ast.h:    virtual TokenIndex RightToken() { return block -> right_brace_token; }
astGeneration/ast.h:// TryStatement --> <TRY, Label_opt, try-token, Block CatchClauses,
astGeneration/ast.h:        return catch_clauses ? catch_clauses -> Length() : 0;
astGeneration/ast.h:        return finally_clause_opt ? finally_clause_opt -> RightToken()
astGeneration/ast.h:            : CatchClause(NumCatchClauses() - 1) -> RightToken();
astGeneration/ast.h:// LongLiteral --> <LONG_LITERAL, long_literal_token, value>
astGeneration/ast.h:// FloatLiteral --> <FLOAT_LITERAL, Literal, value>
astGeneration/ast.h:// DoubleLiteral --> <DOUBLE_LITERAL, Literal, value>
astGeneration/ast.h:// TrueLiteral --> <TRUE_LITERAL, Literal, value>
astGeneration/ast.h:// FalseLiteral --> <FALSE_LITERAL, Literal, value>
astGeneration/ast.h:// StringLiteral --> <STRING_LITERAL, Literal, value>
astGeneration/ast.h:// CharacterLiteral --> <CHARACTER_LITERAL, literal_token, value>
astGeneration/ast.h:// NullLiteral --> <NULL_EXPRESSION, null_token>
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return type -> LeftToken(); }
astGeneration/ast.h:        return base_opt ? base_opt -> LeftToken() : this_token;
astGeneration/ast.h:        return base_opt ? base_opt -> LeftToken() : super_token;
astGeneration/ast.h:// ParenthesizedExpression --> <PARENTHESIZED_EXPRESSION, (_token, Expression,
astGeneration/ast.h:// base_opt -> generated.
astGeneration/ast.h:        return base_opt ? base_opt -> LeftToken() : new_token;
astGeneration/ast.h:        return class_body_opt ? class_body_opt -> right_brace_token
astGeneration/ast.h:            : arguments -> right_parenthesis_token;
astGeneration/ast.h:// DimExpr --> <DIM, [_token, Expression, ]_token>
astGeneration/ast.h:// ArrayCreationExpression --> <ARRAY_CREATION, new_token, Type, DimExprs,
astGeneration/ast.h:        return dim_exprs ? dim_exprs -> Length() : 0;
astGeneration/ast.h:        return brackets_opt ? brackets_opt -> dims : 0;
astGeneration/ast.h:            ? array_initializer_opt -> right_brace_token
astGeneration/ast.h:            : brackets_opt ? brackets_opt -> right_bracket_token
astGeneration/ast.h:            : DimExpr(NumDimExprs() - 1) -> right_bracket_token;
astGeneration/ast.h:// FieldAccess --> <DOT, Primary, ._token, Identifier>
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return base -> LeftToken(); }
astGeneration/ast.h:// can determine this condition by testing base_opt -> generated.
astGeneration/ast.h:        return base_opt ? base_opt -> LeftToken() : identifier_token;
astGeneration/ast.h:        return arguments -> right_parenthesis_token;
astGeneration/ast.h:// ArrayAccess --> <ARRAY_ACCESS, Base, [_token, Expression, ]_token>
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return base -> LeftToken(); }
astGeneration/ast.h:// UnaryExpression --> PreUnaryExpression
astGeneration/ast.h:// PostUnaryExpression --> <POST_UNARY, PostUnaryTag, Expression, PostOperator>
astGeneration/ast.h:// PostUnaryTag --> PLUSPLUS | MINUSMINUS
astGeneration/ast.h:// PostOperator --> ++_token | --_token
astGeneration/ast.h:    // When the left-hand side of an assignment is a name that refers
astGeneration/ast.h:    // that gives write-permission to that field is recorded here.
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return expression -> LeftToken(); }
astGeneration/ast.h:// PreUnaryExpression -->  <PRE_UNARY, PreUnaryTag, PreOperator, Expression>
astGeneration/ast.h:// PreUnaryTag --> PLUS | MINUS | TWIDDLE | NOT | PLUSPLUS | MINUSMINUS
astGeneration/ast.h:// PreOperator --> +_token | -_token | ~_token | !_token | ++_token | --_token
astGeneration/ast.h:    // When the left-hand side of an assignment is a name that refers
astGeneration/ast.h:    // that gives write-permission to that field is recorded here.
astGeneration/ast.h:    virtual TokenIndex RightToken() { return expression -> RightToken(); }
astGeneration/ast.h:// CastExpression --> <castkind, (_token_opt, Type, )_token_opt, Expression>
astGeneration/ast.h:    virtual TokenIndex RightToken() { return expression -> RightToken(); }
astGeneration/ast.h:// BinaryExpression --> <BINARY, BinaryTag, Expression, BinaryOperator,
astGeneration/ast.h:// BinaryTag --> STAR | SLASH | MOD | PLUS | MINUS | LEFT_SHIFT | RIGHT_SHIFT |
astGeneration/ast.h:// BinaryOperator --> *_token | /_token | %_token | +_token | -_token |
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return left_expression -> LeftToken(); }
astGeneration/ast.h:        return right_expression -> RightToken();
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return expression -> LeftToken(); }
astGeneration/ast.h:    virtual TokenIndex RightToken() { return type -> RightToken(); }
astGeneration/ast.h:// ConditionalExpression --> <CONDITIONAL, Expression, ?_token, Expression,
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return test_expression -> LeftToken(); }
astGeneration/ast.h:        return false_expression -> RightToken();
astGeneration/ast.h:// Assignment --> <ASSIGNMENT, AssignmentTag, LeftHandSide, AssignmentOperator,
astGeneration/ast.h:// AssignmentTag --> EQUAL | STAR_EQUAL | SLASH_EQUAL | MOD_EQUAL |
astGeneration/ast.h:// LeftHandSide --> Name | FieldAccess | ArrayAccess | ParenthesizedExpression
astGeneration/ast.h:// of the operator requires a casting of the value of the left-hand side.
astGeneration/ast.h:// AssignmentOperator --> =_token | *=_token | /=_token | %=_token | +=_token |
astGeneration/ast.h://                        -=_token | <<=_token | >>=_token | >>>=_token |
astGeneration/ast.h:    // When the left-hand side of an assignment is a name that refers
astGeneration/ast.h:    // that gives write-permission to that field is recorded here.
astGeneration/ast.h:    virtual TokenIndex LeftToken() { return left_hand_side -> LeftToken(); }
astGeneration/ast.h:    virtual TokenIndex RightToken() { return expression -> RightToken(); }
astGeneration/ast.h:// zero-initialized.
astGeneration/ast.h:    unsigned base_index; // index of current non-full segment
astGeneration/ast.h:            base_increment = 1U << (log_blksize - 8);
astGeneration/ast.h:            base_increment = 1U << (log_blksize - 10);
astGeneration/ast.h:            base_increment = 1U << (log_blksize - 12);
astGeneration/ast.h:    // to it. The memory will be zero-initialized.
astGeneration/ast.h:        unsigned chunk_size = (n + sizeof(Cell) - 1) / sizeof(Cell);
astGeneration/ast.h:                base[base_index] = base[base_index - 1];
astGeneration/ast.h:                base[base_index - 1] = temp;
astGeneration/ast.h:        p -> block_index = block_index;
astGeneration/ast.h:        p -> case_index = case_index;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> no_braces = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:        p -> generated = true;
astGeneration/ast.h:    return class_body && class_body -> semantic_environment;
astGeneration/ast.h:    block_statements -> Next() = statement;
astGeneration/ast.h:        defined_variables = pool -> NewVariableSymbolArray(estimate);
astGeneration/ast.h:    defined_variables -> Next() = variable_symbol;
astGeneration/ast.h:    assert(! argument -> PrimitiveTypeCast());
astGeneration/ast.h:    type_arguments -> Next() = argument;
astGeneration/ast.h:    member_value_pairs -> Next() = pair;
astGeneration/ast.h:    modifiers -> Next() = annotation;
astGeneration/ast.h:    modifiers -> Next() = keyword;
astGeneration/ast.h:    import_declarations -> Next() = import_declaration;
astGeneration/ast.h:    type_declarations -> Next() = type_declaration;
astGeneration/ast.h:    instance_variables -> Next() = field_declaration;
astGeneration/ast.h:    class_variables -> Next() = field_declaration;
astGeneration/ast.h:    methods -> Next() = method_declaration;
astGeneration/ast.h:    constructors -> Next() = constructor_declaration;
astGeneration/ast.h:    static_initializers -> Next() = initializer;
astGeneration/ast.h:    instance_initializers -> Next() = initializer;
astGeneration/ast.h:    inner_classes -> Next() = class_declaration;
astGeneration/ast.h:    inner_enums -> Next() = enum_declaration;
astGeneration/ast.h:    inner_interfaces -> Next() = interface_declaration;
astGeneration/ast.h:    inner_annotations -> Next() = ann;
astGeneration/ast.h:    empty_declarations -> Next() = empty_declaration;
astGeneration/ast.h:    bounds -> Next() = bound;
astGeneration/ast.h:    parameters -> Next() = type;
astGeneration/ast.h:    interfaces -> Next() = interf;
astGeneration/ast.h:    variable_initializers -> Next() = initializer;
astGeneration/ast.h:    variable_declarators -> Next() = variable_declarator;
astGeneration/ast.h:    formal_parameters -> Next() = formal_parameter;
astGeneration/ast.h:    throws -> Next() = exception;
astGeneration/ast.h:    arguments -> Next() = argument;
astGeneration/ast.h:    shadow_arguments -> Next() = argument;
astGeneration/ast.h:    throws -> Next() = exception;
astGeneration/ast.h:    interfaces -> Next() = interf;
astGeneration/ast.h:    constant -> ordinal = enum_constants -> Length();
astGeneration/ast.h:    enum_constants -> Next() = constant;
astGeneration/ast.h:    interfaces -> Next() = interf;
astGeneration/ast.h:    variable_declarators -> Next() = variable_declarator;
astGeneration/ast.h:    switch_labels -> Next() = case_label;
astGeneration/ast.h:    cases = new (pool -> Alloc((estimate + 1) * sizeof(CaseElement*)))
astGeneration/ast.h:    for_init_statements -> Next() = statement;
astGeneration/ast.h:    for_update_statements -> Next() = statement;
astGeneration/ast.h:    catch_clauses -> Next() = catch_clause;
astGeneration/ast.h:    dim_exprs -> Next() = dim_expr;
astGeneration/ast.h:    return pool -> Alloc(size);
astGeneration/ast.h:    return pool -> Alloc(size);
astGeneration/ast.h:    // This bit of code is a compile-time assertion that only Ast* are stuck
astGeneration/ast.h:        array = new (pool -> Alloc(size * sizeof(T))) T[size];
Binary file ast.o matches
astGeneration/body.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
astGeneration/body.cpp:    if (block_body -> NumStatements() == 0)
astGeneration/body.cpp:        block_body -> can_complete_normally = block_body -> is_reachable;
astGeneration/body.cpp:        AstStatement* statement = block_body -> Statement(0);
astGeneration/body.cpp:        statement -> is_reachable = block_body -> is_reachable;
astGeneration/body.cpp:            (AstStatement*) (statement -> is_reachable ? NULL : statement);
astGeneration/body.cpp:        for (unsigned i = 1; i < block_body -> NumStatements(); i++)
astGeneration/body.cpp:            statement = block_body -> Statement(i);
astGeneration/body.cpp:            statement -> is_reachable =
astGeneration/body.cpp:                previous_statement -> can_complete_normally;
astGeneration/body.cpp:            if (! statement -> is_reachable &&
astGeneration/body.cpp:        if (statement -> can_complete_normally)
astGeneration/body.cpp:            block_body -> can_complete_normally = true;
astGeneration/body.cpp:            LocalBlockStack().TopBlock() -> is_reachable)
astGeneration/body.cpp:                               first_unreachable_statement -> LeftToken(),
astGeneration/body.cpp:                               statement -> RightToken());
astGeneration/body.cpp:        BlockSymbol* block = block_body -> block_symbol;
astGeneration/body.cpp:        if (block -> max_variable_index <
astGeneration/body.cpp:            block -> max_variable_index =
astGeneration/body.cpp:    int table_size = block_body -> NumStatements() + 3;
astGeneration/body.cpp:        LocalSymbolTable().Top() -> InsertBlockSymbol(table_size);
astGeneration/body.cpp:    block -> max_variable_index =
astGeneration/body.cpp:        ? enclosing_block -> block_symbol -> max_variable_index : 1;
astGeneration/body.cpp:    LocalSymbolTable().Push(block -> Table());
astGeneration/body.cpp:    block_body -> block_symbol = block;
astGeneration/body.cpp:    block_body -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:    if (block_body -> label_opt != BAD_TOKEN)
astGeneration/body.cpp:            lex_stream -> NameSymbol(block_body -> label_opt);
astGeneration/body.cpp:                           block_body -> label_opt,
astGeneration/body.cpp:                           name_symbol -> Name());
astGeneration/body.cpp:                LocalSymbolTable().Top() -> InsertLabelSymbol(name_symbol);
astGeneration/body.cpp:            label -> block = block_body;
astGeneration/body.cpp:            label -> nesting_level = block_body -> nesting_level;
astGeneration/body.cpp:                            block -> max_variable_index))
astGeneration/body.cpp:            block -> max_variable_index;
astGeneration/body.cpp:    block -> CompressSpace(); // space optimization
astGeneration/body.cpp:    for (TypeSymbol* type = this_type; type != 0; type = type -> super)
astGeneration/body.cpp:        VariableSymbol* variable = type -> FindVariableSymbol(name_symbol);
astGeneration/body.cpp:        for (unsigned i = 0; variable == 0 && i < type -> NumInterfaces(); ++i)
astGeneration/body.cpp:            variable = type -> Interface(i) -> FindVariableSymbol(name_symbol);
astGeneration/body.cpp:            // Ignore static variables if we're looking for non-static,
astGeneration/body.cpp:            // and non-static if we're looking for static.
astGeneration/body.cpp:            if (variable -> ACC_STATIC() != is_static)
astGeneration/body.cpp:            TypeSymbol* containing_type = variable -> ContainingType();
astGeneration/body.cpp:                           name -> identifier_token,
astGeneration/body.cpp:                           name_symbol -> Name(),
astGeneration/body.cpp:                           containing_type -> ContainingPackageName(),
astGeneration/body.cpp:                           containing_type -> ExternalName());
astGeneration/body.cpp:    ProcessType(local_decl -> type);
astGeneration/body.cpp:    TypeSymbol* field_type = local_decl -> type -> symbol;
astGeneration/body.cpp:    for (unsigned i = 0; i < local_decl -> NumVariableDeclarators(); i++)
astGeneration/body.cpp:            local_decl -> VariableDeclarator(i);
astGeneration/body.cpp:            variable_declarator -> variable_declarator_name;
astGeneration/body.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/body.cpp:                           name -> identifier_token, name_symbol -> Name(),
astGeneration/body.cpp:                           duplicate -> FileLoc());
astGeneration/body.cpp:                                          name, name_symbol, ThisMethod() -> ACC_STATIC());
astGeneration/body.cpp:            if (block -> Tag() == AstBlock::SWITCH)
astGeneration/body.cpp:                block = LocalBlockStack()[LocalBlockStack().Size() - 2];
astGeneration/body.cpp:                table = LocalSymbolTable()[LocalSymbolTable().Size() - 2];
astGeneration/body.cpp:                table -> InsertVariableSymbol(name_symbol);
astGeneration/body.cpp:            variable_declarator -> symbol = symbol;
astGeneration/body.cpp:                field_type -> num_dimensions + name -> NumBrackets();
astGeneration/body.cpp:            symbol -> SetType(field_type -> GetArrayType(this, dims));
astGeneration/body.cpp:            symbol -> SetFlags(access_flags);
astGeneration/body.cpp:            symbol -> SetOwner(ThisMethod());
astGeneration/body.cpp:            symbol -> declarator = variable_declarator;
astGeneration/body.cpp:            symbol -> SetLocation();
astGeneration/body.cpp:            symbol -> SetLocalVariableIndex(block -> block_symbol ->
astGeneration/body.cpp:            if (control.IsDoubleWordType(symbol -> Type()))
astGeneration/body.cpp:                block -> block_symbol -> max_variable_index++;
astGeneration/body.cpp:            if (! symbol -> ACC_FINAL() &&
astGeneration/body.cpp:                name_symbol -> IsBadStyleForVariable())
astGeneration/body.cpp:                               name -> identifier_token, name_symbol -> Name());
astGeneration/body.cpp:            else if (symbol -> ACC_FINAL() &&
astGeneration/body.cpp:                     name_symbol -> IsBadStyleForVariable() &&
astGeneration/body.cpp:                     name_symbol -> IsBadStyleForConstantField())
astGeneration/body.cpp:                               name -> identifier_token, name_symbol -> Name());
astGeneration/body.cpp:    local_decl -> can_complete_normally = local_decl -> is_reachable;
astGeneration/body.cpp:    ProcessExpression(expression_statement -> expression);
astGeneration/body.cpp:    expression_statement -> can_complete_normally =
astGeneration/body.cpp:        expression_statement -> is_reachable;
astGeneration/body.cpp:    ProcessExpressionOrStringConstant(synchronized_statement -> expression);
astGeneration/body.cpp:    synchronized_statement -> block -> is_reachable =
astGeneration/body.cpp:        synchronized_statement -> is_reachable;
astGeneration/body.cpp:    if (synchronized_statement -> expression -> Type() -> Primitive() ||
astGeneration/body.cpp:        synchronized_statement -> expression -> symbol == control.null_type)
astGeneration/body.cpp:                       synchronized_statement -> expression,
astGeneration/body.cpp:                       synchronized_statement -> expression -> Type() -> Name());
astGeneration/body.cpp:    AstBlock* block_body = synchronized_statement -> block;
astGeneration/body.cpp:    // monitor. However, since a try-finally may require up to four slots, we
astGeneration/body.cpp:    // variable declaration; try-finally} within the same enclosing block will
astGeneration/body.cpp:    // TODO: Is it worth optimizing this and try-finally to avoid wasting
astGeneration/body.cpp:    BlockSymbol* enclosing_block_symbol = enclosing_block -> block_symbol;
astGeneration/body.cpp:    if (enclosing_block_symbol -> helper_variable_index < 0)
astGeneration/body.cpp:        enclosing_block_symbol -> helper_variable_index =
astGeneration/body.cpp:            enclosing_block_symbol -> max_variable_index;
astGeneration/body.cpp:        enclosing_block_symbol -> max_variable_index += 2;
astGeneration/body.cpp:        if (ThisMethod() -> Type() != control.void_type)
astGeneration/body.cpp:            if (control.IsDoubleWordType(ThisMethod() -> Type()))
astGeneration/body.cpp:                enclosing_block_symbol -> max_variable_index += 2;
astGeneration/body.cpp:            else enclosing_block_symbol -> max_variable_index += 1;
astGeneration/body.cpp:    BlockSymbol* block = LocalSymbolTable().Top() ->
astGeneration/body.cpp:        InsertBlockSymbol(block_body -> NumStatements() + 3);
astGeneration/body.cpp:    block -> max_variable_index = enclosing_block_symbol -> max_variable_index;
astGeneration/body.cpp:    LocalSymbolTable().Push(block -> Table());
astGeneration/body.cpp:    block_body -> block_symbol = block;
astGeneration/body.cpp:    block_body -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:        block -> max_variable_index)
astGeneration/body.cpp:            block -> max_variable_index;
astGeneration/body.cpp:    synchronized_statement -> can_complete_normally =
astGeneration/body.cpp:        synchronized_statement -> block -> can_complete_normally;
astGeneration/body.cpp:    block -> CompressSpace(); // space optimization
astGeneration/body.cpp:    // we want to allow the same compiler-quitening fix as gcc:
astGeneration/body.cpp:        expression -> AssignmentExpressionCast();
astGeneration/body.cpp:        assignment_expression -> SimpleAssignment() &&
astGeneration/body.cpp:        assignment_expression -> Type() == control.boolean_type)
astGeneration/body.cpp:    ProcessExpression(if_statement -> expression);
astGeneration/body.cpp:    TypeSymbol* cond_type = if_statement -> expression -> Type();
astGeneration/body.cpp:                       if_statement -> expression,
astGeneration/body.cpp:                       cond_type -> ContainingPackageName(),
astGeneration/body.cpp:                       cond_type -> ExternalName());
astGeneration/body.cpp:    CheckForAssignmentUsedAsTruthValue(if_statement -> expression);
astGeneration/body.cpp:    if_statement -> true_statement -> is_reachable =
astGeneration/body.cpp:        if_statement -> is_reachable;
astGeneration/body.cpp:    ProcessBlock(if_statement -> true_statement);
astGeneration/body.cpp:    if (if_statement -> false_statement_opt)
astGeneration/body.cpp:        if_statement -> false_statement_opt -> is_reachable =
astGeneration/body.cpp:            if_statement -> is_reachable;
astGeneration/body.cpp:        ProcessBlock(if_statement -> false_statement_opt);
astGeneration/body.cpp:        if_statement -> can_complete_normally =
astGeneration/body.cpp:            if_statement -> true_statement -> can_complete_normally ||
astGeneration/body.cpp:            if_statement -> false_statement_opt -> can_complete_normally;
astGeneration/body.cpp:    else if_statement -> can_complete_normally = if_statement -> is_reachable;
astGeneration/body.cpp:    AstBlock* enclosed_statement = while_statement -> statement;
astGeneration/body.cpp:    enclosed_statement -> is_reachable = while_statement -> is_reachable;
astGeneration/body.cpp:    ProcessExpression(while_statement -> expression);
astGeneration/body.cpp:    TypeSymbol* cond_type = while_statement -> expression -> Type();
astGeneration/body.cpp:        if (IsConstantFalse(while_statement -> expression))
astGeneration/body.cpp:            if (while_statement -> is_reachable)
astGeneration/body.cpp:                while_statement -> can_complete_normally = true;
astGeneration/body.cpp:            enclosed_statement -> is_reachable = false;
astGeneration/body.cpp:        else if (! IsConstantTrue(while_statement -> expression) &&
astGeneration/body.cpp:                 while_statement -> is_reachable)
astGeneration/body.cpp:            while_statement -> can_complete_normally = true;
astGeneration/body.cpp:                       while_statement -> expression,
astGeneration/body.cpp:                       cond_type -> ContainingPackageName(),
astGeneration/body.cpp:                       cond_type -> ExternalName());
astGeneration/body.cpp:    CheckForAssignmentUsedAsTruthValue(while_statement -> expression);
astGeneration/body.cpp:    if (! enclosed_statement -> is_reachable &&
astGeneration/body.cpp:        while_statement -> is_reachable)
astGeneration/body.cpp:    if (block_body -> can_complete_normally)
astGeneration/body.cpp:        while_statement -> can_complete_normally = true;
astGeneration/body.cpp:    // for-statement whose for-init-statements starts with a local
astGeneration/body.cpp:    for (unsigned i = 0; i < for_statement -> NumForInitStatements(); i++)
astGeneration/body.cpp:        ProcessStatement(for_statement -> ForInitStatement(i));
astGeneration/body.cpp:    AstBlock* enclosed_statement = for_statement -> statement;
astGeneration/body.cpp:    enclosed_statement -> is_reachable = for_statement -> is_reachable;
astGeneration/body.cpp:    if (for_statement -> end_expression_opt)
astGeneration/body.cpp:        ProcessExpression(for_statement -> end_expression_opt);
astGeneration/body.cpp:        TypeSymbol* cond_type = for_statement -> end_expression_opt -> Type();
astGeneration/body.cpp:            if (IsConstantFalse(for_statement -> end_expression_opt))
astGeneration/body.cpp:                if (for_statement -> is_reachable)
astGeneration/body.cpp:                    for_statement -> can_complete_normally = true;
astGeneration/body.cpp:                enclosed_statement -> is_reachable = false;
astGeneration/body.cpp:            else if (! IsConstantTrue(for_statement -> end_expression_opt) &&
astGeneration/body.cpp:                     for_statement -> is_reachable)
astGeneration/body.cpp:                for_statement -> can_complete_normally = true;
astGeneration/body.cpp:                           for_statement -> end_expression_opt,
astGeneration/body.cpp:                           cond_type -> ContainingPackageName(),
astGeneration/body.cpp:                           cond_type -> ExternalName());
astGeneration/body.cpp:    if (! enclosed_statement -> is_reachable &&
astGeneration/body.cpp:        for_statement -> is_reachable)
astGeneration/body.cpp:    for (unsigned j = 0; j < for_statement -> NumForUpdateStatements(); j++)
astGeneration/body.cpp:        ProcessExpressionStatement(for_statement -> ForUpdateStatement(j));
astGeneration/body.cpp:    if (block_body -> can_complete_normally)
astGeneration/body.cpp:        for_statement -> can_complete_normally = true;
astGeneration/body.cpp:    // for-statement whose for-init-statements starts with a local
astGeneration/body.cpp:    BlockSymbol* enclosing_block_symbol = enclosing_block -> block_symbol;
astGeneration/body.cpp:    assert(enclosing_block_symbol -> helper_variable_index < 0);
astGeneration/body.cpp:    AstBlock* enclosed_statement = foreach -> statement;
astGeneration/body.cpp:    enclosed_statement -> is_reachable = foreach -> is_reachable;
astGeneration/body.cpp:    ProcessType(foreach -> formal_parameter -> type);
astGeneration/body.cpp:    assert(! foreach -> formal_parameter -> ellipsis_token_opt);
astGeneration/body.cpp:    TypeSymbol* index_type = foreach -> formal_parameter -> type -> symbol;
astGeneration/body.cpp:        ProcessFormalModifiers(foreach -> formal_parameter);
astGeneration/body.cpp:        foreach -> formal_parameter -> formal_declarator;
astGeneration/body.cpp:        variable_declarator -> variable_declarator_name;
astGeneration/body.cpp:        lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/body.cpp:                       name -> identifier_token, name_symbol -> Name(),
astGeneration/body.cpp:                       duplicate -> FileLoc());
astGeneration/body.cpp:        VariableSymbol* symbol = table -> InsertVariableSymbol(name_symbol);
astGeneration/body.cpp:        variable_declarator -> symbol = symbol;
astGeneration/body.cpp:        unsigned dims = index_type -> num_dimensions + name -> NumBrackets();
astGeneration/body.cpp:        symbol -> SetType(index_type -> GetArrayType(this, dims));
astGeneration/body.cpp:        symbol -> SetFlags(access_flags);
astGeneration/body.cpp:        symbol -> SetOwner(ThisMethod());
astGeneration/body.cpp:        symbol -> declarator = variable_declarator;
astGeneration/body.cpp:        symbol -> SetLocation();
astGeneration/body.cpp:        symbol -> SetLocalVariableIndex(enclosing_block_symbol ->
astGeneration/body.cpp:        if (control.IsDoubleWordType(symbol -> Type()))
astGeneration/body.cpp:            enclosing_block_symbol -> max_variable_index++;
astGeneration/body.cpp:        if (! symbol -> ACC_FINAL() && name_symbol -> IsBadStyleForVariable())
astGeneration/body.cpp:                           name -> identifier_token, name_symbol -> Name());
astGeneration/body.cpp:        else if (symbol -> ACC_FINAL() &&
astGeneration/body.cpp:                 name_symbol -> IsBadStyleForVariable() &&
astGeneration/body.cpp:                 name_symbol -> IsBadStyleForConstantField())
astGeneration/body.cpp:                           name -> identifier_token, name_symbol -> Name());
astGeneration/body.cpp:    ProcessExpression(foreach -> expression);
astGeneration/body.cpp:    TypeSymbol* cond_type = foreach -> expression -> Type();
astGeneration/body.cpp:                       stmt -> RightToken(),
astGeneration/body.cpp:                       foreach -> statement -> LeftToken() - 1);
astGeneration/body.cpp:    else if (cond_type -> IsArray())
astGeneration/body.cpp:        component_type = cond_type -> ArraySubtype();
astGeneration/body.cpp:                           foreach -> expression,
astGeneration/body.cpp:                           component_type -> ContainingPackageName(),
astGeneration/body.cpp:                           component_type -> ExternalName(),
astGeneration/body.cpp:                           index_type -> ContainingPackageName(),
astGeneration/body.cpp:                           index_type -> ExternalName());
astGeneration/body.cpp:        enclosing_block_symbol -> helper_variable_index =
astGeneration/body.cpp:            enclosing_block_symbol -> max_variable_index;
astGeneration/body.cpp:        enclosing_block_symbol -> max_variable_index += 3;
astGeneration/body.cpp:    else if (cond_type -> IsSubtype(control.Iterable()))
astGeneration/body.cpp:            if (index_type -> Primitive())
astGeneration/body.cpp:                           foreach -> expression,
astGeneration/body.cpp:                           component_type -> ContainingPackageName(),
astGeneration/body.cpp:                           component_type -> ExternalName(),
astGeneration/body.cpp:                           index_type -> ContainingPackageName(),
astGeneration/body.cpp:                           index_type -> ExternalName());
astGeneration/body.cpp:        enclosing_block_symbol -> helper_variable_index =
astGeneration/body.cpp:            enclosing_block_symbol -> max_variable_index;
astGeneration/body.cpp:        enclosing_block_symbol -> max_variable_index++;
astGeneration/body.cpp:        ReportSemError(SemanticError::TYPE_NOT_ITERABLE, foreach -> expression,
astGeneration/body.cpp:                       cond_type -> ContainingPackageName(),
astGeneration/body.cpp:                       cond_type -> ExternalName());
astGeneration/body.cpp:    foreach -> can_complete_normally = foreach -> is_reachable;
astGeneration/body.cpp:    AstBlock* block_body = switch_statement -> switch_block;
astGeneration/body.cpp:    BlockSymbol* main_block = LocalSymbolTable().Top() -> InsertBlockSymbol();
astGeneration/body.cpp:    main_block -> max_variable_index =
astGeneration/body.cpp:        enclosing_block -> block_symbol -> max_variable_index;
astGeneration/body.cpp:    LocalSymbolTable().Push(main_block -> Table());
astGeneration/body.cpp:    block_body -> block_symbol = main_block;
astGeneration/body.cpp:    block_body -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:    ProcessExpression(switch_statement -> expression);
astGeneration/body.cpp:    TypeSymbol* type = switch_statement -> expression -> Type();
astGeneration/body.cpp:                       switch_statement -> expression,
astGeneration/body.cpp:                       type -> ContainingPackageName(),
astGeneration/body.cpp:                       type -> ExternalName());
astGeneration/body.cpp:    for (unsigned i = 0; i < block_body -> NumStatements(); i++)
astGeneration/body.cpp:        num_case_labels += switch_statement -> Block(i) -> NumSwitchLabels();
astGeneration/body.cpp:    switch_statement -> AllocateCases(num_case_labels);
astGeneration/body.cpp:    block_body -> is_reachable = switch_statement -> is_reachable;
astGeneration/body.cpp:    for (unsigned j = 0; j < block_body -> NumStatements(); j++)
astGeneration/body.cpp:            switch_statement -> Block(j);
astGeneration/body.cpp:             k < switch_block_statement -> NumSwitchLabels(); k++)
astGeneration/body.cpp:                switch_block_statement -> SwitchLabel(k);
astGeneration/body.cpp:            if (switch_label -> expression_opt)
astGeneration/body.cpp:                ProcessExpression(switch_label -> expression_opt);
astGeneration/body.cpp:                    switch_label -> expression_opt -> Type();
astGeneration/body.cpp:                                   switch_label -> expression_opt,
astGeneration/body.cpp:                                   case_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   case_type -> ExternalName());
astGeneration/body.cpp:                    switch_label -> expression_opt -> symbol = control.no_type;
astGeneration/body.cpp:                else if (! switch_label -> expression_opt -> IsConstant())
astGeneration/body.cpp:                                   switch_label -> expression_opt);
astGeneration/body.cpp:                    switch_label -> expression_opt -> symbol = control.no_type;
astGeneration/body.cpp:                                              switch_label -> expression_opt))
astGeneration/body.cpp:                    switch_label -> expression_opt =
astGeneration/body.cpp:                        ConvertToType(switch_label -> expression_opt, type);
astGeneration/body.cpp:                        compilation_unit -> ast_pool -> GenCaseElement(j, k);
astGeneration/body.cpp:                    switch_statement -> AddCase(case_element);
astGeneration/body.cpp:                    case_element -> value = DYNAMIC_CAST<IntLiteralValue*>
astGeneration/body.cpp:                        (switch_label -> expression_opt -> value) -> value;
astGeneration/body.cpp:                                       (switch_label -> expression_opt ->
astGeneration/body.cpp:                                        value) -> value);
astGeneration/body.cpp:                                   switch_label -> expression_opt,
astGeneration/body.cpp:                                   type -> Name());
astGeneration/body.cpp:            else if (! switch_statement -> DefaultCase())
astGeneration/body.cpp:                switch_statement -> DefaultCase() =
astGeneration/body.cpp:                    compilation_unit -> ast_pool -> GenCaseElement(j, k);
astGeneration/body.cpp:                switch_label -> map_index = num_case_labels - 1;
astGeneration/body.cpp:                               switch_block_statement -> SwitchLabel(k));
astGeneration/body.cpp:        assert(switch_block_statement -> NumStatements() > 0);
astGeneration/body.cpp:            LocalSymbolTable().Top() -> InsertBlockSymbol();
astGeneration/body.cpp:        statement_block -> max_variable_index =
astGeneration/body.cpp:            main_block -> max_variable_index;
astGeneration/body.cpp:        LocalSymbolTable().Push(statement_block -> Table());
astGeneration/body.cpp:        switch_block_statement -> block_symbol = statement_block;
astGeneration/body.cpp:        switch_block_statement -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:        switch_block_statement -> is_reachable =
astGeneration/body.cpp:            switch_statement -> is_reachable;
astGeneration/body.cpp:        if (switch_block_statement -> can_complete_normally &&
astGeneration/body.cpp:            j != block_body -> NumStatements() - 1)
astGeneration/body.cpp:        if (statement_block -> max_variable_index <
astGeneration/body.cpp:            statement_block -> max_variable_index =
astGeneration/body.cpp:            statement_block -> max_variable_index)
astGeneration/body.cpp:                statement_block -> max_variable_index;
astGeneration/body.cpp:        statement_block -> CompressSpace();
astGeneration/body.cpp:    if (block_body -> can_complete_normally ||
astGeneration/body.cpp:        ! switch_statement -> DefaultCase())
astGeneration/body.cpp:        switch_statement -> can_complete_normally = true;
astGeneration/body.cpp:            switch_statement -> Block(block_body -> NumStatements() - 1);
astGeneration/body.cpp:        assert(last_switch_block_statement -> NumStatements() > 0);
astGeneration/body.cpp:        AstStatement* last_statement = last_switch_block_statement ->
astGeneration/body.cpp:            Statement(last_switch_block_statement -> NumStatements() - 1);
astGeneration/body.cpp:        if (last_statement -> can_complete_normally)
astGeneration/body.cpp:            switch_statement -> can_complete_normally = true;
astGeneration/body.cpp:    // the map_index field of each AstCaseLabel (1-based, in order to leave
astGeneration/body.cpp:    if (switch_statement -> NumCases())
astGeneration/body.cpp:        switch_statement -> SortCases();
astGeneration/body.cpp:        CaseElement* first_case = switch_statement -> Case(0);
astGeneration/body.cpp:        switch_statement -> Block(first_case -> block_index) ->
astGeneration/body.cpp:            SwitchLabel(first_case -> case_index) -> map_index = 0;
astGeneration/body.cpp:    for (unsigned k = 1; k < switch_statement -> NumCases(); k++)
astGeneration/body.cpp:        CaseElement* case_elt = switch_statement -> Case(k);
astGeneration/body.cpp:        switch_statement -> Block(case_elt -> block_index) ->
astGeneration/body.cpp:            SwitchLabel(case_elt -> case_index) -> map_index = k;
astGeneration/body.cpp:        if (case_elt -> value == switch_statement -> Case(k - 1) -> value)
astGeneration/body.cpp:            IntToWstring value(case_elt -> value);
astGeneration/body.cpp:                           (switch_statement ->
astGeneration/body.cpp:                            Block(case_elt -> block_index) ->
astGeneration/body.cpp:                            SwitchLabel(case_elt -> case_index) ->
astGeneration/body.cpp:    if (main_block -> max_variable_index <
astGeneration/body.cpp:        main_block -> max_variable_index =
astGeneration/body.cpp:                            main_block -> max_variable_index))
astGeneration/body.cpp:            main_block -> max_variable_index;
astGeneration/body.cpp:    main_block -> CompressSpace(); // space optimization
astGeneration/body.cpp:    AstBlock* enclosed_statement = do_statement -> statement;
astGeneration/body.cpp:    enclosed_statement -> is_reachable = do_statement -> is_reachable;
astGeneration/body.cpp:    ProcessExpression(do_statement -> expression);
astGeneration/body.cpp:    TypeSymbol* type = do_statement -> expression -> Type();
astGeneration/body.cpp:                       do_statement -> expression,
astGeneration/body.cpp:                       type -> ContainingPackageName(),
astGeneration/body.cpp:                       type -> ExternalName());
astGeneration/body.cpp:    CheckForAssignmentUsedAsTruthValue(do_statement -> expression);
astGeneration/body.cpp:    do_statement -> can_complete_normally =
astGeneration/body.cpp:        ((enclosed_statement -> can_complete_normally &&
astGeneration/body.cpp:          ! IsConstantTrue(do_statement -> expression)) ||
astGeneration/body.cpp:         block_body -> can_complete_normally);
astGeneration/body.cpp:    if (break_statement -> identifier_token_opt)
astGeneration/body.cpp:            lex_stream -> NameSymbol(break_statement -> identifier_token_opt);
astGeneration/body.cpp:            break_statement -> nesting_level = label_symbol -> nesting_level;
astGeneration/body.cpp:            AstBlock* block_body = label_symbol -> block;
astGeneration/body.cpp:            if (block_body && break_statement -> is_reachable &&
astGeneration/body.cpp:                AbruptFinallyStack().Top() < block_body -> nesting_level)
astGeneration/body.cpp:                block_body -> can_complete_normally = true;
astGeneration/body.cpp:            break_statement -> nesting_level = block_body -> nesting_level;
astGeneration/body.cpp:                           break_statement -> identifier_token_opt,
astGeneration/body.cpp:                           lex_stream -> NameString(break_statement ->
astGeneration/body.cpp:        break_statement -> nesting_level = block_body -> nesting_level;
astGeneration/body.cpp:            if (break_statement -> is_reachable &&
astGeneration/body.cpp:                AbruptFinallyStack().Top() < block_body -> nesting_level)
astGeneration/body.cpp:                block_body -> can_complete_normally = true;
astGeneration/body.cpp:    else if (continue_statement -> identifier_token_opt)
astGeneration/body.cpp:        NameSymbol* name_symbol = lex_stream ->
astGeneration/body.cpp:            NameSymbol(continue_statement -> identifier_token_opt);
astGeneration/body.cpp:            continue_statement -> nesting_level =
astGeneration/body.cpp:                label_symbol -> nesting_level;
astGeneration/body.cpp:            assert(label_symbol -> block -> NumStatements() > 0);
astGeneration/body.cpp:            loop_statement = label_symbol -> block -> Statement(0);
astGeneration/body.cpp:            continue_statement -> nesting_level = block_body -> nesting_level;
astGeneration/body.cpp:                           continue_statement -> identifier_token_opt,
astGeneration/body.cpp:                           lex_stream -> NameString(continue_statement ->
astGeneration/body.cpp:        loop_statement = block_body -> Statement(0);
astGeneration/body.cpp:        continue_statement -> nesting_level = block_body -> nesting_level;
astGeneration/body.cpp:        AstDoStatement* do_statement = loop_statement -> DoStatementCast();
astGeneration/body.cpp:        AstForStatement* for_statement = loop_statement -> ForStatementCast();
astGeneration/body.cpp:            loop_statement -> WhileStatementCast();
astGeneration/body.cpp:            loop_statement -> ForeachStatementCast();
astGeneration/body.cpp:                                        ? do_statement -> statement
astGeneration/body.cpp:                                        ? for_statement -> statement
astGeneration/body.cpp:                                        ? while_statement -> statement
astGeneration/body.cpp:                                        ? foreach_statement -> statement
astGeneration/body.cpp:                continue_statement -> nesting_level)
astGeneration/body.cpp:                enclosed_statement -> can_complete_normally = true;
astGeneration/body.cpp:            assert(continue_statement -> identifier_token_opt);
astGeneration/body.cpp:                           lex_stream -> NameString(continue_statement ->
astGeneration/body.cpp:    if (this_method -> name_symbol == control.clinit_name_symbol ||
astGeneration/body.cpp:        this_method -> name_symbol == control.block_init_name_symbol)
astGeneration/body.cpp:    else if (return_statement -> expression_opt)
astGeneration/body.cpp:        AstExpression* expression = return_statement -> expression_opt;
astGeneration/body.cpp:        TypeSymbol* method_type = this_method -> Type();
astGeneration/body.cpp:        TypeSymbol* expression_type = expression -> Type();
astGeneration/body.cpp:            this_method -> name_symbol == control.init_name_symbol)
astGeneration/body.cpp:                 method_type -> IsArray())
astGeneration/body.cpp:                    return_statement -> expression_opt =
astGeneration/body.cpp:                                   expression_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   expression_type -> ExternalName(),
astGeneration/body.cpp:                                   method_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   method_type -> ExternalName());
astGeneration/body.cpp:    else if (this_method -> Type() != control.void_type &&
astGeneration/body.cpp:             this_method -> name_symbol != control.init_name_symbol)
astGeneration/body.cpp:            ! exception -> IsSubclass(control.RuntimeException()) &&
astGeneration/body.cpp:            ! exception -> IsSubclass(control.Error()));
astGeneration/body.cpp:    for (int i = TryStatementStack().Size() - 1; i >= 0; i--)
astGeneration/body.cpp:        if (try_statement -> finally_clause_opt &&
astGeneration/body.cpp:            (! try_statement -> finally_clause_opt -> block ->
astGeneration/body.cpp:        if (try_statement -> processing_try_block)
astGeneration/body.cpp:            for (unsigned k = 0; k < try_statement -> NumCatchClauses(); k++)
astGeneration/body.cpp:                AstCatchClause* clause = try_statement -> CatchClause(k);
astGeneration/body.cpp:                VariableSymbol* symbol = clause -> parameter_symbol;
astGeneration/body.cpp:                if (CanAssignmentConvertReference(symbol -> Type(), exception))
astGeneration/body.cpp:        for (int l = this_method -> NumThrows() - 1; l >= 0; l--)
astGeneration/body.cpp:            if (CanAssignmentConvertReference(this_method -> Throws(l),
astGeneration/body.cpp:         this_method -> Identity() == control.block_init_name_symbol) ||
astGeneration/body.cpp:        (ThisVariable() && ! ThisVariable() -> ACC_STATIC()))
astGeneration/body.cpp:            this_type -> FindMethodSymbol(control.init_name_symbol);
astGeneration/body.cpp:        if (! this_type -> Anonymous())
astGeneration/body.cpp:            for ( ; ctor; ctor = ctor -> next_method)
astGeneration/body.cpp:                for (k = ctor -> NumThrows() - 1; k >= 0; k--)
astGeneration/body.cpp:                    if (CanAssignmentConvertReference(ctor -> Throws(k),
astGeneration/body.cpp:            for (k = ctor -> NumThrows() - 1; k >= 0; k--)
astGeneration/body.cpp:                if (CanAssignmentConvertReference(ctor -> Throws(k),
astGeneration/body.cpp:                ctor -> AddThrows(exception);
astGeneration/body.cpp:        if (this_method -> Identity() == control.clinit_name_symbol)
astGeneration/body.cpp:            if (this_method -> Identity() == control.block_init_name_symbol)
astGeneration/body.cpp:                assert(! ThisType() -> Anonymous());
astGeneration/body.cpp:            else if (this_method -> Identity() == control.init_name_symbol)
astGeneration/body.cpp:    else if (ThisType() -> ACC_INTERFACE())
astGeneration/body.cpp:        if (this_variable -> ACC_STATIC())
astGeneration/body.cpp:            assert(! ThisType() -> Anonymous());
astGeneration/body.cpp:    ProcessExpression(throw_statement -> expression);
astGeneration/body.cpp:    TypeSymbol* type = throw_statement -> expression -> Type();
astGeneration/body.cpp:        exception_set -> AddElement(type);
astGeneration/body.cpp:                       throw_statement, type -> ContainingPackageName(),
astGeneration/body.cpp:                       type -> ExternalName(), UncaughtExceptionContext());
astGeneration/body.cpp:    // return address of the jsr.  And if the method has a return type, 1-2
astGeneration/body.cpp:        enclosing_block -> block_symbol -> max_variable_index;
astGeneration/body.cpp:    if (try_statement -> finally_clause_opt)
astGeneration/body.cpp:        BlockSymbol* enclosing_block_symbol = enclosing_block -> block_symbol;
astGeneration/body.cpp:        if (enclosing_block_symbol -> helper_variable_index < 0)
astGeneration/body.cpp:            enclosing_block_symbol -> helper_variable_index =
astGeneration/body.cpp:                enclosing_block_symbol -> max_variable_index;
astGeneration/body.cpp:            enclosing_block_symbol -> max_variable_index += 2;
astGeneration/body.cpp:            if (ThisMethod() -> Type() != control.void_type)
astGeneration/body.cpp:                if (control.IsDoubleWordType(ThisMethod() -> Type()))
astGeneration/body.cpp:                    enclosing_block_symbol -> max_variable_index += 2;
astGeneration/body.cpp:                else enclosing_block_symbol -> max_variable_index++;
astGeneration/body.cpp:        AstBlock* block_body = try_statement -> finally_clause_opt -> block;
astGeneration/body.cpp:        block_body -> is_reachable = try_statement -> is_reachable;
astGeneration/body.cpp:        assert(! try_statement -> can_complete_normally);
astGeneration/body.cpp:        max_variable_index = block_body -> block_symbol -> max_variable_index;
astGeneration/body.cpp:        if (block_body -> NumStatements() == 0)
astGeneration/body.cpp:        if (! block_body -> can_complete_normally)
astGeneration/body.cpp:            AbruptFinallyStack().Push(block_body -> nesting_level);
astGeneration/body.cpp:    // Note that the catch clauses are processed first - prior to processing
astGeneration/body.cpp:    // the main block - so that we can have their parameters available when we
astGeneration/body.cpp:    for (unsigned i = 0; i < try_statement -> NumCatchClauses(); i++)
astGeneration/body.cpp:        AstCatchClause* clause = try_statement -> CatchClause(i);
astGeneration/body.cpp:        AstFormalParameter* parameter = clause -> formal_parameter;
astGeneration/body.cpp:        assert(! parameter -> ellipsis_token_opt);
astGeneration/body.cpp:            parameter -> formal_declarator -> variable_declarator_name;
astGeneration/body.cpp:        ProcessType(parameter -> type);
astGeneration/body.cpp:        TypeSymbol* parm_type = parameter -> type -> symbol;
astGeneration/body.cpp:        if (name -> NumBrackets())
astGeneration/body.cpp:            parm_type = parm_type ->
astGeneration/body.cpp:                GetArrayType(this, (parm_type -> num_dimensions +
astGeneration/body.cpp:                                    name -> NumBrackets()));
astGeneration/body.cpp:        if (! parm_type -> IsSubclass(control.Throwable()) &&
astGeneration/body.cpp:                           parm_type -> ContainingPackageName(),
astGeneration/body.cpp:                           parm_type -> ExternalName());
astGeneration/body.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/body.cpp:                           name -> identifier_token, name_symbol -> Name(),
astGeneration/body.cpp:                           duplicate -> FileLoc());
astGeneration/body.cpp:        AstBlock* block_body = clause -> block;
astGeneration/body.cpp:        if (control.option.pedantic && block_body -> NumStatements() == 0)
astGeneration/body.cpp:        BlockSymbol* block = LocalSymbolTable().Top() ->
astGeneration/body.cpp:            InsertBlockSymbol(block_body -> NumStatements() + 1);
astGeneration/body.cpp:        block -> max_variable_index = max_variable_index;
astGeneration/body.cpp:        LocalSymbolTable().Push(block -> Table());
astGeneration/body.cpp:            LocalSymbolTable().Top() -> InsertVariableSymbol(name_symbol);
astGeneration/body.cpp:        symbol -> SetFlags(access_flags);
astGeneration/body.cpp:        symbol -> SetType(parm_type);
astGeneration/body.cpp:        symbol -> SetOwner(ThisMethod());
astGeneration/body.cpp:        symbol -> SetLocalVariableIndex(block -> max_variable_index++);
astGeneration/body.cpp:        symbol -> MarkComplete();
astGeneration/body.cpp:        symbol -> declarator = parameter -> formal_declarator;
astGeneration/body.cpp:        symbol -> SetLocation();
astGeneration/body.cpp:        parameter -> formal_declarator -> symbol = symbol;
astGeneration/body.cpp:        clause -> parameter_symbol = symbol;
astGeneration/body.cpp:        block_body -> is_reachable = true;
astGeneration/body.cpp:        block_body -> block_symbol = block;
astGeneration/body.cpp:        block_body -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:            block -> max_variable_index)
astGeneration/body.cpp:                block -> max_variable_index;
astGeneration/body.cpp:        if (block_body -> can_complete_normally)
astGeneration/body.cpp:            try_statement -> can_complete_normally = true;
astGeneration/body.cpp:        block -> CompressSpace(); // space optimization
astGeneration/body.cpp:    try_statement -> processing_try_block = true;
astGeneration/body.cpp:    try_statement -> block -> is_reachable = try_statement -> is_reachable;
astGeneration/body.cpp:    AstBlock* block_body = try_statement -> block;
astGeneration/body.cpp:    // declarations in things like for-init, without expensive reallocation.
astGeneration/body.cpp:    BlockSymbol* block = LocalSymbolTable().Top() ->
astGeneration/body.cpp:        InsertBlockSymbol(block_body -> NumStatements() + 3);
astGeneration/body.cpp:    block -> max_variable_index = max_variable_index;
astGeneration/body.cpp:    LocalSymbolTable().Push(block -> Table());
astGeneration/body.cpp:    block_body -> block_symbol = block;
astGeneration/body.cpp:    block_body -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:        block -> max_variable_index)
astGeneration/body.cpp:            block -> max_variable_index;
astGeneration/body.cpp:    block -> CompressSpace(); // space optimization
astGeneration/body.cpp:    if (try_statement -> block -> can_complete_normally)
astGeneration/body.cpp:        try_statement -> can_complete_normally = true;
astGeneration/body.cpp:    exception_set -> AddElement(control.Error());
astGeneration/body.cpp:    exception_set -> AddElement(control.RuntimeException());
astGeneration/body.cpp:    for (unsigned l = 0; l < try_statement -> NumCatchClauses(); l++)
astGeneration/body.cpp:        AstCatchClause* clause = try_statement -> CatchClause(l);
astGeneration/body.cpp:        TypeSymbol* type = clause -> parameter_symbol -> Type();
astGeneration/body.cpp:                 (TypeSymbol*) exception_set -> FirstElement();
astGeneration/body.cpp:             exception = (TypeSymbol*) exception_set -> NextElement())
astGeneration/body.cpp:                           clause -> formal_parameter,
astGeneration/body.cpp:                           type -> ContainingPackageName(),
astGeneration/body.cpp:                           type -> ExternalName());
astGeneration/body.cpp:                previous_clause = try_statement -> CatchClause(k);
astGeneration/body.cpp:                if (type -> IsSubclass(previous_clause -> parameter_symbol ->
astGeneration/body.cpp:                                 (previous_clause -> formal_parameter ->
astGeneration/body.cpp:                    previous_clause -> parameter_symbol -> Type();
astGeneration/body.cpp:                               clause -> formal_parameter,
astGeneration/body.cpp:                               type -> ContainingPackageName(),
astGeneration/body.cpp:                               type -> ExternalName(),
astGeneration/body.cpp:                               prev_type -> ContainingPackageName(),
astGeneration/body.cpp:                               prev_type -> ExternalName(),
astGeneration/body.cpp:            else clause -> block -> is_reachable = true;
astGeneration/body.cpp:    try_statement -> processing_try_block = false;
astGeneration/body.cpp:            exception_set -> RemoveElement(catchable_exceptions[i]);
astGeneration/body.cpp:        TryExceptionTableStack().Top() -> Union(*exception_set);
astGeneration/body.cpp:    if (try_statement -> finally_clause_opt &&
astGeneration/body.cpp:        ! try_statement -> finally_clause_opt -> block -> can_complete_normally)
astGeneration/body.cpp:        try_statement -> can_complete_normally = false;
astGeneration/body.cpp:    ProcessExpression(assert_statement -> condition);
astGeneration/body.cpp:    TypeSymbol* type = assert_statement -> condition -> Type();
astGeneration/body.cpp:                       assert_statement -> condition,
astGeneration/body.cpp:                       type -> ContainingPackageName(),
astGeneration/body.cpp:                       type -> ExternalName());
astGeneration/body.cpp:    // assert variable (creating it if necessary as a side-effect). However,
astGeneration/body.cpp:    else if (! IsConstantTrue(assert_statement -> condition) &&
astGeneration/body.cpp:        assert_statement -> assert_variable =
astGeneration/body.cpp:            ThisType() -> FindOrInsertAssertVariable();
astGeneration/body.cpp:    if (assert_statement -> message_opt)
astGeneration/body.cpp:        ProcessExpressionOrStringConstant(assert_statement -> message_opt);
astGeneration/body.cpp:        if (assert_statement -> message_opt -> Type() == control.void_type)
astGeneration/body.cpp:                           assert_statement -> message_opt,
astGeneration/body.cpp:                           assert_statement -> message_opt -> Type() -> Name());
astGeneration/body.cpp:    assert_statement -> can_complete_normally =
astGeneration/body.cpp:        assert_statement -> is_reachable;
astGeneration/body.cpp:    empty_statement -> can_complete_normally = empty_statement -> is_reachable;
astGeneration/body.cpp:    NameSymbol* name_symbol = lex_stream ->
astGeneration/body.cpp:        NameSymbol(class_declaration -> class_body -> identifier_token);
astGeneration/body.cpp:        LocalSymbolTable().Top() -> InsertTypeSymbol(name_symbol);
astGeneration/body.cpp:    TypeSymbol* outermost_type = this_type -> outermost_type;
astGeneration/body.cpp:    if (! this_type -> local)
astGeneration/body.cpp:        this_type -> local = new SymbolSet;
astGeneration/body.cpp:    IntToWstring value(this_type -> NumLocalTypes() +
astGeneration/body.cpp:                       this_type -> NumAnonymousTypes() + 1);
astGeneration/body.cpp:    int length = this_type -> ExternalNameLength() + 1 + value.Length() +
astGeneration/body.cpp:        name_symbol -> NameLength(); // +1 for $
astGeneration/body.cpp:    wcscpy(external_name, this_type -> ExternalName());
astGeneration/body.cpp:    wcscat(external_name, name_symbol -> Name());
astGeneration/body.cpp:    type -> outermost_type = outermost_type;
astGeneration/body.cpp:    type -> SetExternalIdentity(control.FindOrInsertName(external_name,
astGeneration/body.cpp:    this_type -> local -> AddElement(type);
astGeneration/body.cpp:    AstDeclaredType* class_declaration = class_statement -> declaration;
astGeneration/body.cpp:    AstClassBody* class_body = class_declaration -> class_body;
astGeneration/body.cpp:                               class_body -> identifier_token);
astGeneration/body.cpp:    inner_type -> outermost_type = ThisType() -> outermost_type;
astGeneration/body.cpp:    inner_type -> supertypes_closure = new SymbolSet;
astGeneration/body.cpp:    inner_type -> subtypes_closure = new SymbolSet;
astGeneration/body.cpp:    inner_type -> subtypes = new SymbolSet;
astGeneration/body.cpp:    inner_type -> semantic_environment =
astGeneration/body.cpp:    inner_type -> declaration = class_body;
astGeneration/body.cpp:    inner_type -> file_symbol = source_file_symbol;
astGeneration/body.cpp:    inner_type -> SetFlags(ProcessLocalClassModifiers(class_declaration));
astGeneration/body.cpp:    inner_type -> SetOwner(ThisMethod());
astGeneration/body.cpp:    inner_type -> SetSymbolTable(class_body -> NumClassBodyDeclarations() + 3);
astGeneration/body.cpp:    inner_type -> SetLocation();
astGeneration/body.cpp:    inner_type -> SetSignature(control);
astGeneration/body.cpp:        inner_type -> InsertThis0();
astGeneration/body.cpp:    class_body -> semantic_environment = inner_type -> semantic_environment;
astGeneration/body.cpp:    if (this_call -> type_arguments_opt)
astGeneration/body.cpp:                       this_call -> type_arguments_opt);
astGeneration/body.cpp:    bool bad_argument = ProcessArguments(this_call -> arguments);
astGeneration/body.cpp:                                                    this_call -> this_token,
astGeneration/body.cpp:                                                    this_call -> RightToken());
astGeneration/body.cpp:            this_call -> symbol = constructor;
astGeneration/body.cpp:            MethodInvocationConversion(this_call -> arguments, constructor);
astGeneration/body.cpp:            for (unsigned i = 0; i < constructor -> NumThrows(); i++)
astGeneration/body.cpp:                TypeSymbol* exception = constructor -> Throws(i);
astGeneration/body.cpp:                                   this_call -> this_token,
astGeneration/body.cpp:                                   exception -> ContainingPackageName(),
astGeneration/body.cpp:                                   exception -> ExternalName());
astGeneration/body.cpp:    if (super_call -> symbol)
astGeneration/body.cpp:        assert(this_type -> Anonymous());
astGeneration/body.cpp:    TypeSymbol* super_type = this_type -> super;
astGeneration/body.cpp:                       super_call -> super_token);
astGeneration/body.cpp:    if (super_call -> base_opt)
astGeneration/body.cpp:        ProcessExpression(super_call -> base_opt);
astGeneration/body.cpp:        TypeSymbol* expr_type = super_call -> base_opt -> Type();
astGeneration/body.cpp:            TypeSymbol* containing_type = super_type -> EnclosingType();
astGeneration/body.cpp:            if (expr_type -> Primitive() || expr_type == control.null_type)
astGeneration/body.cpp:                               super_call -> base_opt,
astGeneration/body.cpp:                               expr_type -> ExternalName());
astGeneration/body.cpp:                super_call -> base_opt -> symbol = control.no_type;
astGeneration/body.cpp:                if (! super_type -> Bad())
astGeneration/body.cpp:                                   super_call -> base_opt,
astGeneration/body.cpp:                                   super_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   super_type -> ExternalName(),
astGeneration/body.cpp:                                   this_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   this_type -> ExternalName(),
astGeneration/body.cpp:                                   expr_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   expr_type -> ExternalName());
astGeneration/body.cpp:                super_call -> base_opt -> symbol = control.no_type;
astGeneration/body.cpp:            else if (! expr_type -> IsSubclass(containing_type))
astGeneration/body.cpp:                               super_call -> base_opt,
astGeneration/body.cpp:                               this_type -> ContainingPackageName(),
astGeneration/body.cpp:                               this_type -> ExternalName(),
astGeneration/body.cpp:                               containing_type -> ContainingPackageName(),
astGeneration/body.cpp:                               containing_type -> ExternalName(),
astGeneration/body.cpp:                               expr_type -> ContainingPackageName(),
astGeneration/body.cpp:                               expr_type -> ExternalName());
astGeneration/body.cpp:                super_call -> base_opt -> symbol = control.no_type;
astGeneration/body.cpp:    else // (! super_call -> base_opt)
astGeneration/body.cpp:        if (super_type && super_type -> EnclosingType())
astGeneration/body.cpp:            super_call -> base_opt =
astGeneration/body.cpp:                CreateAccessToType(super_call, super_type -> EnclosingType());
astGeneration/body.cpp:    if (super_call -> type_arguments_opt)
astGeneration/body.cpp:                       super_call -> type_arguments_opt);
astGeneration/body.cpp:    bool bad_argument = ProcessArguments(super_call -> arguments);
astGeneration/body.cpp:                                      super_call -> super_token,
astGeneration/body.cpp:                                      super_call -> RightToken());
astGeneration/body.cpp:        if (constructor -> ACC_PRIVATE())
astGeneration/body.cpp:            constructor = super_type -> GetReadAccessConstructor(constructor);
astGeneration/body.cpp:            super_call -> arguments -> AddNullArgument();
astGeneration/body.cpp:        super_call -> symbol = constructor;
astGeneration/body.cpp:        if (super_call -> base_opt)
astGeneration/body.cpp:            assert(CanAssignmentConvertReference(super_type -> EnclosingType(),
astGeneration/body.cpp:                                                 super_call -> base_opt -> Type()));
astGeneration/body.cpp:            super_call -> base_opt =
astGeneration/body.cpp:                ConvertToType(super_call -> base_opt,
astGeneration/body.cpp:                              super_type -> EnclosingType());
astGeneration/body.cpp:        MethodInvocationConversion(super_call -> arguments, constructor);
astGeneration/body.cpp:        for (i = 0; i < constructor -> NumThrows(); i++)
astGeneration/body.cpp:            TypeSymbol* exception = constructor -> Throws(i);
astGeneration/body.cpp:                               exception -> ContainingPackageName(),
astGeneration/body.cpp:                               exception -> ExternalName(),
astGeneration/body.cpp:                               constructor -> containing_type -> ContainingPackageName(),
astGeneration/body.cpp:                               constructor -> containing_type -> ExternalName());
astGeneration/body.cpp:        if (super_type -> IsLocal())
astGeneration/body.cpp:            unsigned param_count = super_type -> NumConstructorParameters();
astGeneration/body.cpp:            if (super_type -> LocalClassProcessingCompleted() && param_count)
astGeneration/body.cpp:                super_call -> arguments -> AllocateLocalArguments(param_count);
astGeneration/body.cpp:                    AstName* simple_name = compilation_unit ->
astGeneration/body.cpp:                        ast_pool -> GenName(super_call -> super_token);
astGeneration/body.cpp:                        FindLocalVariable(super_type -> ConstructorParameter(i),
astGeneration/body.cpp:                    simple_name -> symbol = accessor;
astGeneration/body.cpp:                    TypeSymbol* owner = accessor -> ContainingType();
astGeneration/body.cpp:                    super_call -> arguments -> AddLocalArgument(simple_name);
astGeneration/body.cpp:                super_type -> AddLocalConstructorCallEnvironment
astGeneration/body.cpp:                    (GetEnvironment(super_call -> arguments));
astGeneration/body.cpp:    TypeSymbol* throw_type = throw_expression -> symbol;
astGeneration/body.cpp:    if (throw_type -> Bad())
astGeneration/body.cpp:    if (throw_type -> ACC_INTERFACE())
astGeneration/body.cpp:                       throw_type -> ContainingPackageName(),
astGeneration/body.cpp:                       throw_type -> ExternalName());
astGeneration/body.cpp:    else if (! throw_type -> IsSubclass(control.Throwable()))
astGeneration/body.cpp:                       throw_type -> ContainingPackageName(),
astGeneration/body.cpp:                       throw_type -> ExternalName());
astGeneration/body.cpp:                           throw_type -> ContainingPackageName(),
astGeneration/body.cpp:                           throw_type -> ExternalName());
astGeneration/body.cpp:            for (unsigned i = 0; i < throws_list -> Length(); i++)
astGeneration/body.cpp:                TypeSymbol* other_type = other_expr -> symbol;
astGeneration/body.cpp:                                   throw_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   throw_type -> ExternalName());
astGeneration/body.cpp:                else if (throw_type -> IsSubclass(other_type))
astGeneration/body.cpp:                                   throw_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   throw_type -> ExternalName(),
astGeneration/body.cpp:                                   other_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   other_type -> ExternalName());
astGeneration/body.cpp:                else if (other_type -> IsSubclass(throw_type))
astGeneration/body.cpp:                                   other_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   other_type -> ExternalName(),
astGeneration/body.cpp:                                   throw_type -> ContainingPackageName(),
astGeneration/body.cpp:                                   throw_type -> ExternalName());
astGeneration/body.cpp:                    int last_index = throws_list -> Length() - 1;
astGeneration/body.cpp:                    throws_list -> Reset(last_index);
astGeneration/body.cpp:                    i--;
astGeneration/body.cpp:                throws_list -> Next() = throw_expression;
astGeneration/body.cpp:    if (method_declaration -> NumThrows())
astGeneration/body.cpp:                (method_declaration -> NumThrows());
astGeneration/body.cpp:        for (unsigned k = 0; k < method_declaration -> NumThrows(); k++)
astGeneration/body.cpp:            CheckThrow(method_declaration -> Throw(k), throws_list);
astGeneration/body.cpp:    if (method_declaration -> method_body_opt)
astGeneration/body.cpp:        AstMethodBody* method_body = method_declaration -> method_body_opt;
astGeneration/body.cpp:        if (method_body -> explicit_constructor_opt)
astGeneration/body.cpp:                           method_body -> explicit_constructor_opt);
astGeneration/body.cpp:        method_body -> block_symbol = this_method -> block_symbol;
astGeneration/body.cpp:        method_body -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:        if (method_body -> can_complete_normally)
astGeneration/body.cpp:            if (this_method -> Type() == control.void_type)
astGeneration/body.cpp:                    compilation_unit -> ast_pool -> GenReturnStatement();
astGeneration/body.cpp:                return_statement -> return_token =
astGeneration/body.cpp:                    method_body -> right_brace_token;
astGeneration/body.cpp:                return_statement -> semicolon_token =
astGeneration/body.cpp:                    method_body -> right_brace_token;
astGeneration/body.cpp:                return_statement -> is_reachable = true;
astGeneration/body.cpp:                method_body -> can_complete_normally = false;
astGeneration/body.cpp:                method_body -> AddStatement(return_statement);
astGeneration/body.cpp:                               method_declaration -> type -> LeftToken(),
astGeneration/body.cpp:                               method_declaration -> method_declarator -> identifier_token,
astGeneration/body.cpp:                               this_method -> Header(),
astGeneration/body.cpp:                               this_method -> Type() -> Name());
astGeneration/body.cpp:        if (this_method -> ACC_ABSTRACT() || this_method -> ACC_NATIVE())
astGeneration/body.cpp:                           method_declaration, this_method -> Header());
astGeneration/body.cpp:    else if (! (this_method -> ACC_ABSTRACT() || this_method -> ACC_NATIVE()))
astGeneration/body.cpp:                       method_declaration, this_method -> Header());
astGeneration/body.cpp:    this_method -> block_symbol -> CompressSpace(); // space optimization
astGeneration/body.cpp:    if (constructor_declaration -> NumThrows())
astGeneration/body.cpp:                (constructor_declaration -> NumThrows());
astGeneration/body.cpp:        for (unsigned k = 0; k < constructor_declaration -> NumThrows(); k++)
astGeneration/body.cpp:            CheckThrow(constructor_declaration -> Throw(k), throws_list);
astGeneration/body.cpp:        constructor_declaration -> constructor_body;
astGeneration/body.cpp:    TypeSymbol* super_type = this_type -> super;
astGeneration/body.cpp:    if (constructor_block -> explicit_constructor_opt)
astGeneration/body.cpp:            constructor_block -> explicit_constructor_opt -> SuperCallCast();
astGeneration/body.cpp:            AstThisCall* this_call = constructor_block ->
astGeneration/body.cpp:                explicit_constructor_opt -> ThisCallCast();
astGeneration/body.cpp:        TokenIndex loc = constructor_block -> LeftToken();
astGeneration/body.cpp:        super_call = compilation_unit -> ast_pool -> GenSuperCall();
astGeneration/body.cpp:        super_call -> super_token = loc;
astGeneration/body.cpp:        super_call -> arguments =
astGeneration/body.cpp:            compilation_unit -> ast_pool -> GenArguments(loc, loc);
astGeneration/body.cpp:        super_call -> semicolon_token = loc;
astGeneration/body.cpp:        constructor_block -> explicit_constructor_opt = super_call;
astGeneration/body.cpp:    int table_size = constructor_block -> NumStatements();
astGeneration/body.cpp:    BlockSymbol* block = LocalSymbolTable().Top() ->
astGeneration/body.cpp:    block -> max_variable_index =
astGeneration/body.cpp:        this_method -> block_symbol -> max_variable_index;
astGeneration/body.cpp:    LocalSymbolTable().Push(block -> Table());
astGeneration/body.cpp:    constructor_block -> block_symbol = block;
astGeneration/body.cpp:    constructor_block -> nesting_level = LocalBlockStack().Size();
astGeneration/body.cpp:    if (constructor_block -> can_complete_normally)
astGeneration/body.cpp:            compilation_unit -> ast_pool -> GenReturnStatement();
astGeneration/body.cpp:        return_statement -> return_token =
astGeneration/body.cpp:            constructor_block -> right_brace_token;
astGeneration/body.cpp:        return_statement -> semicolon_token =
astGeneration/body.cpp:            constructor_block -> right_brace_token;
astGeneration/body.cpp:        return_statement -> is_reachable = true;
astGeneration/body.cpp:        constructor_block -> can_complete_normally = false;
astGeneration/body.cpp:        constructor_block -> AddStatement(return_statement);
astGeneration/body.cpp:    if (this_method -> block_symbol -> max_variable_index <
astGeneration/body.cpp:        block -> max_variable_index)
astGeneration/body.cpp:        this_method -> block_symbol -> max_variable_index =
astGeneration/body.cpp:            block -> max_variable_index;
astGeneration/body.cpp:    block -> CompressSpace(); // space optimization
astGeneration/body.cpp:    if (compilation_unit -> BadCompilationUnitCast())
astGeneration/body.cpp:    state_stack.Push(class_body -> semantic_environment);
astGeneration/body.cpp:    assert(this_type -> HeaderProcessed());
astGeneration/body.cpp:    assert(this_type -> ConstructorMembersProcessed());
astGeneration/body.cpp:    assert(this_type -> MethodMembersProcessed());
astGeneration/body.cpp:    assert(this_type -> FieldMembersProcessed());
astGeneration/body.cpp:    if (! this_type -> ACC_INTERFACE())
astGeneration/body.cpp:        Tuple<VariableSymbol*> unassigned(FinalFields() -> Length());
astGeneration/body.cpp:        for (i = 0; i < FinalFields() -> Length(); i++)
astGeneration/body.cpp:            if (! DefinitelyAssignedVariables() -> da_set[i])
astGeneration/body.cpp:                assert(! variable_symbol -> ACC_STATIC());
astGeneration/body.cpp:        if (class_body -> NumConstructors() == 0)
astGeneration/body.cpp:                               unassigned[i] -> declarator,
astGeneration/body.cpp:                               unassigned[i] -> Name());
astGeneration/body.cpp:            if (class_body -> default_constructor)
astGeneration/body.cpp:                    class_body -> default_constructor -> constructor_symbol;
astGeneration/body.cpp:                LocalSymbolTable().Push(ThisMethod() -> block_symbol ->
astGeneration/body.cpp:                ProcessConstructorBody(class_body -> default_constructor);
astGeneration/body.cpp:                ThisMethod() -> max_block_depth = 1;
astGeneration/body.cpp:            for (i = 0; i < class_body -> NumConstructors(); i++)
astGeneration/body.cpp:                    class_body -> Constructor(i);
astGeneration/body.cpp:                    constructor_decl -> constructor_symbol;
astGeneration/body.cpp:                    constructor_decl -> constructor_body;
astGeneration/body.cpp:                LocalSymbolTable().Push(this_method -> block_symbol ->
astGeneration/body.cpp:                this_method -> max_block_depth = LocalBlockStack().max_size;
astGeneration/body.cpp:                if (constructor_block -> explicit_constructor_opt &&
astGeneration/body.cpp:                    (constructor_block -> explicit_constructor_opt ->
astGeneration/body.cpp:                    DefinitelyAssignedVariables() -> AssignAll();
astGeneration/body.cpp:                        if (! DefinitelyAssignedVariables() ->
astGeneration/body.cpp:                            da_set[variable_symbol -> LocalVariableIndex()])
astGeneration/body.cpp:                                           variable_symbol -> Name());
astGeneration/body.cpp:    DefinitelyAssignedVariables() -> AssignAll();
astGeneration/body.cpp:    BlankFinals() -> SetEmpty();
astGeneration/body.cpp:    for (i = 0; i < class_body -> NumMethods(); i++)
astGeneration/body.cpp:        AstMethodDeclaration* method_decl = class_body -> Method(i);
astGeneration/body.cpp:        ThisMethod() = method_decl -> method_symbol;
astGeneration/body.cpp:            LocalSymbolTable().Push(this_method -> block_symbol -> Table());
astGeneration/body.cpp:            this_method -> max_block_depth = LocalBlockStack().max_size;
astGeneration/body.cpp:    for (i = 0; i < class_body -> NumNestedClasses(); i++)
astGeneration/body.cpp:        AstClassDeclaration* declaration = class_body -> NestedClass(i);
astGeneration/body.cpp:        if (declaration -> class_body -> semantic_environment)
astGeneration/body.cpp:            ProcessExecutableBodies(declaration -> class_body);
astGeneration/body.cpp:    for (i = 0; i < class_body -> NumNestedInterfaces(); i++)
astGeneration/body.cpp:            class_body -> NestedInterface(i);
astGeneration/body.cpp:        if (declaration -> class_body -> semantic_environment)
astGeneration/body.cpp:            ProcessExecutableBodies(declaration -> class_body);
Binary file body.o matches
astGeneration/bytecode.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
astGeneration/bytecode.cpp:    AstClassBody* class_body = unit_type -> declaration;
astGeneration/bytecode.cpp:    for (i = 0; i < class_body -> NumClassVariables(); i++)
astGeneration/bytecode.cpp:        AstFieldDeclaration* field_decl = class_body -> ClassVariable(i);
astGeneration/bytecode.cpp:             vi < field_decl -> NumVariableDeclarators(); vi++)
astGeneration/bytecode.cpp:            AstVariableDeclarator* vd = field_decl -> VariableDeclarator(vi);
astGeneration/bytecode.cpp:            DeclareField(vd -> symbol);
astGeneration/bytecode.cpp:        (unit_type -> NumVariableSymbols());
astGeneration/bytecode.cpp:    for (i = 0; i < class_body -> NumInstanceVariables(); i++)
astGeneration/bytecode.cpp:        AstFieldDeclaration* field_decl  = class_body -> InstanceVariable(i);
astGeneration/bytecode.cpp:             vi < field_decl -> NumVariableDeclarators(); vi++)
astGeneration/bytecode.cpp:            AstVariableDeclarator* vd = field_decl -> VariableDeclarator(vi);
astGeneration/bytecode.cpp:            VariableSymbol* vsym = vd -> symbol;
astGeneration/bytecode.cpp:            if (vd -> variable_initializer_opt && vsym -> initial_value)
astGeneration/bytecode.cpp:                assert(init = vd -> variable_initializer_opt ->
astGeneration/bytecode.cpp:                assert(init -> IsConstant() && vd -> symbol -> ACC_FINAL());
astGeneration/bytecode.cpp:    if (unit_type -> EnclosingType())
astGeneration/bytecode.cpp:        DeclareField(unit_type -> EnclosingInstance());
astGeneration/bytecode.cpp:    for (i = 0; i < unit_type -> NumConstructorParameters(); i++)
astGeneration/bytecode.cpp:        DeclareField(unit_type -> ConstructorParameter(i));
astGeneration/bytecode.cpp:    for (i = 0; i < unit_type -> NumClassLiterals(); i++)
astGeneration/bytecode.cpp:        DeclareField(unit_type -> ClassLiteral(i));
astGeneration/bytecode.cpp:    VariableSymbol* assert_variable = unit_type -> AssertVariable();
astGeneration/bytecode.cpp:                                    unit_type -> declaration,
astGeneration/bytecode.cpp:                                    unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                    unit_type -> ExternalName());
astGeneration/bytecode.cpp:    for (i = 0; i < class_body -> NumMethods(); i++)
astGeneration/bytecode.cpp:        AstMethodDeclaration* method = class_body -> Method(i);
astGeneration/bytecode.cpp:        if (method -> method_symbol)
astGeneration/bytecode.cpp:            BeginMethod(method_index, method -> method_symbol);
astGeneration/bytecode.cpp:            if (method -> method_body_opt) // not an abstract method ?
astGeneration/bytecode.cpp:                EmitBlockStatement(method -> method_body_opt);
astGeneration/bytecode.cpp:            EndMethod(method_index, method -> method_symbol);
astGeneration/bytecode.cpp:    for (i = 0; i < unit_type -> NumPrivateAccessMethods(); i++)
astGeneration/bytecode.cpp:        MethodSymbol* method_sym = unit_type -> PrivateAccessMethod(i);
astGeneration/bytecode.cpp:        AstMethodDeclaration* method = method_sym -> declaration ->
astGeneration/bytecode.cpp:        EmitBlockStatement(method -> method_body_opt);
astGeneration/bytecode.cpp:    MethodSymbol* class_literal_sym = unit_type -> ClassLiteralMethod();
astGeneration/bytecode.cpp:    if (unit_type -> instance_initializer_method)
astGeneration/bytecode.cpp:            unit_type -> instance_initializer_method -> declaration;
astGeneration/bytecode.cpp:        AstBlock* init_block = declaration -> method_body_opt;
astGeneration/bytecode.cpp:                        unit_type -> instance_initializer_method);
astGeneration/bytecode.cpp:            EndMethod(method_index, unit_type -> instance_initializer_method);
astGeneration/bytecode.cpp:    if (class_body -> default_constructor)
astGeneration/bytecode.cpp:        CompileConstructor(class_body -> default_constructor,
astGeneration/bytecode.cpp:        for (i = 0; i < class_body -> NumConstructors(); i++)
astGeneration/bytecode.cpp:            CompileConstructor(class_body -> Constructor(i),
astGeneration/bytecode.cpp:    for (i = 0; i < unit_type -> NumPrivateAccessConstructors(); i++)
astGeneration/bytecode.cpp:            unit_type -> PrivateAccessConstructor(i);
astGeneration/bytecode.cpp:            constructor_sym -> declaration -> ConstructorDeclarationCast();
astGeneration/bytecode.cpp:    if (unit_type -> static_initializer_method)
astGeneration/bytecode.cpp:            unit_type -> static_initializer_method -> declaration;
astGeneration/bytecode.cpp:        AstBlock* init_block = declaration -> method_body_opt;
astGeneration/bytecode.cpp:            BeginMethod(method_index, unit_type -> static_initializer_method);
astGeneration/bytecode.cpp:                GenerateAssertVariableInitializer(unit_type -> outermost_type,
astGeneration/bytecode.cpp:            EndMethod(method_index, unit_type -> static_initializer_method);
astGeneration/bytecode.cpp:                                unit_type -> declaration,
astGeneration/bytecode.cpp:                                unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                unit_type -> ExternalName());
astGeneration/bytecode.cpp:                                unit_type -> declaration,
astGeneration/bytecode.cpp:                                unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                unit_type -> ExternalName());
astGeneration/bytecode.cpp:                                unit_type -> declaration,
astGeneration/bytecode.cpp:                                unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                unit_type -> ExternalName());
astGeneration/bytecode.cpp:                                unit_type -> declaration,
astGeneration/bytecode.cpp:                                unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                unit_type -> ExternalName());
astGeneration/bytecode.cpp:                                unit_type -> declaration,
astGeneration/bytecode.cpp:                                unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                unit_type -> ExternalName());
astGeneration/bytecode.cpp:                                unit_type -> declaration,
astGeneration/bytecode.cpp:                                unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                unit_type -> ExternalName());
astGeneration/bytecode.cpp:    MethodSymbol* method_symbol = constructor -> constructor_symbol;
astGeneration/bytecode.cpp:    AstMethodBody* constructor_block = constructor -> constructor_body;
astGeneration/bytecode.cpp:    shadow_parameter_offset = unit_type -> EnclosingType() ? 2 : 1;
astGeneration/bytecode.cpp:    if (unit_type -> NumConstructorParameters())
astGeneration/bytecode.cpp:        for (unsigned j = 0; j < method_symbol -> NumFormalParameters(); j++)
astGeneration/bytecode.cpp:                GetTypeWords(method_symbol -> FormalParameter(j) -> Type());
astGeneration/bytecode.cpp:        if (constructor_block -> explicit_constructor_opt)
astGeneration/bytecode.cpp:            EmitStatement(constructor_block -> explicit_constructor_opt);
astGeneration/bytecode.cpp:    if (constructor_block -> explicit_constructor_opt &&
astGeneration/bytecode.cpp:        ! constructor_block -> explicit_constructor_opt -> ThisCallCast())
astGeneration/bytecode.cpp:        if (unit_type -> EnclosingType())
astGeneration/bytecode.cpp:            VariableSymbol* this0_parameter = unit_type -> EnclosingInstance();
astGeneration/bytecode.cpp:            LoadLocal(1, this0_parameter -> Type());
astGeneration/bytecode.cpp:             i < unit_type -> NumConstructorParameters(); i++)
astGeneration/bytecode.cpp:            VariableSymbol* shadow = unit_type -> ConstructorParameter(i);
astGeneration/bytecode.cpp:            LoadLocal(index, shadow -> Type());
astGeneration/bytecode.cpp:            if (control.IsDoubleWordType(shadow -> Type()))
astGeneration/bytecode.cpp:                ChangeStack(-1);
astGeneration/bytecode.cpp:            index += GetTypeWords(shadow -> Type());
astGeneration/bytecode.cpp:        if (constructor_block -> explicit_constructor_opt)
astGeneration/bytecode.cpp:            EmitStatement(constructor_block -> explicit_constructor_opt);
astGeneration/bytecode.cpp:        constructor_block -> explicit_constructor_opt &&
astGeneration/bytecode.cpp:        ! constructor_block -> explicit_constructor_opt -> ThisCallCast())
astGeneration/bytecode.cpp:        CompleteCall(unit_type -> instance_initializer_method, 0);
astGeneration/bytecode.cpp:    const TypeSymbol* type = symbol -> Type();
astGeneration/bytecode.cpp:    if (type -> num_dimensions > 255)
astGeneration/bytecode.cpp:                                symbol -> declarator);
astGeneration/bytecode.cpp:    fields[field_index] -> SetFlags(symbol -> Flags());
astGeneration/bytecode.cpp:    fields[field_index] -> SetNameIndex(RegisterName(symbol ->
astGeneration/bytecode.cpp:    fields[field_index] -> SetDescriptorIndex(RegisterUtf8(type -> signature));
astGeneration/bytecode.cpp:    if (symbol -> initial_value)
astGeneration/bytecode.cpp:        assert(symbol -> ACC_FINAL());
astGeneration/bytecode.cpp:        assert(type -> Primitive() || type == control.String());
astGeneration/bytecode.cpp:                                      (symbol -> initial_value))
astGeneration/bytecode.cpp:                                     (symbol -> initial_value))
astGeneration/bytecode.cpp:                                    (symbol -> initial_value))
astGeneration/bytecode.cpp:                                   (symbol -> initial_value))
astGeneration/bytecode.cpp:                                     (symbol -> initial_value)));
astGeneration/bytecode.cpp:        fields[field_index] ->
astGeneration/bytecode.cpp:    if (symbol -> ACC_SYNTHETIC() &&
astGeneration/bytecode.cpp:        fields[field_index] -> AddAttribute(CreateSyntheticAttribute());
astGeneration/bytecode.cpp:    if (symbol -> IsDeprecated())
astGeneration/bytecode.cpp:        fields[field_index] -> AddAttribute(CreateDeprecatedAttribute());
astGeneration/bytecode.cpp:        Coutput << "(51) Generating code for method \"" << msym -> Name()
astGeneration/bytecode.cpp:                << unit_type -> ContainingPackageName() << "/"
astGeneration/bytecode.cpp:                << unit_type -> ExternalName() << endl;
astGeneration/bytecode.cpp:                << unit_type -> ContainingPackageName() << '.'
astGeneration/bytecode.cpp:                << unit_type -> ExternalName() << '.' << msym -> Name()
astGeneration/bytecode.cpp:                << msym -> signature -> value << endl;
astGeneration/bytecode.cpp:    methods[method_index] ->
astGeneration/bytecode.cpp:        SetNameIndex(RegisterName(msym -> ExternalIdentity()));
astGeneration/bytecode.cpp:    methods[method_index] ->
astGeneration/bytecode.cpp:        SetDescriptorIndex(RegisterUtf8(msym -> signature));
astGeneration/bytecode.cpp:    methods[method_index] -> SetFlags(msym -> Flags());
astGeneration/bytecode.cpp:    if (msym -> ACC_SYNTHETIC() &&
astGeneration/bytecode.cpp:        methods[method_index] -> AddAttribute(CreateSyntheticAttribute());
astGeneration/bytecode.cpp:    if (msym -> IsDeprecated())
astGeneration/bytecode.cpp:        methods[method_index] -> AddAttribute(CreateDeprecatedAttribute());
astGeneration/bytecode.cpp:    if (msym -> NumThrows())
astGeneration/bytecode.cpp:        for (unsigned i = 0; i < msym -> NumThrows(); i++)
astGeneration/bytecode.cpp:            exceptions_attribute ->
astGeneration/bytecode.cpp:                AddExceptionIndex(RegisterClass(msym -> Throws(i)));
astGeneration/bytecode.cpp:        methods[method_index] -> AddAttribute(exceptions_attribute);
astGeneration/bytecode.cpp:    if (! (msym -> ACC_ABSTRACT() || msym -> ACC_NATIVE()))
astGeneration/bytecode.cpp:            new MethodStack(msym -> max_block_depth,
astGeneration/bytecode.cpp:                            msym -> block_symbol -> max_variable_index);
astGeneration/bytecode.cpp:                              msym -> block_symbol -> max_variable_index);
astGeneration/bytecode.cpp:    if (msym -> Type() -> num_dimensions > 255)
astGeneration/bytecode.cpp:        assert(msym -> declaration -> MethodDeclarationCast());
astGeneration/bytecode.cpp:        Ast* type = ((AstMethodDeclaration*) msym -> declaration) -> type;
astGeneration/bytecode.cpp:    for (unsigned i = 0; i < msym -> NumFormalParameters(); i++)
astGeneration/bytecode.cpp:        parameter = msym -> FormalParameter(i);
astGeneration/bytecode.cpp:        if (parameter -> Type() -> num_dimensions > 255)
astGeneration/bytecode.cpp:                                    parameter -> declarator);
astGeneration/bytecode.cpp:        int last_parameter_index = parameter -> LocalVariableIndex();
astGeneration/bytecode.cpp:        if (control.IsDoubleWordType(parameter -> Type()))
astGeneration/bytecode.cpp:            assert(msym -> declaration);
astGeneration/bytecode.cpp:                msym -> declaration -> MethodDeclarationCast();
astGeneration/bytecode.cpp:                msym -> declaration -> ConstructorDeclarationCast();
astGeneration/bytecode.cpp:                ? method_declaration -> method_declarator
astGeneration/bytecode.cpp:                : constructor_declaration -> constructor_declarator;
astGeneration/bytecode.cpp:                                    declarator -> left_parenthesis_token,
astGeneration/bytecode.cpp:                                    declarator -> right_parenthesis_token,
astGeneration/bytecode.cpp:                                    msym -> Header(),
astGeneration/bytecode.cpp:                                    unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                    unit_type -> ExternalName());
astGeneration/bytecode.cpp:    if (! (msym -> ACC_ABSTRACT() || msym -> ACC_NATIVE()))
astGeneration/bytecode.cpp:        if (msym -> block_symbol -> max_variable_index > 65535)
astGeneration/bytecode.cpp:                                    msym -> declaration, msym -> Header(),
astGeneration/bytecode.cpp:                                    unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                    unit_type -> ExternalName());
astGeneration/bytecode.cpp:                                    msym -> declaration, msym -> Header(),
astGeneration/bytecode.cpp:                                    unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                    unit_type -> ExternalName());
astGeneration/bytecode.cpp:        if (code_attribute -> CodeLengthExceeded())
astGeneration/bytecode.cpp:                                    msym -> declaration, msym -> Header(),
astGeneration/bytecode.cpp:                                    unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                    unit_type -> ExternalName());
astGeneration/bytecode.cpp:        code_attribute -> SetMaxStack(max_stack);
astGeneration/bytecode.cpp:        // Sanity check - make sure nothing jumped past here
astGeneration/bytecode.cpp:        assert((u2) last_label_pc < code_attribute -> CodeLength() ||
astGeneration/bytecode.cpp:               code_attribute -> CodeLength() == 0x0ffff);
astGeneration/bytecode.cpp:        // write, and -g:lines is enabled.
astGeneration/bytecode.cpp:            line_number_table_attribute -> LineNumberTableLength())
astGeneration/bytecode.cpp:             code_attribute -> AddAttribute(line_number_table_attribute);
astGeneration/bytecode.cpp:        // Debug level -g:vars & not dealing with generated accessed method
astGeneration/bytecode.cpp:            && (! msym -> accessed_member)
astGeneration/bytecode.cpp:            && (msym -> Identity() != control.class_name_symbol))
astGeneration/bytecode.cpp:            if (! msym -> ACC_STATIC()) // add 'this' to local variable table
astGeneration/bytecode.cpp:                local_variable_table_attribute ->
astGeneration/bytecode.cpp:                    AddLocalVariable(0, code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                     RegisterUtf8(control.this_name_symbol -> Utf8_literal),
astGeneration/bytecode.cpp:                                     RegisterUtf8(msym -> containing_type -> signature),
astGeneration/bytecode.cpp:            for (unsigned i = 0; i < msym -> NumFormalParameters(); i++)
astGeneration/bytecode.cpp:                VariableSymbol* parameter = msym -> FormalParameter(i);
astGeneration/bytecode.cpp:                local_variable_table_attribute ->
astGeneration/bytecode.cpp:                    AddLocalVariable(0, code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                     RegisterName(parameter -> ExternalIdentity()),
astGeneration/bytecode.cpp:                                     RegisterUtf8(parameter -> Type() -> signature),
astGeneration/bytecode.cpp:                                     parameter -> LocalVariableIndex());
astGeneration/bytecode.cpp:            if (local_variable_table_attribute -> LocalVariableTableLength())
astGeneration/bytecode.cpp:                 code_attribute -> AddAttribute(local_variable_table_attribute);
astGeneration/bytecode.cpp:        methods[method_index] -> AddAttribute(code_attribute);
astGeneration/bytecode.cpp:// This is called to initialize non-constant static fields, and all instance
astGeneration/bytecode.cpp:    assert(vd -> variable_initializer_opt && vd -> symbol);
astGeneration/bytecode.cpp:        vd -> variable_initializer_opt -> ExpressionCast();
astGeneration/bytecode.cpp:        if (vd -> symbol -> ACC_STATIC())
astGeneration/bytecode.cpp:            assert(! vd -> symbol -> initial_value);
astGeneration/bytecode.cpp:            vd -> variable_initializer_opt -> ArrayInitializerCast();
astGeneration/bytecode.cpp:        if (! vd -> symbol -> ACC_STATIC())
astGeneration/bytecode.cpp:        InitializeArray(vd -> symbol -> Type(), array_initializer);
astGeneration/bytecode.cpp:    PutOp(vd -> symbol -> ACC_STATIC() ? OP_PUTSTATIC : OP_PUTFIELD);
astGeneration/bytecode.cpp:    if (expression && control.IsDoubleWordType(expression -> Type()))
astGeneration/bytecode.cpp:        ChangeStack(-1);
astGeneration/bytecode.cpp:    PutU2(RegisterFieldref(vd -> symbol));
astGeneration/bytecode.cpp:    TypeSymbol* subtype = type -> ArraySubtype();
astGeneration/bytecode.cpp:        LoadImmediateInteger(array_initializer -> NumVariableInitializers());
astGeneration/bytecode.cpp:         i < array_initializer -> NumVariableInitializers(); i++)
astGeneration/bytecode.cpp:        Ast* entry = array_initializer -> VariableInitializer(i);
astGeneration/bytecode.cpp:        AstExpression* expr = entry -> ExpressionCast();
astGeneration/bytecode.cpp:        if (expr && (IsZero(expr) || expr -> Type() == control.null_type))
astGeneration/bytecode.cpp:            if (expr -> Type() == control.float_type)
astGeneration/bytecode.cpp:                    (expr -> value);
astGeneration/bytecode.cpp:                optimize = value -> value.IsPositiveZero();
astGeneration/bytecode.cpp:            else if (expr -> Type() == control.double_type)
astGeneration/bytecode.cpp:                    (expr -> value);
astGeneration/bytecode.cpp:                optimize = value -> value.IsPositiveZero();
astGeneration/bytecode.cpp:            assert(entry -> ArrayInitializerCast());
astGeneration/bytecode.cpp:            InitializeArray(subtype, entry -> ArrayInitializerCast(),
astGeneration/bytecode.cpp:        assert(method_stack -> StartPc(declarator -> symbol) == 0xFFFF);
astGeneration/bytecode.cpp:        Coutput << "(53) Variable \"" << declarator -> symbol -> Name()
astGeneration/bytecode.cpp:                << declarator -> symbol -> LocalVariableIndex()
astGeneration/bytecode.cpp:        method_stack -> StartPc(declarator -> symbol) =
astGeneration/bytecode.cpp:            code_attribute -> CodeLength();
astGeneration/bytecode.cpp:    TypeSymbol* type = declarator -> symbol -> Type();
astGeneration/bytecode.cpp:    if (type -> num_dimensions > 255)
astGeneration/bytecode.cpp:    if (declarator -> symbol -> initial_value)
astGeneration/bytecode.cpp:        LoadLiteral(declarator -> symbol -> initial_value,
astGeneration/bytecode.cpp:                    declarator -> symbol -> Type());
astGeneration/bytecode.cpp:    else if (declarator -> variable_initializer_opt)
astGeneration/bytecode.cpp:        AstArrayCreationExpression* ace = declarator ->
astGeneration/bytecode.cpp:            variable_initializer_opt -> ArrayCreationExpressionCast();
astGeneration/bytecode.cpp:        AstArrayInitializer* ai = declarator ->
astGeneration/bytecode.cpp:            variable_initializer_opt -> ArrayInitializerCast();
astGeneration/bytecode.cpp:                (AstExpression*) declarator -> variable_initializer_opt;
astGeneration/bytecode.cpp:            assert(declarator -> variable_initializer_opt -> ExpressionCast());
astGeneration/bytecode.cpp:            // multi-dimensional array on the aastore opcode).  The
astGeneration/bytecode.cpp:            // assigned to a multi-dimensional local variable or directly
astGeneration/bytecode.cpp:                (StripNops(expr) -> Type() == control.null_type))
astGeneration/bytecode.cpp:    StoreLocal(declarator -> symbol -> LocalVariableIndex(), type);
astGeneration/bytecode.cpp:    if (! statement -> BlockCast())
astGeneration/bytecode.cpp:        line_number_table_attribute ->
astGeneration/bytecode.cpp:            AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                          semantic.lex_stream -> Line(statement -> LeftToken()));
astGeneration/bytecode.cpp:    switch (statement -> kind)
astGeneration/bytecode.cpp:                statement -> LocalVariableStatementCast();
astGeneration/bytecode.cpp:            for (unsigned i = 0; i < lvs -> NumVariableDeclarators(); i++)
astGeneration/bytecode.cpp:                DeclareLocalVariable(lvs -> VariableDeclarator(i));
astGeneration/bytecode.cpp:        EmitStatementExpression(statement -> ExpressionStatementCast() ->
astGeneration/bytecode.cpp:            if (IsOne(if_statement -> expression))
astGeneration/bytecode.cpp:                return EmitBlockStatement(if_statement -> true_statement);
astGeneration/bytecode.cpp:            if (IsZero(if_statement -> expression))
astGeneration/bytecode.cpp:                if (if_statement -> false_statement_opt)
astGeneration/bytecode.cpp:                    return EmitBlockStatement(if_statement ->
astGeneration/bytecode.cpp:            if (if_statement -> false_statement_opt &&
astGeneration/bytecode.cpp:                ! IsNop(if_statement -> false_statement_opt))
astGeneration/bytecode.cpp:                if (IsNop(if_statement -> true_statement))
astGeneration/bytecode.cpp:                    EmitBranchIfExpression(if_statement -> expression,
astGeneration/bytecode.cpp:                                           (if_statement ->
astGeneration/bytecode.cpp:                    EmitBlockStatement(if_statement -> false_statement_opt);
astGeneration/bytecode.cpp:                AstBlock* true_statement = if_statement -> true_statement;
astGeneration/bytecode.cpp:                EmitBranchIfExpression(if_statement -> expression,
astGeneration/bytecode.cpp:                               if_statement -> false_statement_opt);
astGeneration/bytecode.cpp:                abrupt &= EmitBlockStatement(if_statement ->
astGeneration/bytecode.cpp:            if (IsNop(if_statement -> true_statement))
astGeneration/bytecode.cpp:                EmitExpression(if_statement -> expression, false);
astGeneration/bytecode.cpp:            EmitBranchIfExpression(if_statement -> expression,
astGeneration/bytecode.cpp:                                   if_statement -> true_statement);
astGeneration/bytecode.cpp:            EmitBlockStatement(if_statement -> true_statement);
astGeneration/bytecode.cpp:        return EmitSwitchStatement(statement -> SwitchStatementCast());
astGeneration/bytecode.cpp:            AstWhileStatement* wp = statement -> WhileStatementCast();
astGeneration/bytecode.cpp:            if (! wp -> statement -> can_complete_normally)
astGeneration/bytecode.cpp:                if (wp -> expression -> IsConstant())
astGeneration/bytecode.cpp:                    assert(semantic.IsConstantTrue(wp -> expression));
astGeneration/bytecode.cpp:                    line_number_table_attribute ->
astGeneration/bytecode.cpp:                        AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                      semantic.lex_stream -> Line(wp -> expression -> LeftToken()));
astGeneration/bytecode.cpp:                    EmitBranchIfExpression(wp -> expression, false,
astGeneration/bytecode.cpp:                                           method_stack -> TopBreakLabel(),
astGeneration/bytecode.cpp:                                           wp -> statement);
astGeneration/bytecode.cpp:                EmitBlockStatement(wp -> statement);
astGeneration/bytecode.cpp:            Label& continue_label = method_stack -> TopContinueLabel();
astGeneration/bytecode.cpp:            if (wp -> expression -> IsConstant())
astGeneration/bytecode.cpp:                assert(semantic.IsConstantTrue(wp -> expression));
astGeneration/bytecode.cpp:                EmitBranch(OP_GOTO, continue_label, wp -> statement);
astGeneration/bytecode.cpp:            u2 begin_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:            abrupt |= EmitBlockStatement(wp -> statement);
astGeneration/bytecode.cpp:            bool empty = (begin_pc == code_attribute -> CodeLength());
astGeneration/bytecode.cpp:            line_number_table_attribute ->
astGeneration/bytecode.cpp:                AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                              semantic.lex_stream -> Line(wp -> expression -> LeftToken()));
astGeneration/bytecode.cpp:            EmitBranchIfExpression(wp -> expression, true,
astGeneration/bytecode.cpp:                                   wp -> statement);
astGeneration/bytecode.cpp:            return abrupt && ! wp -> can_complete_normally;
astGeneration/bytecode.cpp:            AstDoStatement* sp = statement -> DoStatementCast();
astGeneration/bytecode.cpp:            bool abrupt = EmitBlockStatement(sp -> statement);
astGeneration/bytecode.cpp:            if (IsLabelUsed(method_stack -> TopContinueLabel()))
astGeneration/bytecode.cpp:                DefineLabel(method_stack -> TopContinueLabel());
astGeneration/bytecode.cpp:                CompleteLabel(method_stack -> TopContinueLabel());
astGeneration/bytecode.cpp:                line_number_table_attribute ->
astGeneration/bytecode.cpp:                    AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                  semantic.lex_stream -> Line(sp -> expression -> LeftToken()));
astGeneration/bytecode.cpp:                EmitBranchIfExpression(sp -> expression, true,
astGeneration/bytecode.cpp:                                       begin_label, sp -> statement);
astGeneration/bytecode.cpp:            return (abrupt || IsOne(sp -> expression)) &&
astGeneration/bytecode.cpp:                ! sp -> can_complete_normally;
astGeneration/bytecode.cpp:            AstForStatement* for_statement = statement -> ForStatementCast();
astGeneration/bytecode.cpp:            for (unsigned i = 0; i < for_statement -> NumForInitStatements(); i++)
astGeneration/bytecode.cpp:                EmitStatement(for_statement -> ForInitStatement(i));
astGeneration/bytecode.cpp:            if (! for_statement -> statement -> can_complete_normally)
astGeneration/bytecode.cpp:                if (for_statement -> end_expression_opt)
astGeneration/bytecode.cpp:                    if (for_statement -> end_expression_opt -> IsConstant())
astGeneration/bytecode.cpp:                        assert(semantic.IsConstantTrue(for_statement -> end_expression_opt));
astGeneration/bytecode.cpp:                        line_number_table_attribute ->
astGeneration/bytecode.cpp:                            AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                          semantic.lex_stream -> Line(for_statement -> end_expression_opt -> LeftToken()));
astGeneration/bytecode.cpp:                        EmitBranchIfExpression(for_statement -> end_expression_opt,
astGeneration/bytecode.cpp:                                               method_stack -> TopBreakLabel(),
astGeneration/bytecode.cpp:                                               for_statement -> statement);
astGeneration/bytecode.cpp:                EmitBlockStatement(for_statement -> statement);
astGeneration/bytecode.cpp:            Label& continue_label = method_stack -> TopContinueLabel();
astGeneration/bytecode.cpp:            if (for_statement -> end_expression_opt &&
astGeneration/bytecode.cpp:                ! for_statement -> end_expression_opt -> IsConstant())
astGeneration/bytecode.cpp:                           (for_statement -> NumForUpdateStatements()
astGeneration/bytecode.cpp:                           for_statement -> statement);
astGeneration/bytecode.cpp:            u2 begin_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:            abrupt |= EmitBlockStatement(for_statement -> statement);
astGeneration/bytecode.cpp:            bool empty = (begin_pc == code_attribute -> CodeLength());
astGeneration/bytecode.cpp:                 j < for_statement -> NumForUpdateStatements(); j++)
astGeneration/bytecode.cpp:                EmitStatement(for_statement -> ForUpdateStatement(j));
astGeneration/bytecode.cpp:            AstExpression* end_expr = for_statement -> end_expression_opt;
astGeneration/bytecode.cpp:                line_number_table_attribute ->
astGeneration/bytecode.cpp:                    AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                  semantic.lex_stream -> Line(end_expr ->
astGeneration/bytecode.cpp:                                       for_statement -> statement);
astGeneration/bytecode.cpp:                            for_statement -> statement);
astGeneration/bytecode.cpp:            return abrupt && ! for_statement -> can_complete_normally;
astGeneration/bytecode.cpp:                statement -> BreakStatementCast() -> nesting_level;
astGeneration/bytecode.cpp:            AstBlock* over = method_stack -> Block(nesting_level);
astGeneration/bytecode.cpp:            u2 jump_size = (over -> RightToken() - over -> LeftToken() <
astGeneration/bytecode.cpp:                EmitBranch(OP_GOTO, method_stack -> BreakLabel(nesting_level),
astGeneration/bytecode.cpp:                statement -> ContinueStatementCast() -> nesting_level;
astGeneration/bytecode.cpp:            AstBlock* over = method_stack -> Block(nesting_level);
astGeneration/bytecode.cpp:            u2 jump_size = (over -> RightToken() - over -> LeftToken() <
astGeneration/bytecode.cpp:                           method_stack -> ContinueLabel(nesting_level),
astGeneration/bytecode.cpp:        EmitReturnStatement(statement -> ReturnStatementCast());
astGeneration/bytecode.cpp:        EmitExpression(statement -> ThrowStatementCast() -> expression);
astGeneration/bytecode.cpp:        return ! statement -> can_complete_normally;
astGeneration/bytecode.cpp:    AstExpression* expression = statement -> expression_opt;
astGeneration/bytecode.cpp:        if (ProcessAbruptExit(method_stack -> NestingLevel(0), 1))
astGeneration/bytecode.cpp:        TypeSymbol* type = expression -> Type();
astGeneration/bytecode.cpp:        if (ProcessAbruptExit(method_stack -> NestingLevel(0), 1, type))
astGeneration/bytecode.cpp:    method_stack -> Push(block);
astGeneration/bytecode.cpp:    for (unsigned i = 0; i < block -> NumStatements() && ! abrupt; i++)
astGeneration/bytecode.cpp:        abrupt = EmitStatement(block -> Statement(i));
astGeneration/bytecode.cpp:    if (IsLabelUsed(method_stack -> TopBreakLabel()))
astGeneration/bytecode.cpp:        DefineLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:        CompleteLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:        for (unsigned i = 0; i < block -> NumLocallyDefinedVariables(); i++)
astGeneration/bytecode.cpp:            VariableSymbol* variable = block -> LocallyDefinedVariable(i);
astGeneration/bytecode.cpp:            if (method_stack -> StartPc(variable) == 0xFFFF) // never used
astGeneration/bytecode.cpp:            Coutput << "(56) The symbol \"" << variable -> Name()
astGeneration/bytecode.cpp:                    << "\" numbered " << variable -> LocalVariableIndex()
astGeneration/bytecode.cpp:            local_variable_table_attribute ->
astGeneration/bytecode.cpp:                AddLocalVariable(method_stack -> StartPc(variable),
astGeneration/bytecode.cpp:                                 code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                 RegisterName(variable -> ExternalIdentity()),
astGeneration/bytecode.cpp:                                 RegisterUtf8(variable -> Type() -> signature),
astGeneration/bytecode.cpp:                                 variable -> LocalVariableIndex());
astGeneration/bytecode.cpp:    method_stack -> Pop();
astGeneration/bytecode.cpp:    switch (expression -> kind)
astGeneration/bytecode.cpp:    AstBlock* switch_block = switch_statement -> switch_block;
astGeneration/bytecode.cpp:    u2 op_start = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:    if (switch_statement -> expression -> IsConstant())
astGeneration/bytecode.cpp:        CaseElement* target = switch_statement ->
astGeneration/bytecode.cpp:                         (switch_statement -> expression -> value) -> value);
astGeneration/bytecode.cpp:        // Bring all previously-declared variables into scope, then compile
astGeneration/bytecode.cpp:        method_stack -> Push(switch_block);
astGeneration/bytecode.cpp:        for (i = 0; i < target -> block_index; i++)
astGeneration/bytecode.cpp:            EmitSwitchBlockStatement(switch_statement -> Block(i), true);
astGeneration/bytecode.cpp:        for ( ; ! abrupt && i < switch_statement -> NumBlocks(); i++)
astGeneration/bytecode.cpp:                EmitSwitchBlockStatement(switch_statement -> Block(i), abrupt);
astGeneration/bytecode.cpp:        if (IsLabelUsed(method_stack -> TopBreakLabel()))
astGeneration/bytecode.cpp:            DefineLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:            CompleteLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:        method_stack -> Pop();
astGeneration/bytecode.cpp:    if (! switch_statement -> NumBlocks())
astGeneration/bytecode.cpp:        EmitExpression(switch_statement -> expression, false);
astGeneration/bytecode.cpp:    if (switch_statement -> NumBlocks() == 1 &&
astGeneration/bytecode.cpp:        switch_statement -> DefaultCase())
astGeneration/bytecode.cpp:        EmitExpression(switch_statement -> expression, false);
astGeneration/bytecode.cpp:        method_stack -> Push(switch_block);
astGeneration/bytecode.cpp:        abrupt = EmitSwitchBlockStatement(switch_statement -> Block(0), false);
astGeneration/bytecode.cpp:        if (IsLabelUsed(method_stack -> TopBreakLabel()))
astGeneration/bytecode.cpp:            DefineLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:            CompleteLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:        method_stack -> Pop();
astGeneration/bytecode.cpp:    // Optimization: If there is one non-default label, turn this into an
astGeneration/bytecode.cpp:    if (switch_statement -> NumCases() == 1)
astGeneration/bytecode.cpp:        if (! switch_statement -> DefaultCase())
astGeneration/bytecode.cpp:            EmitExpression(switch_statement -> expression);
astGeneration/bytecode.cpp:            if (switch_statement -> Case(0) -> value)
astGeneration/bytecode.cpp:                LoadImmediateInteger(switch_statement -> Case(0) -> value);
astGeneration/bytecode.cpp:            method_stack -> Push(switch_block);
astGeneration/bytecode.cpp:            EmitSwitchBlockStatement(switch_statement -> Block(0), false);
astGeneration/bytecode.cpp:            if (IsLabelUsed(method_stack -> TopBreakLabel()))
astGeneration/bytecode.cpp:                DefineLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:                CompleteLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:            method_stack -> Pop();
astGeneration/bytecode.cpp:    unsigned ncases = switch_statement -> NumCases();
astGeneration/bytecode.cpp:        low = switch_statement -> Case(0) -> value;
astGeneration/bytecode.cpp:        high = switch_statement -> Case(ncases - 1) -> value;
astGeneration/bytecode.cpp:            // We want to compute (1 + (high - low + 1)) < (ncases * 2 + 8).
astGeneration/bytecode.cpp:            i4 range = high - low + 1;
astGeneration/bytecode.cpp:    method_stack -> Push(switch_block);
astGeneration/bytecode.cpp:    line_number_table_attribute ->
astGeneration/bytecode.cpp:        AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                      semantic.lex_stream -> Line(switch_statement ->
astGeneration/bytecode.cpp:                                                  expression -> LeftToken()));
astGeneration/bytecode.cpp:    EmitExpression(switch_statement -> expression);
astGeneration/bytecode.cpp:    while (code_attribute -> CodeLength() % 4 != 0)
astGeneration/bytecode.cpp:             code_attribute -> CodeLength() - op_start);
astGeneration/bytecode.cpp:            PutU4(switch_statement -> Case(i) -> value);
astGeneration/bytecode.cpp:                     code_attribute -> CodeLength() - op_start);
astGeneration/bytecode.cpp:                     code_attribute -> CodeLength() - op_start);
astGeneration/bytecode.cpp:    for (i = 0; i < switch_block -> NumStatements(); i++)
astGeneration/bytecode.cpp:            switch_statement -> Block(i);
astGeneration/bytecode.cpp:             li < switch_block_statement -> NumSwitchLabels(); li++)
astGeneration/bytecode.cpp:                switch_block_statement -> SwitchLabel(li);
astGeneration/bytecode.cpp:                DefineLabel(case_labels[switch_label -> map_index]);
astGeneration/bytecode.cpp:            else if (switch_label -> expression_opt)
astGeneration/bytecode.cpp:                    (switch_label -> expression_opt -> value) -> value;
astGeneration/bytecode.cpp:                DefineLabel(case_labels[value - low]);
astGeneration/bytecode.cpp:                for ( ; j < switch_statement -> NumCases(); j++, k++)
astGeneration/bytecode.cpp:                    while (k != switch_statement -> Case(j) -> value)
astGeneration/bytecode.cpp:                        DefineLabel(case_labels[k++ - low]);
astGeneration/bytecode.cpp:    if (IsLabelUsed(method_stack -> TopBreakLabel()))
astGeneration/bytecode.cpp:        DefineLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:        CompleteLabel(method_stack -> TopBreakLabel());
astGeneration/bytecode.cpp:    method_stack -> Pop();
astGeneration/bytecode.cpp:    assert(abrupt || switch_statement -> can_complete_normally);
astGeneration/bytecode.cpp:    for (unsigned i = 0; i < block -> NumStatements(); i++)
astGeneration/bytecode.cpp:            abrupt = EmitStatement(block -> Statement(i));
astGeneration/bytecode.cpp:        else if (block -> Statement(i) -> LocalVariableStatementCast())
astGeneration/bytecode.cpp:                (AstLocalVariableStatement*) block -> Statement(i);
astGeneration/bytecode.cpp:            for (unsigned j = 0; j < lvs -> NumVariableDeclarators(); j++)
astGeneration/bytecode.cpp:                    lvs -> VariableDeclarator(j);
astGeneration/bytecode.cpp:                    method_stack -> StartPc(declarator -> symbol) =
astGeneration/bytecode.cpp:                        code_attribute -> CodeLength();
astGeneration/bytecode.cpp:                if (declarator -> symbol -> Type() -> num_dimensions > 255)
astGeneration/bytecode.cpp:             i < switch_block -> NumLocallyDefinedVariables(); i++)
astGeneration/bytecode.cpp:                switch_block -> LocallyDefinedVariable(i);
astGeneration/bytecode.cpp:            if (method_stack -> StartPc(variable) > op_start)
astGeneration/bytecode.cpp:                if (method_stack -> StartPc(variable) == 0xFFFF) // never used
astGeneration/bytecode.cpp:                Coutput << "(58) The symbol \"" << variable -> Name()
astGeneration/bytecode.cpp:                        << "\" numbered " << variable -> LocalVariableIndex()
astGeneration/bytecode.cpp:                local_variable_table_attribute ->
astGeneration/bytecode.cpp:                    AddLocalVariable(method_stack -> StartPc(variable),
astGeneration/bytecode.cpp:                                     code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                     RegisterName(variable -> ExternalIdentity()),
astGeneration/bytecode.cpp:                                     RegisterUtf8(variable -> Type() -> signature),
astGeneration/bytecode.cpp:                                     variable -> LocalVariableIndex());
astGeneration/bytecode.cpp:    assert(method_stack -> TopFinallyLabel().uses.Length() == 0);
astGeneration/bytecode.cpp:    assert(method_stack -> TopFinallyLabel().defined == false);
astGeneration/bytecode.cpp:    assert(method_stack -> TopFinallyLabel().definition == 0);
astGeneration/bytecode.cpp:    u2 start_try_block_pc = code_attribute -> CodeLength(); // start pc
astGeneration/bytecode.cpp:    assert(method_stack -> TopHandlerRangeStart().Length() == 0 &&
astGeneration/bytecode.cpp:           method_stack -> TopHandlerRangeEnd().Length() == 0);
astGeneration/bytecode.cpp:    method_stack -> TopHandlerRangeStart().Push(start_try_block_pc);
astGeneration/bytecode.cpp:    bool emit_finally_clause = statement -> finally_clause_opt &&
astGeneration/bytecode.cpp:        ! IsNop(statement -> finally_clause_opt -> block);
astGeneration/bytecode.cpp:    if (statement -> finally_clause_opt)
astGeneration/bytecode.cpp:            statement -> block -> SetTag(AstBlock::NONE);
astGeneration/bytecode.cpp:        else if (! statement -> finally_clause_opt -> block ->
astGeneration/bytecode.cpp:            statement -> block -> SetTag(AstBlock::ABRUPT_TRY_FINALLY);
astGeneration/bytecode.cpp:    if (statement -> block -> Tag() == AstBlock::NONE &&
astGeneration/bytecode.cpp:        statement -> NumCatchClauses())
astGeneration/bytecode.cpp:        statement -> block -> SetTag(AstBlock::TRY_CLAUSE_WITH_CATCH);
astGeneration/bytecode.cpp:    bool abrupt = EmitBlockStatement(statement -> block);
astGeneration/bytecode.cpp:    u2 end_try_block_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:    Tuple<u2> handler_starts(method_stack -> TopHandlerRangeStart());
astGeneration/bytecode.cpp:    Tuple<u2> handler_ends(method_stack -> TopHandlerRangeEnd());
astGeneration/bytecode.cpp:        Label& finally_label = method_stack -> TopFinallyLabel();
astGeneration/bytecode.cpp:            (emit_finally_clause || statement -> NumCatchClauses()))
astGeneration/bytecode.cpp:        for (unsigned i = 0; i < statement -> NumCatchClauses(); i++)
astGeneration/bytecode.cpp:            u2 handler_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:            AstCatchClause* catch_clause = statement -> CatchClause(i);
astGeneration/bytecode.cpp:                catch_clause -> parameter_symbol;
astGeneration/bytecode.cpp:            line_number_table_attribute ->
astGeneration/bytecode.cpp:                AddLineNumber(code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                              semantic.lex_stream -> Line(catch_clause ->
astGeneration/bytecode.cpp:                ! IsNop(catch_clause -> block))
astGeneration/bytecode.cpp:                StoreLocal(parameter_symbol -> LocalVariableIndex(),
astGeneration/bytecode.cpp:                           parameter_symbol -> Type());
astGeneration/bytecode.cpp:            u2 handler_type = RegisterClass(parameter_symbol -> Type());
astGeneration/bytecode.cpp:            for (int j = handler_starts.Length(); --j >= 0; )
astGeneration/bytecode.cpp:                code_attribute ->
astGeneration/bytecode.cpp:            if (statement -> finally_clause_opt)
astGeneration/bytecode.cpp:                    catch_clause -> block -> SetTag(AstBlock::NONE);
astGeneration/bytecode.cpp:                else if (! statement -> finally_clause_opt -> block ->
astGeneration/bytecode.cpp:                    catch_clause -> block ->
astGeneration/bytecode.cpp:            abrupt = EmitBlockStatement(catch_clause -> block);
astGeneration/bytecode.cpp:                local_variable_table_attribute ->
astGeneration/bytecode.cpp:                                     code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                     RegisterName(parameter_symbol -> ExternalIdentity()),
astGeneration/bytecode.cpp:                                     RegisterUtf8(parameter_symbol -> Type() -> signature),
astGeneration/bytecode.cpp:                                     parameter_symbol -> LocalVariableIndex());
astGeneration/bytecode.cpp:                             i < (statement -> NumCatchClauses() - 1)))
astGeneration/bytecode.cpp:            int variable_index = method_stack -> TopBlock() ->
astGeneration/bytecode.cpp:                block_symbol -> helper_variable_index;
astGeneration/bytecode.cpp:            u2 finally_start_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:            if (statement -> finally_clause_opt -> block ->
astGeneration/bytecode.cpp:                special_end_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:            method_stack -> TopHandlerRangeEnd().Push(special_end_pc);
astGeneration/bytecode.cpp:            unsigned count = method_stack -> TopHandlerRangeStart().Length();
astGeneration/bytecode.cpp:            assert(count == method_stack -> TopHandlerRangeEnd().Length());
astGeneration/bytecode.cpp:            while (count--)
astGeneration/bytecode.cpp:                code_attribute ->
astGeneration/bytecode.cpp:                    AddException(method_stack -> TopHandlerRangeStart().Pop(),
astGeneration/bytecode.cpp:                                 method_stack -> TopHandlerRangeEnd().Pop(),
astGeneration/bytecode.cpp:            if (statement -> finally_clause_opt -> block ->
astGeneration/bytecode.cpp:            EmitBlockStatement(statement -> finally_clause_opt -> block);
astGeneration/bytecode.cpp:            if (statement -> finally_clause_opt -> block ->
astGeneration/bytecode.cpp:                               statement -> finally_clause_opt -> block);
astGeneration/bytecode.cpp:                    special_end_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:                    code_attribute -> AddException(special_end_pc - 3,
astGeneration/bytecode.cpp:            method_stack -> TopHandlerRangeStart().Reset();
astGeneration/bytecode.cpp:            method_stack -> TopHandlerRangeEnd().Reset();
astGeneration/bytecode.cpp:        method_stack -> TopHandlerRangeStart().Reset();
astGeneration/bytecode.cpp:            EmitBlockStatement(statement -> finally_clause_opt -> block);
astGeneration/bytecode.cpp:    int variable_index = -1;
astGeneration/bytecode.cpp:    // stack, in case a finally block contains an embedded try-catch which
astGeneration/bytecode.cpp:        for (unsigned i = method_stack -> Size() - 1;
astGeneration/bytecode.cpp:             i > 0 && method_stack -> NestingLevel(i) != level; i--)
astGeneration/bytecode.cpp:            unsigned nesting_level = method_stack -> NestingLevel(i);
astGeneration/bytecode.cpp:            unsigned enclosing_level = method_stack -> NestingLevel(i - 1);
astGeneration/bytecode.cpp:            AstBlock* block = method_stack -> Block(nesting_level);
astGeneration/bytecode.cpp:            if (block -> Tag() == AstBlock::TRY_CLAUSE_WITH_FINALLY)
astGeneration/bytecode.cpp:                variable_index = method_stack -> Block(enclosing_level) ->
astGeneration/bytecode.cpp:                    block_symbol -> helper_variable_index + 2;
astGeneration/bytecode.cpp:            else if (block -> Tag() == AstBlock::ABRUPT_TRY_FINALLY)
astGeneration/bytecode.cpp:                variable_index = -1;
astGeneration/bytecode.cpp:    for (unsigned i = method_stack -> Size() - 1;
astGeneration/bytecode.cpp:         i > 0 && method_stack -> NestingLevel(i) != level; i--)
astGeneration/bytecode.cpp:        unsigned nesting_level = method_stack -> NestingLevel(i);
astGeneration/bytecode.cpp:        unsigned enclosing_level = method_stack -> NestingLevel(i - 1);
astGeneration/bytecode.cpp:        AstBlock* block = method_stack -> Block(nesting_level);
astGeneration/bytecode.cpp:        if (block -> Tag() == AstBlock::TRY_CLAUSE_WITH_FINALLY)
astGeneration/bytecode.cpp:            EmitBranch(OP_JSR, method_stack -> FinallyLabel(enclosing_level),
astGeneration/bytecode.cpp:                       method_stack -> Block(enclosing_level));
astGeneration/bytecode.cpp:            method_stack -> HandlerRangeEnd(enclosing_level).
astGeneration/bytecode.cpp:                Push(code_attribute -> CodeLength());
astGeneration/bytecode.cpp:        else if (block -> Tag() == AstBlock::ABRUPT_TRY_FINALLY)
astGeneration/bytecode.cpp:            EmitBranch(OP_GOTO, method_stack -> FinallyLabel(enclosing_level),
astGeneration/bytecode.cpp:                       method_stack -> Block(enclosing_level));
astGeneration/bytecode.cpp:            method_stack -> HandlerRangeEnd(enclosing_level).
astGeneration/bytecode.cpp:                Push(code_attribute -> CodeLength());
astGeneration/bytecode.cpp:        else if (block -> Tag() == AstBlock::SYNCHRONIZED)
astGeneration/bytecode.cpp:            int variable_index = method_stack -> Block(enclosing_level) ->
astGeneration/bytecode.cpp:                block_symbol -> helper_variable_index;
astGeneration/bytecode.cpp:            method_stack -> HandlerRangeEnd(enclosing_level).
astGeneration/bytecode.cpp:                Push(code_attribute -> CodeLength());
astGeneration/bytecode.cpp:        else if (block -> Tag() == AstBlock::TRY_CLAUSE_WITH_CATCH)
astGeneration/bytecode.cpp:            method_stack -> HandlerRangeEnd(enclosing_level).
astGeneration/bytecode.cpp:                Push(code_attribute -> CodeLength());
astGeneration/bytecode.cpp:    for (unsigned j = method_stack -> Size() - 1;
astGeneration/bytecode.cpp:         j > 0 && method_stack -> NestingLevel(j) != level; j--)
astGeneration/bytecode.cpp:        unsigned nesting_level = method_stack -> NestingLevel(j);
astGeneration/bytecode.cpp:        unsigned enclosing_level = method_stack -> NestingLevel(j - 1);
astGeneration/bytecode.cpp:        AstBlock* block = method_stack -> Block(nesting_level);
astGeneration/bytecode.cpp:        if (block -> Tag() == AstBlock::SYNCHRONIZED ||
astGeneration/bytecode.cpp:            block -> Tag() == AstBlock::TRY_CLAUSE_WITH_CATCH ||
astGeneration/bytecode.cpp:            block -> Tag() == AstBlock::TRY_CLAUSE_WITH_FINALLY)
astGeneration/bytecode.cpp:            method_stack -> HandlerRangeStart(enclosing_level).
astGeneration/bytecode.cpp:                Push(code_attribute -> CodeLength() + width);
astGeneration/bytecode.cpp:        else if (block -> Tag() == AstBlock::ABRUPT_TRY_FINALLY)
astGeneration/bytecode.cpp:            method_stack -> HandlerRangeStart(enclosing_level).
astGeneration/bytecode.cpp:                Push(code_attribute -> CodeLength());
astGeneration/bytecode.cpp:    // to the 4-byte branch opcode or write out a branch around a goto_w for
astGeneration/bytecode.cpp:    int sizeHeuristic = over ? over -> RightToken() - over -> LeftToken() : 0;
astGeneration/bytecode.cpp:    assert(p -> Type() == control.boolean_type);
astGeneration/bytecode.cpp:    if (p -> IsConstant())
astGeneration/bytecode.cpp:    AstPreUnaryExpression* pre = p -> PreUnaryExpressionCast();
astGeneration/bytecode.cpp:        assert(pre -> Tag() == AstPreUnaryExpression::NOT);
astGeneration/bytecode.cpp:        EmitBranchIfExpression(pre -> expression, ! cond, lab, over);
astGeneration/bytecode.cpp:    AstConditionalExpression* conditional = p -> ConditionalExpressionCast();
astGeneration/bytecode.cpp:        if (conditional -> test_expression -> IsConstant())
astGeneration/bytecode.cpp:            EmitBranchIfExpression((IsZero(conditional -> test_expression)
astGeneration/bytecode.cpp:                                    ? conditional -> false_expression
astGeneration/bytecode.cpp:                                    : conditional -> true_expression),
astGeneration/bytecode.cpp:        else if (IsOne(conditional -> true_expression))
astGeneration/bytecode.cpp:            if (IsOne(conditional -> false_expression))
astGeneration/bytecode.cpp:                EmitExpression(conditional -> test_expression, false);
astGeneration/bytecode.cpp:            else if (IsZero(conditional -> false_expression))
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, true,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> false_expression, true,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, true,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> false_expression, false,
astGeneration/bytecode.cpp:        else if (IsZero(conditional -> true_expression))
astGeneration/bytecode.cpp:            if (IsOne(conditional -> false_expression))
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression,
astGeneration/bytecode.cpp:            else if (IsZero(conditional -> false_expression))
astGeneration/bytecode.cpp:                EmitExpression(conditional -> test_expression, false);
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, true,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> false_expression, false,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, true,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> false_expression, true,
astGeneration/bytecode.cpp:        else if (IsOne(conditional -> false_expression))
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, false,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> true_expression, true,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, false,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> true_expression, false,
astGeneration/bytecode.cpp:        else if (IsZero(conditional -> false_expression))
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, false,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> true_expression, false,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> test_expression, false,
astGeneration/bytecode.cpp:                EmitBranchIfExpression(conditional -> true_expression, true,
astGeneration/bytecode.cpp:            EmitBranchIfExpression(conditional -> test_expression, false, lab1,
astGeneration/bytecode.cpp:            EmitBranchIfExpression(conditional -> true_expression, cond, lab,
astGeneration/bytecode.cpp:            EmitBranchIfExpression(conditional -> false_expression, cond, lab,
astGeneration/bytecode.cpp:    AstInstanceofExpression* instanceof = p -> InstanceofExpressionCast();
astGeneration/bytecode.cpp:        AstExpression* expr = StripNops(instanceof -> expression);
astGeneration/bytecode.cpp:        TypeSymbol* left_type = expr -> Type();
astGeneration/bytecode.cpp:        TypeSymbol* right_type = instanceof -> type -> symbol;
astGeneration/bytecode.cpp:        if (right_type -> num_dimensions > 255)
astGeneration/bytecode.cpp:                                    instanceof -> type);
astGeneration/bytecode.cpp:        else if (expr -> IsConstant() || // a String constant
astGeneration/bytecode.cpp:                 expr -> BinaryExpressionCast()) // a String concat
astGeneration/bytecode.cpp:            // We know the result: true, since the expression is non-null
astGeneration/bytecode.cpp:        else if ((expr -> ThisExpressionCast() ||
astGeneration/bytecode.cpp:                  expr -> SuperExpressionCast() ||
astGeneration/bytecode.cpp:                  expr -> ClassLiteralCast() ||
astGeneration/bytecode.cpp:                  expr -> ClassCreationExpressionCast() ||
astGeneration/bytecode.cpp:                  expr -> ArrayCreationExpressionCast()) &&
astGeneration/bytecode.cpp:                 left_type -> IsSubtype(right_type))
astGeneration/bytecode.cpp:            // We know the result: true, since the expression is non-null.
astGeneration/bytecode.cpp:    // dispose of non-binary expression case by just evaluating
astGeneration/bytecode.cpp:    AstBinaryExpression* bp = p -> BinaryExpressionCast();
astGeneration/bytecode.cpp:    AstExpression* left = StripNops(bp -> left_expression);
astGeneration/bytecode.cpp:    AstExpression* right = StripNops(bp -> right_expression);
astGeneration/bytecode.cpp:    TypeSymbol* left_type = left -> Type();
astGeneration/bytecode.cpp:    TypeSymbol* right_type = right -> Type();
astGeneration/bytecode.cpp:    switch (bp -> Tag())
astGeneration/bytecode.cpp:        if (left -> IsConstant())
astGeneration/bytecode.cpp:        else if (right -> IsConstant())
astGeneration/bytecode.cpp:        if (left -> IsConstant())
astGeneration/bytecode.cpp:        else if (right -> IsConstant())
astGeneration/bytecode.cpp:                if (cond == (bp -> Tag() == AstBinaryExpression::EQUAL_EQUAL))
astGeneration/bytecode.cpp:                if (bp -> Tag() == AstBinaryExpression::EQUAL_EQUAL)
astGeneration/bytecode.cpp:                                   cond == (bp -> Tag() == AstBinaryExpression::EQUAL_EQUAL),
astGeneration/bytecode.cpp:                                           cond == (bp -> Tag() != AstBinaryExpression::EQUAL_EQUAL),
astGeneration/bytecode.cpp:                    if (bp -> Tag() == AstBinaryExpression::EQUAL_EQUAL)
astGeneration/bytecode.cpp:                if (bp -> Tag() == AstBinaryExpression::EQUAL_EQUAL)
astGeneration/bytecode.cpp:            if (bp -> Tag() == AstBinaryExpression::EQUAL_EQUAL)
astGeneration/bytecode.cpp:    // here if not comparison, comparison for non-integral numeric types, or
astGeneration/bytecode.cpp:    // Begin by dealing with non-comparisons
astGeneration/bytecode.cpp:    switch (bp -> Tag())
astGeneration/bytecode.cpp:            switch (bp -> Tag())
astGeneration/bytecode.cpp:            switch (bp -> Tag())
astGeneration/bytecode.cpp:            switch (bp -> Tag())
astGeneration/bytecode.cpp:        switch (bp -> Tag())
astGeneration/bytecode.cpp:        switch (bp -> Tag())
astGeneration/bytecode.cpp:        switch (bp -> Tag())
astGeneration/bytecode.cpp:        method_stack -> TopBlock() -> block_symbol -> helper_variable_index;
astGeneration/bytecode.cpp:    // statement be asynch-exception safe.  Note that the user can cause
astGeneration/bytecode.cpp:    u2 handler_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:    u2 throw_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:    code_attribute -> AddException(handler_pc, throw_pc, handler_pc, 0);
astGeneration/bytecode.cpp:    EmitExpression(statement -> expression);
astGeneration/bytecode.cpp:    assert(method_stack -> TopHandlerRangeStart().Length() == 0 &&
astGeneration/bytecode.cpp:           method_stack -> TopHandlerRangeEnd().Length() == 0);
astGeneration/bytecode.cpp:    method_stack -> TopHandlerRangeStart().Push(code_attribute -> CodeLength());
astGeneration/bytecode.cpp:    bool abrupt = EmitBlockStatement(statement -> block);
astGeneration/bytecode.cpp:    u2 end_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:    method_stack -> TopHandlerRangeEnd().Push(end_pc);
astGeneration/bytecode.cpp:    unsigned count = method_stack -> TopHandlerRangeStart().Length();
astGeneration/bytecode.cpp:    assert(count == method_stack -> TopHandlerRangeEnd().Length());
astGeneration/bytecode.cpp:    while (count--)
astGeneration/bytecode.cpp:        code_attribute ->
astGeneration/bytecode.cpp:            AddException(method_stack -> TopHandlerRangeStart().Pop(),
astGeneration/bytecode.cpp:                         method_stack -> TopHandlerRangeEnd().Pop(),
astGeneration/bytecode.cpp:    // When constant true, the assert statement is a no-op.
astGeneration/bytecode.cpp:    if (semantic.IsConstantTrue(assertion -> condition) ||
astGeneration/bytecode.cpp:    PutU2(RegisterFieldref(assertion -> assert_variable));
astGeneration/bytecode.cpp:    EmitBranchIfExpression(assertion -> condition, true, label);
astGeneration/bytecode.cpp:    if (assertion -> message_opt)
astGeneration/bytecode.cpp:        EmitExpression(assertion -> message_opt);
astGeneration/bytecode.cpp:        TypeSymbol* type = assertion -> message_opt -> Type();
astGeneration/bytecode.cpp:        if (! control.AssertionError() -> Bad())
astGeneration/bytecode.cpp:                                        unit_type -> ContainingPackageName(),
astGeneration/bytecode.cpp:                                        unit_type -> ExternalName());
astGeneration/bytecode.cpp:        ChangeStack(- GetTypeWords(type));
astGeneration/bytecode.cpp:        method_stack -> TopBlock() -> block_symbol -> helper_variable_index;
astGeneration/bytecode.cpp:    EmitExpression(foreach -> expression);
astGeneration/bytecode.cpp:    Label& comp = method_stack -> TopContinueLabel();
astGeneration/bytecode.cpp:    TypeSymbol* expr_type = foreach -> expression -> Type();
astGeneration/bytecode.cpp:        foreach -> formal_parameter -> formal_declarator -> symbol;
astGeneration/bytecode.cpp:    TypeSymbol* component_type = var -> Type();
astGeneration/bytecode.cpp:    if (expr_type -> IsArray())
astGeneration/bytecode.cpp:        // assignment-conversion (if necessary)
astGeneration/bytecode.cpp:        TypeSymbol* expr_subtype = expr_type -> ArraySubtype();
astGeneration/bytecode.cpp:        if (IsNop(foreach -> statement) &&
astGeneration/bytecode.cpp:            (! component_type -> Primitive() || expr_subtype -> Primitive()))
astGeneration/bytecode.cpp:            // array is non-null from arraylength. But beware of autounboxing,
astGeneration/bytecode.cpp:        LoadArrayElement(expr_type -> ArraySubtype());
astGeneration/bytecode.cpp:        EmitCast(component_type, expr_type -> ArraySubtype());
astGeneration/bytecode.cpp:        u2 var_pc = code_attribute -> CodeLength();        
astGeneration/bytecode.cpp:        StoreLocal(var -> LocalVariableIndex(), component_type);
astGeneration/bytecode.cpp:        abrupt = EmitStatement(foreach -> statement);
astGeneration/bytecode.cpp:            local_variable_table_attribute ->
astGeneration/bytecode.cpp:                AddLocalVariable(var_pc, code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                 RegisterName(var -> ExternalIdentity()),
astGeneration/bytecode.cpp:                                 RegisterUtf8(component_type -> signature),
astGeneration/bytecode.cpp:                                 var -> LocalVariableIndex());
astGeneration/bytecode.cpp:        if (! abrupt || foreach -> statement -> can_complete_normally)
astGeneration/bytecode.cpp:        assert(foreach -> expression -> Type() ->
astGeneration/bytecode.cpp:        u2 var_pc = code_attribute -> CodeLength();        
astGeneration/bytecode.cpp:        StoreLocal(var -> LocalVariableIndex(), component_type);
astGeneration/bytecode.cpp:        abrupt = EmitStatement(foreach -> statement);
astGeneration/bytecode.cpp:            local_variable_table_attribute ->
astGeneration/bytecode.cpp:                AddLocalVariable(var_pc, code_attribute -> CodeLength(),
astGeneration/bytecode.cpp:                                 RegisterName(var -> ExternalIdentity()),
astGeneration/bytecode.cpp:                                 RegisterUtf8(component_type -> signature),
astGeneration/bytecode.cpp:                                 var -> LocalVariableIndex());
astGeneration/bytecode.cpp:        if (! abrupt || foreach -> statement -> can_complete_normally)
astGeneration/bytecode.cpp:    if (expression -> IsConstant())
astGeneration/bytecode.cpp:            LoadLiteral(expression -> value, expression -> Type());
astGeneration/bytecode.cpp:            return GetTypeWords(expression -> Type());
astGeneration/bytecode.cpp:    switch (expression -> kind)
astGeneration/bytecode.cpp:            if (this_expr -> resolution_opt && need_value)
astGeneration/bytecode.cpp:                return EmitExpression(this_expr -> resolution_opt, true);
astGeneration/bytecode.cpp:            if (super_expr -> resolution_opt && need_value)
astGeneration/bytecode.cpp:                return EmitExpression(super_expr -> resolution_opt, true);
astGeneration/bytecode.cpp:            if (class_lit -> resolution_opt)
astGeneration/bytecode.cpp:            TypeSymbol* type = expression -> symbol -> TypeCast();
astGeneration/bytecode.cpp:                LoadConstantAtIndex(RegisterClass(class_lit -> type ->
astGeneration/bytecode.cpp:                assert(expression -> symbol -> VariableCast());
astGeneration/bytecode.cpp:                PutU2(RegisterFieldref((VariableSymbol*) expression ->
astGeneration/bytecode.cpp:    AstFieldAccess* field = expression -> FieldAccessCast();
astGeneration/bytecode.cpp:    if (field && field -> resolution_opt)
astGeneration/bytecode.cpp:        return field -> resolution_opt;
astGeneration/bytecode.cpp:    AstName* name = expression -> NameCast();
astGeneration/bytecode.cpp:    if (name && name -> resolution_opt)
astGeneration/bytecode.cpp:        return name -> resolution_opt;
astGeneration/bytecode.cpp:    AstFieldAccess* field = expression -> FieldAccessCast();
astGeneration/bytecode.cpp:    AstName* name = expression -> NameCast();
astGeneration/bytecode.cpp:    TypeSymbol* candidate = field ? field -> base -> Type()
astGeneration/bytecode.cpp:        : name -> base_opt ? name -> base_opt -> Type() : unit_type;
astGeneration/bytecode.cpp:    return (sym -> ContainingType() -> ACC_INTERFACE() &&
astGeneration/bytecode.cpp:        ? sym -> ContainingType() : candidate;
astGeneration/bytecode.cpp:    TypeSymbol* owner_type = msym -> containing_type;
astGeneration/bytecode.cpp:    TypeSymbol* base_type = msym -> ACC_SYNTHETIC() ? owner_type
astGeneration/bytecode.cpp:        : base ? base -> Type() : unit_type;
astGeneration/bytecode.cpp:    AstFieldAccess* field = expression -> FieldAccessCast();
astGeneration/bytecode.cpp:    AstName* name = expression -> NameCast();
astGeneration/bytecode.cpp:    if (field || (name && name -> base_opt))
astGeneration/bytecode.cpp:        EmitExpression(field ? field -> base : name -> base_opt);
astGeneration/bytecode.cpp:    if (control.IsDoubleWordType(expression -> Type()))
astGeneration/bytecode.cpp:    VariableSymbol* sym = (VariableSymbol*) expression -> symbol;
astGeneration/bytecode.cpp:    // Here, we add a line-number attribute entry for this method.
astGeneration/bytecode.cpp:    line_number_table_attribute -> AddLineNumber(0, 0);
astGeneration/bytecode.cpp:    // pre-SDK1_4 exception handler if forName fails (optimization: the
astGeneration/bytecode.cpp:    // post-SDK1_4 exception handler if forName fails (optimization: the
astGeneration/bytecode.cpp:    code_attribute ->
astGeneration/bytecode.cpp:        ChangeStack(-1); // account for the argument to the constructor
astGeneration/bytecode.cpp:    // dup                       optimize: common case is non-null
astGeneration/bytecode.cpp:    assert(class_lit -> symbol -> VariableCast());
astGeneration/bytecode.cpp:    VariableSymbol* cache = (VariableSymbol*) class_lit -> symbol;
astGeneration/bytecode.cpp:    TypeSymbol* type = class_lit -> type -> symbol;
astGeneration/bytecode.cpp:    if (type -> num_dimensions > 255)
astGeneration/bytecode.cpp:    bool is_array = type -> IsArray();
astGeneration/bytecode.cpp:        type = type -> GetArrayType(control.system_semantic, 1);
astGeneration/bytecode.cpp:    LoadLiteral(type -> FindOrInsertClassLiteralName(control),
astGeneration/bytecode.cpp:    CompleteCall(cache -> ContainingType() -> ClassLiteralMethod(), 2);
astGeneration/bytecode.cpp:    //   - we use fewer bytecodes if the rest of the class does not use class
astGeneration/bytecode.cpp:    //     literals (and we need no try-catch block)
astGeneration/bytecode.cpp:    //   - determining assertion status will not initialize an enclosing class.
astGeneration/bytecode.cpp:    // semantics of assert - until class initialization starts, the default
astGeneration/bytecode.cpp:    tsym = tsym -> GetArrayType(control.system_semantic, 1);
astGeneration/bytecode.cpp:    LoadLiteral(tsym -> FindOrInsertClassLiteralName(control),
astGeneration/bytecode.cpp:    if (expression -> symbol -> TypeCast())
astGeneration/bytecode.cpp:    VariableSymbol* var = expression -> symbol -> VariableCast();
astGeneration/bytecode.cpp:    return LoadVariable((expression -> resolution_opt ? ACCESSED_VAR
astGeneration/bytecode.cpp:                         : var -> owner -> MethodCast() ? LOCAL_VAR
astGeneration/bytecode.cpp:                         : var -> ACC_STATIC() ? STATIC_VAR : FIELD_VAR),
astGeneration/bytecode.cpp:    unsigned num_dims = expression -> NumDimExprs();
astGeneration/bytecode.cpp:    if (expression -> Type() -> num_dimensions > 255)
astGeneration/bytecode.cpp:    if (expression -> array_initializer_opt)
astGeneration/bytecode.cpp:        InitializeArray(expression -> Type(),
astGeneration/bytecode.cpp:                        expression -> array_initializer_opt, need_value);
astGeneration/bytecode.cpp:        // dimensions are non-negative.
astGeneration/bytecode.cpp:                StripNops(expression -> DimExpr(i) -> expression);
astGeneration/bytecode.cpp:            if (expr -> IsConstant())
astGeneration/bytecode.cpp:                if (DYNAMIC_CAST<IntLiteralValue*> (expr -> value) ->
astGeneration/bytecode.cpp:            else if (expr -> Type() != control.char_type)
astGeneration/bytecode.cpp:            EmitExpression(expression -> DimExpr(j) -> expression,
astGeneration/bytecode.cpp:            EmitNewArray(num_dims, expression -> Type());
astGeneration/bytecode.cpp:        assignment_expression -> left_hand_side -> CastExpressionCast();
astGeneration/bytecode.cpp:                    ? casted_left_hand_side -> expression
astGeneration/bytecode.cpp:                    : assignment_expression -> left_hand_side);
astGeneration/bytecode.cpp:    TypeSymbol* left_type = left_hand_side -> Type();
astGeneration/bytecode.cpp:    VariableSymbol* accessed_member = assignment_expression -> write_method
astGeneration/bytecode.cpp:        ? (assignment_expression -> write_method -> accessed_member ->
astGeneration/bytecode.cpp:    if (assignment_expression -> SimpleAssignment())
astGeneration/bytecode.cpp:            EmitArrayAccessLhs(left_hand_side -> ArrayAccessCast());
astGeneration/bytecode.cpp:            if (left_hand_side -> FieldAccessCast())
astGeneration/bytecode.cpp:                    ((AstFieldAccess*) left_hand_side) -> base;
astGeneration/bytecode.cpp:            else if (left_hand_side -> NameCast())
astGeneration/bytecode.cpp:                AstName* base = ((AstName*) left_hand_side) -> base_opt;
astGeneration/bytecode.cpp:            if (! accessed_member -> ACC_STATIC())
astGeneration/bytecode.cpp:                AstExpression* resolve = left_hand_side -> FieldAccessCast()
astGeneration/bytecode.cpp:                    ? left_hand_side -> FieldAccessCast() -> resolution_opt
astGeneration/bytecode.cpp:                    : left_hand_side -> NameCast() -> resolution_opt;
astGeneration/bytecode.cpp:                    resolve -> MethodInvocationCast() -> base_opt;
astGeneration/bytecode.cpp:            else if (left_hand_side -> FieldAccessCast())
astGeneration/bytecode.cpp:                EmitExpression(((AstFieldAccess*) left_hand_side) -> base,
astGeneration/bytecode.cpp:        EmitExpression(assignment_expression -> expression);
astGeneration/bytecode.cpp:            EmitArrayAccessLhs(left_hand_side -> ArrayAccessCast());
astGeneration/bytecode.cpp:            LoadArrayElement(assignment_expression -> Type());
astGeneration/bytecode.cpp:                assignment_expression -> Type() == control.int_type &&
astGeneration/bytecode.cpp:                assignment_expression -> expression -> IsConstant() &&
astGeneration/bytecode.cpp:                ((assignment_expression -> Tag() ==
astGeneration/bytecode.cpp:                 (assignment_expression -> Tag() ==
astGeneration/bytecode.cpp:                    (assignment_expression -> expression -> value);
astGeneration/bytecode.cpp:                int val = ((assignment_expression -> Tag() ==
astGeneration/bytecode.cpp:                           ? -(vp -> value) // we treat "a -= x" as "a += (-x)"
astGeneration/bytecode.cpp:                           : vp -> value);
astGeneration/bytecode.cpp:                if (val >= -32768 && val < 32768) // if value in range
astGeneration/bytecode.cpp:                        (VariableSymbol*) left_hand_side -> symbol;
astGeneration/bytecode.cpp:                    PutOpIINC(sym -> LocalVariableIndex(), val);
astGeneration/bytecode.cpp:                    return GetTypeWords(assignment_expression -> Type());
astGeneration/bytecode.cpp:            if (accessed_member -> ACC_STATIC())
astGeneration/bytecode.cpp:        if ((assignment_expression -> Tag() ==
astGeneration/bytecode.cpp:            AppendString(assignment_expression -> expression, true);
astGeneration/bytecode.cpp:                                   ? casted_left_hand_side -> Type()
astGeneration/bytecode.cpp:                                   : assignment_expression -> Type());
astGeneration/bytecode.cpp:                switch (assignment_expression -> Tag())
astGeneration/bytecode.cpp:                switch (assignment_expression -> Tag())
astGeneration/bytecode.cpp:                switch (assignment_expression -> Tag())
astGeneration/bytecode.cpp:                switch (assignment_expression -> Tag())
astGeneration/bytecode.cpp:                EmitCast(casted_left_hand_side -> Type(), left_type);
astGeneration/bytecode.cpp:            EmitExpression(assignment_expression -> expression);
astGeneration/bytecode.cpp:                EmitCast(left_type, casted_left_hand_side -> Type());
astGeneration/bytecode.cpp:        StoreArrayElement(assignment_expression -> Type());
astGeneration/bytecode.cpp:                if (accessed_member -> ACC_STATIC())
astGeneration/bytecode.cpp:                               (accessed_member -> ACC_STATIC() ? 0 : 1));
astGeneration/bytecode.cpp:            CompleteCall(assignment_expression -> write_method, stack_words);
astGeneration/bytecode.cpp:        // was not being treated as compatible with a multi-dimensional array
astGeneration/bytecode.cpp:        // time null might be assigned to a multi-dimensional local variable
astGeneration/bytecode.cpp:            (StripNops(assignment_expression -> expression) -> Type() ==
astGeneration/bytecode.cpp:            assert(assignment_expression -> SimpleAssignment());
astGeneration/bytecode.cpp:    return GetTypeWords(assignment_expression -> Type());
astGeneration/bytecode.cpp:    TypeSymbol* type = expression -> Type();
astGeneration/bytecode.cpp:        assert(expression -> Tag() == AstBinaryExpression::PLUS);
astGeneration/bytecode.cpp:    // Next, simplify if no result is needed. Be careful of side-effects with
astGeneration/bytecode.cpp:        if ((expression -> Tag() == AstBinaryExpression::SLASH ||
astGeneration/bytecode.cpp:             expression -> Tag() == AstBinaryExpression::MOD) &&
astGeneration/bytecode.cpp:            (IsZero(expression -> right_expression) ||
astGeneration/bytecode.cpp:             ! expression -> right_expression -> IsConstant()))
astGeneration/bytecode.cpp:            if (IsZero(expression -> right_expression))
astGeneration/bytecode.cpp:                // Undo compiler-inserted numeric promotion.
astGeneration/bytecode.cpp:                AstExpression* left_expr = expression -> left_expression;
astGeneration/bytecode.cpp:                if (left_expr -> CastExpressionCast() &&
astGeneration/bytecode.cpp:                    left_expr -> generated)
astGeneration/bytecode.cpp:                    left_expr = ((AstCastExpression*) left_expr) -> expression;
astGeneration/bytecode.cpp:                type = left_expr -> Type();
astGeneration/bytecode.cpp:                EmitExpression(expression -> left_expression);
astGeneration/bytecode.cpp:                EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:                PutOp(expression -> Tag() == AstBinaryExpression::SLASH
astGeneration/bytecode.cpp:                PutOp(expression -> Tag() == AstBinaryExpression::SLASH
astGeneration/bytecode.cpp:        else if (expression -> Tag() == AstBinaryExpression::OR_OR)
astGeneration/bytecode.cpp:            if (expression -> right_expression -> IsConstant())
astGeneration/bytecode.cpp:                EmitExpression(expression -> left_expression, false);
astGeneration/bytecode.cpp:            else if (! IsOne(expression -> left_expression))
astGeneration/bytecode.cpp:                EmitBranchIfExpression(expression -> left_expression, true,
astGeneration/bytecode.cpp:                EmitExpression(expression -> right_expression, false);
astGeneration/bytecode.cpp:        else if (expression -> Tag() == AstBinaryExpression::AND_AND)
astGeneration/bytecode.cpp:            if (expression -> right_expression -> IsConstant())
astGeneration/bytecode.cpp:                EmitExpression(expression -> left_expression, false);
astGeneration/bytecode.cpp:            else if (! IsZero(expression -> left_expression))
astGeneration/bytecode.cpp:                EmitBranchIfExpression(expression -> left_expression, false,
astGeneration/bytecode.cpp:                EmitExpression(expression -> right_expression, false);
astGeneration/bytecode.cpp:            EmitExpression(expression -> left_expression, false);
astGeneration/bytecode.cpp:            EmitExpression(expression -> right_expression, false);
astGeneration/bytecode.cpp:    if (IsZero(expression -> left_expression))
astGeneration/bytecode.cpp:        // Undo compiler-inserted numeric promotion, as well as narrowing from
astGeneration/bytecode.cpp:        AstExpression* right_expr = expression -> right_expression;
astGeneration/bytecode.cpp:        if (right_expr -> CastExpressionCast() && right_expr -> generated)
astGeneration/bytecode.cpp:            right_expr = ((AstCastExpression*) right_expr) -> expression;
astGeneration/bytecode.cpp:        TypeSymbol* right_type = right_expr -> Type();
astGeneration/bytecode.cpp:        switch (expression -> Tag())
astGeneration/bytecode.cpp:            // point, because of -0.0 rules.
astGeneration/bytecode.cpp:                if (expression -> left_expression -> Type() ==
astGeneration/bytecode.cpp:                        (expression -> left_expression -> value);
astGeneration/bytecode.cpp:                    if (value -> value.IsPositiveZero())
astGeneration/bytecode.cpp:                else if (expression -> left_expression -> Type() ==
astGeneration/bytecode.cpp:                        (expression -> left_expression -> value);
astGeneration/bytecode.cpp:                    if (value -> value.IsPositiveZero())
astGeneration/bytecode.cpp:            EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:            // of NaN, infinity, and -0.0 rules. And in general, division
astGeneration/bytecode.cpp:            // 0 - x is negation, but note that +0.0 - expr cannot be
astGeneration/bytecode.cpp:            // simplified if expr is floating point, because of -0.0 rules.
astGeneration/bytecode.cpp:                if (expression -> left_expression -> Type() ==
astGeneration/bytecode.cpp:                        (expression -> left_expression -> value);
astGeneration/bytecode.cpp:                    if (value -> value.IsPositiveZero())
astGeneration/bytecode.cpp:                else if (expression -> left_expression -> Type() ==
astGeneration/bytecode.cpp:                        (expression -> left_expression -> value);
astGeneration/bytecode.cpp:                    if (value -> value.IsPositiveZero())
astGeneration/bytecode.cpp:            EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:    if (IsOne(expression -> left_expression))
astGeneration/bytecode.cpp:        if (expression -> Tag() == AstBinaryExpression::STAR)
astGeneration/bytecode.cpp:            EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:        if (expression -> left_expression -> Type() == control.boolean_type)
astGeneration/bytecode.cpp:            switch (expression -> Tag())
astGeneration/bytecode.cpp:                EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:                EmitExpression(expression -> right_expression, false);
astGeneration/bytecode.cpp:                EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:    if (IsZero(expression -> right_expression))
astGeneration/bytecode.cpp:        // Undo compiler-inserted numeric promotion to avoid unnecessary type
astGeneration/bytecode.cpp:        AstExpression* left_expr = expression -> left_expression;
astGeneration/bytecode.cpp:        if (left_expr -> CastExpressionCast() && left_expr -> generated)
astGeneration/bytecode.cpp:            left_expr = ((AstCastExpression*) left_expr) -> expression;
astGeneration/bytecode.cpp:        TypeSymbol* left_type = left_expr -> Type();
astGeneration/bytecode.cpp:        switch (expression -> Tag())
astGeneration/bytecode.cpp:            // (expr + +0.0) and (expr - -0.0) cannot be simplified if expr
astGeneration/bytecode.cpp:            // is floating point, because of -0.0 rules.
astGeneration/bytecode.cpp:                if (expression -> right_expression -> Type() ==
astGeneration/bytecode.cpp:                        (expression -> right_expression -> value);
astGeneration/bytecode.cpp:                    if (value -> value.IsPositiveZero() ==
astGeneration/bytecode.cpp:                        (expression -> Tag() == AstBinaryExpression::PLUS))
astGeneration/bytecode.cpp:                else if (expression -> right_expression -> Type() ==
astGeneration/bytecode.cpp:                        (expression -> right_expression -> value);
astGeneration/bytecode.cpp:                    if (value -> value.IsPositiveZero() ==
astGeneration/bytecode.cpp:                        (expression -> Tag() == AstBinaryExpression::PLUS))
astGeneration/bytecode.cpp:            EmitExpression(expression -> left_expression);
astGeneration/bytecode.cpp:            // of NaN, infinity, and -0.0 rules. And in general, division
astGeneration/bytecode.cpp:    if (IsOne(expression -> right_expression))
astGeneration/bytecode.cpp:        if (expression -> Tag() == AstBinaryExpression::STAR ||
astGeneration/bytecode.cpp:            expression -> Tag() == AstBinaryExpression::SLASH)
astGeneration/bytecode.cpp:            EmitExpression(expression -> left_expression);
astGeneration/bytecode.cpp:        if (expression -> right_expression -> Type() == control.boolean_type)
astGeneration/bytecode.cpp:            switch (expression -> Tag())
astGeneration/bytecode.cpp:                EmitExpression(expression -> left_expression);
astGeneration/bytecode.cpp:                EmitExpression(expression -> left_expression, false);
astGeneration/bytecode.cpp:                EmitExpression(expression -> left_expression);
astGeneration/bytecode.cpp:    if (expression -> left_expression -> Type() == control.boolean_type &&
astGeneration/bytecode.cpp:        (expression -> Tag() == AstBinaryExpression::EQUAL_EQUAL ||
astGeneration/bytecode.cpp:         expression -> Tag() == AstBinaryExpression::NOT_EQUAL))
astGeneration/bytecode.cpp:        EmitExpression(expression -> left_expression);
astGeneration/bytecode.cpp:        EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:        if (expression -> Tag() == AstBinaryExpression::EQUAL_EQUAL)
astGeneration/bytecode.cpp:    switch (expression -> Tag())
astGeneration/bytecode.cpp:    EmitExpression(expression -> left_expression);
astGeneration/bytecode.cpp:    EmitExpression(expression -> right_expression);
astGeneration/bytecode.cpp:    switch (expression -> Tag())
astGeneration/bytecode.cpp:    return GetTypeWords(expression -> Type());
astGeneration/bytecode.cpp:    TypeSymbol* left_type = expr -> expression -> Type();
astGeneration/bytecode.cpp:    TypeSymbol* right_type = expr -> type -> symbol;
astGeneration/bytecode.cpp:    if (right_type -> num_dimensions > 255)
astGeneration/bytecode.cpp:        semantic.ReportSemError(SemanticError::ARRAY_OVERFLOW, expr -> type);
astGeneration/bytecode.cpp:        EmitExpression(expr -> expression, false);
astGeneration/bytecode.cpp:    else if (expr -> expression -> IsConstant() ||
astGeneration/bytecode.cpp:             expr -> expression -> BinaryExpressionCast())
astGeneration/bytecode.cpp:        // concats are non-null and String is a final class.
astGeneration/bytecode.cpp:        EmitExpression(expr -> expression, false);
astGeneration/bytecode.cpp:    else if ((expr -> expression -> ThisExpressionCast() ||
astGeneration/bytecode.cpp:              expr -> expression -> SuperExpressionCast() ||
astGeneration/bytecode.cpp:              expr -> expression -> ClassLiteralCast() ||
astGeneration/bytecode.cpp:              expr -> expression -> ClassCreationExpressionCast() ||
astGeneration/bytecode.cpp:              expr -> expression -> ArrayCreationExpressionCast()) &&
astGeneration/bytecode.cpp:             left_type -> IsSubtype(right_type))
astGeneration/bytecode.cpp:        // We know the result: true, since the expression is non-null.
astGeneration/bytecode.cpp:        EmitExpression(expr -> expression, false);
astGeneration/bytecode.cpp:        EmitExpression(expr -> expression, need_value);
astGeneration/bytecode.cpp:    TypeSymbol* dest_type = expression -> Type();
astGeneration/bytecode.cpp:    TypeSymbol* source_type = expression -> expression -> Type();
astGeneration/bytecode.cpp:    if (dest_type -> num_dimensions > 255 && expression -> type)
astGeneration/bytecode.cpp:                                expression -> type);
astGeneration/bytecode.cpp:    EmitExpression(expression -> expression,
astGeneration/bytecode.cpp:                   need_value || dest_type -> IsSubtype(source_type));
astGeneration/bytecode.cpp:    if (need_value || dest_type -> IsSubtype(source_type))
astGeneration/bytecode.cpp:            assert(source_type -> IsSubtype(control.Object()));
astGeneration/bytecode.cpp:    if (source_type -> IsSubtype(dest_type) ||
astGeneration/bytecode.cpp:    if (expression -> Type() == control.null_type)
astGeneration/bytecode.cpp:    VariableSymbol* variable = expression -> symbol -> VariableCast();
astGeneration/bytecode.cpp:    if (expression -> ClassCreationExpressionCast() ||
astGeneration/bytecode.cpp:        expression -> ThisExpressionCast() ||
astGeneration/bytecode.cpp:        expression -> SuperExpressionCast() ||
astGeneration/bytecode.cpp:        expression -> ClassLiteralCast() ||
astGeneration/bytecode.cpp:        (variable && variable -> ACC_SYNTHETIC() &&
astGeneration/bytecode.cpp:         variable -> Identity() == control.this_name_symbol))
astGeneration/bytecode.cpp:    // We did not bother checking for other guaranteed non-null conditions:
astGeneration/bytecode.cpp:    // Object, we can be certain it has no side-effects.
astGeneration/bytecode.cpp:    if (expr -> resolution_opt)
astGeneration/bytecode.cpp:        expr = expr -> resolution_opt;
astGeneration/bytecode.cpp:    MethodSymbol* constructor = (MethodSymbol*) expr -> symbol;
astGeneration/bytecode.cpp:    TypeSymbol* type = constructor -> containing_type;
astGeneration/bytecode.cpp:    if (expr -> base_opt)
astGeneration/bytecode.cpp:        EmitCheckForNull(expr -> base_opt);
astGeneration/bytecode.cpp:    if (type -> Anonymous() && type -> super -> EnclosingInstance())
astGeneration/bytecode.cpp:        EmitCheckForNull(expr -> arguments -> Argument(i++));
astGeneration/bytecode.cpp:    for ( ; i < expr -> arguments -> NumArguments(); i++)
astGeneration/bytecode.cpp:        stack_words += EmitExpression(expr -> arguments -> Argument(i));
astGeneration/bytecode.cpp:    for (i = 0; i < expr -> arguments -> NumLocalArguments(); i++)
astGeneration/bytecode.cpp:            EmitExpression(expr -> arguments -> LocalArgument(i));
astGeneration/bytecode.cpp:    if (expr -> arguments -> NeedsExtraNullArgument())
astGeneration/bytecode.cpp:    ChangeStack(-stack_words);
astGeneration/bytecode.cpp:    if (expression -> test_expression -> IsConstant())
astGeneration/bytecode.cpp:        return EmitExpression((IsZero(expression -> test_expression)
astGeneration/bytecode.cpp:                               ? expression -> false_expression
astGeneration/bytecode.cpp:                               : expression -> true_expression),
astGeneration/bytecode.cpp:    if (expression -> Type() == control.null_type)
astGeneration/bytecode.cpp:        if (expression -> false_expression -> NullLiteralCast())
astGeneration/bytecode.cpp:            if (expression -> true_expression -> NullLiteralCast())
astGeneration/bytecode.cpp:                EmitExpression(expression -> test_expression, false);
astGeneration/bytecode.cpp:                EmitBranchIfExpression(expression -> test_expression, false,
astGeneration/bytecode.cpp:                EmitExpression(expression -> true_expression, false);
astGeneration/bytecode.cpp:        if (expression -> true_expression -> NullLiteralCast())
astGeneration/bytecode.cpp:            EmitBranchIfExpression(expression -> test_expression, true, lab);
astGeneration/bytecode.cpp:            EmitExpression(expression -> false_expression, false);
astGeneration/bytecode.cpp:    else if (expression -> true_expression -> IsConstant())
astGeneration/bytecode.cpp:        if (expression -> false_expression -> IsConstant())
astGeneration/bytecode.cpp:                return EmitExpression(expression -> test_expression, false);
astGeneration/bytecode.cpp:            if (expression -> true_expression -> value ==
astGeneration/bytecode.cpp:                expression -> false_expression -> value)
astGeneration/bytecode.cpp:                EmitExpression(expression -> test_expression, false);
astGeneration/bytecode.cpp:                return EmitExpression(expression -> true_expression);
astGeneration/bytecode.cpp:            if (control.IsSimpleIntegerValueType(expression -> Type()) ||
astGeneration/bytecode.cpp:                expression -> Type() == control.boolean_type)
astGeneration/bytecode.cpp:                // Optimize (expr ? value - 1 : value) to (value - expr).
astGeneration/bytecode.cpp:                    (expression -> true_expression -> value);
astGeneration/bytecode.cpp:                    (expression -> false_expression -> value);
astGeneration/bytecode.cpp:                if (left -> value == 1 && right -> value == 0)
astGeneration/bytecode.cpp:                    return EmitExpression(expression -> test_expression);
astGeneration/bytecode.cpp:                if (left -> value == right -> value + 1)
astGeneration/bytecode.cpp:                    EmitExpression(expression -> test_expression);
astGeneration/bytecode.cpp:                    EmitExpression(expression -> false_expression);
astGeneration/bytecode.cpp:                if (left -> value == right -> value - 1)
astGeneration/bytecode.cpp:                    EmitExpression(expression -> false_expression);
astGeneration/bytecode.cpp:                    EmitExpression(expression -> test_expression);
astGeneration/bytecode.cpp:        else if ((control.IsSimpleIntegerValueType(expression -> Type()) ||
astGeneration/bytecode.cpp:                  expression -> Type() == control.boolean_type) &&
astGeneration/bytecode.cpp:                 (IsOne(expression -> true_expression) ||
astGeneration/bytecode.cpp:                  IsZero(expression -> true_expression)))
astGeneration/bytecode.cpp:                PutOp(IsZero(expression -> true_expression)
astGeneration/bytecode.cpp:            EmitBranchIfExpression(expression -> test_expression, true, label);
astGeneration/bytecode.cpp:            EmitExpression(expression -> false_expression, need_value);
astGeneration/bytecode.cpp:    else if ((control.IsSimpleIntegerValueType(expression -> Type()) ||
astGeneration/bytecode.cpp:              expression -> Type() == control.boolean_type) &&
astGeneration/bytecode.cpp:             (IsOne(expression -> false_expression) ||
astGeneration/bytecode.cpp:              IsZero(expression -> false_expression)))
astGeneration/bytecode.cpp:            PutOp(IsZero(expression -> false_expression)
astGeneration/bytecode.cpp:        EmitBranchIfExpression(expression -> test_expression, false, label);
astGeneration/bytecode.cpp:        EmitExpression(expression -> true_expression, need_value);
astGeneration/bytecode.cpp:    EmitBranchIfExpression(expression -> test_expression, false, lab1);
astGeneration/bytecode.cpp:    EmitExpression(expression -> true_expression, need_value);
astGeneration/bytecode.cpp:        ChangeStack(- GetTypeWords(expression -> Type()));
astGeneration/bytecode.cpp:    EmitExpression(expression -> false_expression, need_value);
astGeneration/bytecode.cpp:    return GetTypeWords(expression -> true_expression -> Type());
astGeneration/bytecode.cpp:    if (expression -> resolution_opt)
astGeneration/bytecode.cpp:    VariableSymbol* sym = expression -> symbol -> VariableCast();
astGeneration/bytecode.cpp:    return LoadVariable(sym -> ACC_STATIC() ? STATIC_VAR : FIELD_VAR,
astGeneration/bytecode.cpp:    AstMethodInvocation* method_call = expression -> resolution_opt
astGeneration/bytecode.cpp:        ? expression -> resolution_opt -> MethodInvocationCast() : expression;
astGeneration/bytecode.cpp:    MethodSymbol* msym = (MethodSymbol*) method_call -> symbol;
astGeneration/bytecode.cpp:    AstExpression* base = method_call -> base_opt;
astGeneration/bytecode.cpp:    if (msym -> ACC_STATIC())
astGeneration/bytecode.cpp:        if (base && (! msym -> accessed_member ||
astGeneration/bytecode.cpp:                      msym -> AccessesStaticMember()))
astGeneration/bytecode.cpp:            is_super = base -> SuperExpressionCast() != NULL;
astGeneration/bytecode.cpp:    for (unsigned i = 0; i < method_call -> arguments -> NumArguments(); i++)
astGeneration/bytecode.cpp:        stack_words += EmitExpression(method_call -> arguments -> Argument(i));
astGeneration/bytecode.cpp:    TypeSymbol* type = MethodTypeResolution(method_call -> base_opt, msym);
astGeneration/bytecode.cpp:    PutOp(msym -> ACC_STATIC() ? OP_INVOKESTATIC
astGeneration/bytecode.cpp:          : (is_super || msym -> ACC_PRIVATE()) ? OP_INVOKESPECIAL
astGeneration/bytecode.cpp:          : type -> ACC_INTERFACE() ? OP_INVOKEINTERFACE
astGeneration/bytecode.cpp:    ChangeStack(- stack_words);
astGeneration/bytecode.cpp:    TypeSymbol* type = (base_type ? base_type : msym -> containing_type);
astGeneration/bytecode.cpp:    if (type -> ACC_INTERFACE())
astGeneration/bytecode.cpp:    if (msym -> Type() == control.void_type)
astGeneration/bytecode.cpp:    bool wide = control.IsDoubleWordType(msym -> Type());
astGeneration/bytecode.cpp:    while (! expr -> IsConstant())
astGeneration/bytecode.cpp:        if (expr -> ParenthesizedExpressionCast())
astGeneration/bytecode.cpp:            expr = ((AstParenthesizedExpression*) expr) -> expression;
astGeneration/bytecode.cpp:        else if (expr -> CastExpressionCast())
astGeneration/bytecode.cpp:            TypeSymbol* cast_type = expr -> Type();
astGeneration/bytecode.cpp:            AstExpression* sub_expr = StripNops(cast_expr -> expression);
astGeneration/bytecode.cpp:            TypeSymbol* sub_type = sub_expr -> Type();
astGeneration/bytecode.cpp:            if (sub_type -> IsSubtype(cast_type) ||
astGeneration/bytecode.cpp:                 cast_type -> num_dimensions <= 255))
astGeneration/bytecode.cpp:    for (int i = block -> NumStatements() - 1; i >= 0; i--)
astGeneration/bytecode.cpp:        Ast* statement = block -> Statement(i);
astGeneration/bytecode.cpp:        if (statement -> EmptyStatementCast() ||
astGeneration/bytecode.cpp:            statement -> LocalClassStatementCast() ||
astGeneration/bytecode.cpp:            (statement -> BlockCast() && IsNop((AstBlock*) statement)))
astGeneration/bytecode.cpp:        if (statement -> kind == Ast::IF)
astGeneration/bytecode.cpp:            if ((IsOne(ifstat -> expression) &&
astGeneration/bytecode.cpp:                 IsNop(ifstat -> true_statement)) ||
astGeneration/bytecode.cpp:                (IsZero(ifstat -> expression) &&
astGeneration/bytecode.cpp:                 (! ifstat -> false_statement_opt ||
astGeneration/bytecode.cpp:                  IsNop(ifstat -> false_statement_opt))))
astGeneration/bytecode.cpp:        TypeSymbol* element_type = type -> ArraySubtype();
astGeneration/bytecode.cpp:        ChangeStack(1 - num_dims);
astGeneration/bytecode.cpp:    TypeSymbol* base_type = expression -> base -> Type();
astGeneration/bytecode.cpp:    AstExpression* base = StripNops(expression -> base);
astGeneration/bytecode.cpp:        base -> Type() == control.null_type)
astGeneration/bytecode.cpp:        // was not being treated as compatible with a multi-dimensional array
astGeneration/bytecode.cpp:        // time null might be assigned to a multi-dimensional local variable
astGeneration/bytecode.cpp:    EmitExpression(expression -> expression);
astGeneration/bytecode.cpp:                expression -> write_method -> accessed_member -> VariableCast();
astGeneration/bytecode.cpp:            if (accessed_member -> ACC_STATIC())
astGeneration/bytecode.cpp:    return GetTypeWords(expression -> Type());
astGeneration/bytecode.cpp:        ResolveAccess(expression -> expression); // get address and value
astGeneration/bytecode.cpp:    else EmitFieldAccessLhs(expression -> expression);
astGeneration/bytecode.cpp:    TypeSymbol* expression_type = expression -> Type();
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        CompleteCall(expression -> write_method, stack_words);
astGeneration/bytecode.cpp:            ChangeStack(-1);
astGeneration/bytecode.cpp:        VariableSymbol* sym = (VariableSymbol*) expression -> symbol;
astGeneration/bytecode.cpp:        PutU2(RegisterFieldref(VariableTypeResolution(expression ->
astGeneration/bytecode.cpp:    TypeSymbol* expression_type = expression -> Type();
astGeneration/bytecode.cpp:        LoadVariable(kind, StripNops(expression -> expression), need_value);
astGeneration/bytecode.cpp:        PutOpIINC(expression -> symbol -> VariableCast() -> LocalVariableIndex(),
astGeneration/bytecode.cpp:                  expression -> Tag() == AstPostUnaryExpression::PLUSPLUS ? 1 : -1);
astGeneration/bytecode.cpp:    LoadVariable(kind, StripNops(expression -> expression));
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         CompleteCall(expression -> write_method, stack_words);
astGeneration/bytecode.cpp:    else StoreVariable(kind, expression -> expression);
astGeneration/bytecode.cpp:    EmitArrayAccessLhs((AstArrayAccess*) StripNops(expression -> expression));
astGeneration/bytecode.cpp:    TypeSymbol* expression_type = expression -> Type();
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPostUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:    TypeSymbol* type = expression -> Type();
astGeneration/bytecode.cpp:    if (expression -> Tag() == AstPreUnaryExpression::PLUSPLUS ||
astGeneration/bytecode.cpp:        expression -> Tag() == AstPreUnaryExpression::MINUSMINUS)
astGeneration/bytecode.cpp:        EmitExpression(expression -> expression, need_value);
astGeneration/bytecode.cpp:        switch (expression -> Tag())
astGeneration/bytecode.cpp:                PutOp(OP_ICONST_M1); // -1
astGeneration/bytecode.cpp:                PutOp(OP_LCONST_1); // make -1
astGeneration/bytecode.cpp:// PRE_UNARY with side effects (++X or --X)
astGeneration/bytecode.cpp:                expression -> write_method -> accessed_member -> VariableCast();
astGeneration/bytecode.cpp:            if (accessed_member -> ACC_STATIC())
astGeneration/bytecode.cpp:    TypeSymbol* type = expression -> Type();
astGeneration/bytecode.cpp:        PutOpIINC(expression -> symbol -> VariableCast() -> LocalVariableIndex(),
astGeneration/bytecode.cpp:                  expression -> Tag() == AstPreUnaryExpression::PLUSPLUS ? 1 : -1);
astGeneration/bytecode.cpp:        LoadVariable(kind, StripNops(expression -> expression), need_value);
astGeneration/bytecode.cpp:    LoadVariable(kind, StripNops(expression -> expression));
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        CompleteCall(expression -> write_method, stack_words);
astGeneration/bytecode.cpp:    else StoreVariable(kind, expression -> expression);
astGeneration/bytecode.cpp:    EmitArrayAccessLhs((AstArrayAccess*) StripNops(expression -> expression));
astGeneration/bytecode.cpp:    TypeSymbol* type = expression -> Type();
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:         PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        ResolveAccess(expression -> expression); // get address and value
astGeneration/bytecode.cpp:        EmitFieldAccessLhs(expression -> expression);
astGeneration/bytecode.cpp:    TypeSymbol* expression_type = expression -> Type();
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        PutOp(expression -> Tag() == AstPreUnaryExpression::PLUSPLUS
astGeneration/bytecode.cpp:        CompleteCall(expression -> write_method, stack_words);
astGeneration/bytecode.cpp:            ChangeStack(-1);
astGeneration/bytecode.cpp:        VariableSymbol* sym = (VariableSymbol*) expression -> symbol;
astGeneration/bytecode.cpp:        PutU2(RegisterFieldref(VariableTypeResolution(expression ->
astGeneration/bytecode.cpp:    if (unit_type -> EnclosingType())
astGeneration/bytecode.cpp:        LoadLocal(++stack_words, unit_type -> EnclosingType());
astGeneration/bytecode.cpp:    for (unsigned k = 0; k < this_call -> arguments -> NumArguments(); k++)
astGeneration/bytecode.cpp:        stack_words += EmitExpression(this_call -> arguments -> Argument(k));
astGeneration/bytecode.cpp:        for (unsigned i = 0; i < unit_type -> NumConstructorParameters(); i++)
astGeneration/bytecode.cpp:            VariableSymbol* shadow = unit_type -> ConstructorParameter(i);
astGeneration/bytecode.cpp:            LoadLocal(offset, shadow -> Type());
astGeneration/bytecode.cpp:            int words = GetTypeWords(shadow -> Type());
astGeneration/bytecode.cpp:    ChangeStack(-stack_words);
astGeneration/bytecode.cpp:    PutU2(RegisterMethodref(unit_type, this_call -> symbol));
astGeneration/bytecode.cpp:    if (super_call -> base_opt)
astGeneration/bytecode.cpp:        if (unit_type -> Anonymous())
astGeneration/bytecode.cpp:            // Special case - the null check was done during the class instance
astGeneration/bytecode.cpp:            EmitExpression(super_call -> base_opt);
astGeneration/bytecode.cpp:        else EmitCheckForNull(super_call -> base_opt);
astGeneration/bytecode.cpp:    for (i = 0; i < super_call -> arguments -> NumArguments(); i++)
astGeneration/bytecode.cpp:        stack_words += EmitExpression(super_call -> arguments -> Argument(i));
astGeneration/bytecode.cpp:    for (i = 0; i < super_call -> arguments -> NumLocalArguments(); i++)
astGeneration/bytecode.cpp:            EmitExpression(super_call -> arguments -> LocalArgument(i));
astGeneration/bytecode.cpp:    if (super_call -> arguments -> NeedsExtraNullArgument())
astGeneration/bytecode.cpp:    ChangeStack(-stack_words);
astGeneration/bytecode.cpp:    PutU2(RegisterMethodref(unit_type -> super, super_call -> symbol));
astGeneration/bytecode.cpp:    AstExpression* left_expr = StripNops(expression -> left_expression);
astGeneration/bytecode.cpp:    if (left_expr -> Type() == control.String() &&
astGeneration/bytecode.cpp:        left_expr -> BinaryExpressionCast() &&
astGeneration/bytecode.cpp:        ! left_expr -> IsConstant())
astGeneration/bytecode.cpp:        if (left_expr -> IsConstant())
astGeneration/bytecode.cpp:                DYNAMIC_CAST<Utf8LiteralValue*> (left_expr -> value);
astGeneration/bytecode.cpp:            if (value -> length == 0 || ! need_value)
astGeneration/bytecode.cpp:                ChangeStack(-1); // account for the argument
astGeneration/bytecode.cpp:            AppendString(expression -> left_expression, need_value);
astGeneration/bytecode.cpp:    AppendString(expression -> right_expression, need_value);
astGeneration/bytecode.cpp:    // Grab the type before reducing no-ops, in the case of ""+(int)char.
astGeneration/bytecode.cpp:    TypeSymbol* type = expression -> Type();
astGeneration/bytecode.cpp:    if (expression -> IsConstant())
astGeneration/bytecode.cpp:            DYNAMIC_CAST<Utf8LiteralValue*> (expression -> value);
astGeneration/bytecode.cpp:        if (value -> length == 0 || ! need_value)
astGeneration/bytecode.cpp:        if (value -> length == 1)
astGeneration/bytecode.cpp:            LoadImmediateInteger(value -> value[0]);
astGeneration/bytecode.cpp:        else if (value -> length == 2 &&
astGeneration/bytecode.cpp:                 (value -> value[0] & 0x00E0) == 0x00C0)
astGeneration/bytecode.cpp:            // 2-byte string in UTF-8, but still single character.
astGeneration/bytecode.cpp:            LoadImmediateInteger(((value -> value[0] & 0x001F) << 6) |
astGeneration/bytecode.cpp:                                 (value -> value[1] & 0x003F));
astGeneration/bytecode.cpp:        else if (value -> length == 3 &&
astGeneration/bytecode.cpp:                 (value -> value[0] & 0x00E0) == 0x00E0)
astGeneration/bytecode.cpp:            // 3-byte string in UTF-8, but still single character.
astGeneration/bytecode.cpp:            LoadImmediateInteger(((value -> value[0] & 0x000F) << 12) |
astGeneration/bytecode.cpp:                                 ((value -> value[1] & 0x003F) << 6) |
astGeneration/bytecode.cpp:                                 (value -> value[2] & 0x003F));
astGeneration/bytecode.cpp:            expression -> BinaryExpressionCast();
astGeneration/bytecode.cpp:            assert(binary_expression -> Tag() == AstBinaryExpression::PLUS);
astGeneration/bytecode.cpp:            AppendString(binary_expression -> left_expression, need_value);
astGeneration/bytecode.cpp:            AppendString(binary_expression -> right_expression, need_value);
astGeneration/bytecode.cpp:            // Optimization: appending non-Object is no-op if result is unused.
astGeneration/bytecode.cpp:        ChangeStack(-1);
astGeneration/bytecode.cpp:    , control(type -> semantic_environment -> sem -> control)
astGeneration/bytecode.cpp:    , semantic(*type -> semantic_environment -> sem)
astGeneration/bytecode.cpp:    // strictfp. Also, a non-access flag, the super bit, must be set for
astGeneration/bytecode.cpp:    // classes but not interfaces. For top-level types, this changes nothing
astGeneration/bytecode.cpp:    SetFlags(unit_type -> Flags());
astGeneration/bytecode.cpp:    if (! unit_type -> ACC_INTERFACE())
astGeneration/bytecode.cpp:		<< unit_type -> fully_qualified_name -> value << " as version "
astGeneration/bytecode.cpp:    super_class = (unit_type -> super ? RegisterClass(unit_type -> super) : 0);
astGeneration/bytecode.cpp:    for (unsigned k = 0; k < unit_type -> NumInterfaces(); k++)
astGeneration/bytecode.cpp:        interfaces.Next() = RegisterClass(unit_type -> Interface(k));
astGeneration/bytecode.cpp:    // two-pass algorithm with straight-forward emission the first time, and
astGeneration/bytecode.cpp:    // try-finally, or in private methods); and might allow us to finally
astGeneration/bytecode.cpp:    // implement the -O option as more than a no-op.
astGeneration/bytecode.cpp:    int index = lab.uses.Length() - 1;
astGeneration/bytecode.cpp:        int start = luse - lab.uses[index].op_offset;
astGeneration/bytecode.cpp:            code_attribute -> CodeLength() != last_label_pc)
astGeneration/bytecode.cpp:            code_attribute -> DeleteCode(lab.uses[index].op_offset +
astGeneration/bytecode.cpp:            line_number_table_attribute -> SetMax(start);
astGeneration/bytecode.cpp:    lab.definition = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:        // Sanity check - when completing method, make sure nothing jumps out
astGeneration/bytecode.cpp:        if (lab.definition > code_attribute -> CodeLength())
astGeneration/bytecode.cpp:            lab.definition = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:        // as 16-bit signed offset.
astGeneration/bytecode.cpp:            int start = luse - lab.uses[i].op_offset,
astGeneration/bytecode.cpp:                offset = lab.definition - start;
astGeneration/bytecode.cpp:                assert(offset < 32768 && offset >= -32768 &&
astGeneration/bytecode.cpp:                code_attribute -> ResetCode(luse, (offset >> 8) & 0xFF);
astGeneration/bytecode.cpp:                code_attribute -> ResetCode(luse + 1, offset & 0xFF);
astGeneration/bytecode.cpp:                code_attribute -> ResetCode(luse, (offset >> 24) & 0xFF);
astGeneration/bytecode.cpp:                code_attribute -> ResetCode(luse + 1, (offset >> 16) & 0xFF);
astGeneration/bytecode.cpp:                code_attribute -> ResetCode(luse + 2, (offset >>  8) & 0xFF);
astGeneration/bytecode.cpp:                code_attribute -> ResetCode(luse + 3, offset & 0xFF);
astGeneration/bytecode.cpp:    lab.uses[lab_index].use_offset = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:        code_attribute -> AddCode(0);
astGeneration/bytecode.cpp:        LoadImmediateInteger(vp -> value);
astGeneration/bytecode.cpp:        if (vp -> value == 0)
astGeneration/bytecode.cpp:        else if (vp -> value == 1)
astGeneration/bytecode.cpp:        else if (vp -> value >= -1 && vp -> value <= 5)
astGeneration/bytecode.cpp:            LoadImmediateInteger(vp -> value.LowWord());
astGeneration/bytecode.cpp:        IEEEfloat val = vp -> value;
astGeneration/bytecode.cpp:        else if (val == -1.0f)
astGeneration/bytecode.cpp:        IEEEdouble val = vp -> value;
astGeneration/bytecode.cpp:        else if (val == -1.0)
astGeneration/bytecode.cpp:    if (val >= -1 && val <= 5)
astGeneration/bytecode.cpp:    else if (val >= -128 && val < 128)
astGeneration/bytecode.cpp:    else if (val >= -32768 && val < 32768)
astGeneration/bytecode.cpp:// Call to an access method for a compound operator such as ++, --,
astGeneration/bytecode.cpp:    AstFieldAccess* field = p -> FieldAccessCast();
astGeneration/bytecode.cpp:    AstExpression* resolve_expression = field ? field -> resolution_opt
astGeneration/bytecode.cpp:        : p -> NameCast() -> resolution_opt;
astGeneration/bytecode.cpp:        resolve_expression -> MethodInvocationCast();
astGeneration/bytecode.cpp:    assert(read_method && read_method -> arguments -> NumArguments() == 1);
astGeneration/bytecode.cpp:    int stack_words = EmitExpression(read_method -> arguments -> Argument(0));
astGeneration/bytecode.cpp:    CompleteCall(read_method -> symbol -> MethodCast(), stack_words);
astGeneration/bytecode.cpp:    VariableSymbol* sym = (VariableSymbol*) expr -> symbol;
astGeneration/bytecode.cpp:    TypeSymbol* expression_type = expr -> Type();
astGeneration/bytecode.cpp:    AstFieldAccess* field_access = expr -> FieldAccessCast();
astGeneration/bytecode.cpp:    AstName* name = expr -> NameCast();
astGeneration/bytecode.cpp:    AstExpression* base = name ? name -> base_opt : field_access -> base;
astGeneration/bytecode.cpp:        if (expr -> IsConstant())
astGeneration/bytecode.cpp:            LoadLiteral(expr -> value, expression_type);
astGeneration/bytecode.cpp:        else LoadLocal(sym -> LocalVariableIndex(), expression_type);
astGeneration/bytecode.cpp:            MethodSymbol* method = expr -> symbol -> MethodCast();
astGeneration/bytecode.cpp:            if (! need_value && method && method -> AccessesStaticMember())
astGeneration/bytecode.cpp:            return EmitExpression((name ? name -> resolution_opt
astGeneration/bytecode.cpp:                                   : field_access -> resolution_opt),
astGeneration/bytecode.cpp:        assert(sym -> IsInitialized() || ! sym -> ACC_FINAL());
astGeneration/bytecode.cpp:        if (shadow_parameter_offset && sym -> owner == unit_type &&
astGeneration/bytecode.cpp:            (sym -> accessed_local ||
astGeneration/bytecode.cpp:             sym -> Identity() == control.this_name_symbol))
astGeneration/bytecode.cpp:            if (! sym -> accessed_local)
astGeneration/bytecode.cpp:                 i < unit_type -> NumConstructorParameters(); i++)
astGeneration/bytecode.cpp:                VariableSymbol* shadow = unit_type -> ConstructorParameter(i);
astGeneration/bytecode.cpp:                offset += GetTypeWords(shadow -> Type());
astGeneration/bytecode.cpp:        if (base && base -> Type() -> IsArray())
astGeneration/bytecode.cpp:            assert(sym -> name_symbol == control.length_name_symbol);
astGeneration/bytecode.cpp:            if (base -> ArrayCreationExpressionCast() && ! need_value)
astGeneration/bytecode.cpp:        if (sym -> initial_value)
astGeneration/bytecode.cpp:                LoadLiteral(sym -> initial_value, expression_type);
astGeneration/bytecode.cpp:        if (need_value || sym -> ACC_VOLATILE())
astGeneration/bytecode.cpp:            if (sym -> initial_value)
astGeneration/bytecode.cpp:                LoadLiteral(sym -> initial_value, expression_type);
astGeneration/bytecode.cpp:    VariableSymbol* sym = (VariableSymbol*) expression -> symbol;
astGeneration/bytecode.cpp:    TypeSymbol* expression_type = expression -> Type();
astGeneration/bytecode.cpp:    if (sym -> ACC_STATIC())
astGeneration/bytecode.cpp:        ChangeStack(1 - GetTypeWords(expression_type));
astGeneration/bytecode.cpp:        ChangeStack(1 - GetTypeWords(expression_type));
astGeneration/bytecode.cpp:    VariableSymbol* sym = (VariableSymbol*) expr -> symbol;
astGeneration/bytecode.cpp:        StoreLocal(sym -> LocalVariableIndex(), sym -> Type());
astGeneration/bytecode.cpp:            if (sym -> ACC_STATIC())
astGeneration/bytecode.cpp:                ChangeStack(1 - GetTypeWords(expr -> Type()));
astGeneration/bytecode.cpp:                ChangeStack(1 - GetTypeWords(expr -> Type()));
astGeneration/bytecode.cpp:// Finish off code by writing remaining type-level attributes.
astGeneration/bytecode.cpp:    // Only output SourceFile attribute if -g:source is enabled.
astGeneration/bytecode.cpp:                      RegisterUtf8(unit_type -> file_symbol ->
astGeneration/bytecode.cpp:    if (unit_type -> IsDeprecated())
astGeneration/bytecode.cpp:    if (unit_type -> ACC_SYNTHETIC() &&
astGeneration/bytecode.cpp:    if (unit_type -> owner -> MethodCast())
astGeneration/bytecode.cpp:        MethodSymbol* enclosing = (MethodSymbol*) unit_type -> owner;
astGeneration/bytecode.cpp:    unsigned i = unit_type -> NumNestedTypes();
astGeneration/bytecode.cpp:    while (i--)
astGeneration/bytecode.cpp:        RegisterClass(unit_type -> NestedType(i));
astGeneration/bytecode.cpp:        code_attribute -> CodeLength() == (u2) control.option.debug_trap_op)
astGeneration/bytecode.cpp:    last_op_pc = code_attribute -> CodeLength();
astGeneration/bytecode.cpp:    code_attribute -> AddCode(opc);
astGeneration/bytecode.cpp:    if (var <= 255 && (val >= -128 && val <= 127))  // if can use standard form
astGeneration/bytecode.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
astGeneration/bytecode.h:        assert(block -> nesting_level < stack_size &&
astGeneration/bytecode.h:                (block -> nesting_level > nesting_level[top_index - 1])));
astGeneration/bytecode.h:        nesting_level[top_index] = block -> nesting_level;
astGeneration/bytecode.h:        break_labels[block -> nesting_level].uses.Reset();
astGeneration/bytecode.h:        continue_labels[block -> nesting_level].uses.Reset();
astGeneration/bytecode.h:        finally_labels[block -> nesting_level].uses.Reset();
astGeneration/bytecode.h:        handler_range_start[block -> nesting_level].Reset();
astGeneration/bytecode.h:        handler_range_end[block -> nesting_level].Reset();
astGeneration/bytecode.h:        blocks[block -> nesting_level] = block;
astGeneration/bytecode.h:            memset(local_variables_start_pc[block -> nesting_level],
astGeneration/bytecode.h:            top_index--;
astGeneration/bytecode.h:        return nesting_level[top_index - 1];
astGeneration/bytecode.h:        assert(variable -> LocalVariableIndex() >= 0 &&
astGeneration/bytecode.h:               variable -> LocalVariableIndex() < (int) size);
astGeneration/bytecode.h:        return TopLocalVariablesStartPc()[variable -> LocalVariableIndex()];
astGeneration/bytecode.h:    // This variable is non-zero only in constructors of local classes; it
astGeneration/bytecode.h:    // Does p refer to a non-null reference type?
astGeneration/bytecode.h:        return ! p -> Primitive() && p != control.null_type;
astGeneration/bytecode.h:        return p -> num_dimensions > 1 ||
astGeneration/bytecode.h:            p -> base_type == control.Object() ||
astGeneration/bytecode.h:            p -> base_type == control.Cloneable() ||
astGeneration/bytecode.h:            p -> base_type == control.Serializable();
astGeneration/bytecode.h:    // See if operand is constant zero (including -0.0).
astGeneration/bytecode.h:        TypeSymbol* type = p -> Type();
astGeneration/bytecode.h:        if (p -> IsConstant() && type != control.String())
astGeneration/bytecode.h:                return (DYNAMIC_CAST<IntLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:                return (DYNAMIC_CAST<LongLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:                return (DYNAMIC_CAST<FloatLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:                return (DYNAMIC_CAST<DoubleLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:        TypeSymbol* type = p -> Type();
astGeneration/bytecode.h:        if (p -> IsConstant() && type != control.String())
astGeneration/bytecode.h:                return (DYNAMIC_CAST<IntLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:                return (DYNAMIC_CAST<LongLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:                return (DYNAMIC_CAST<FloatLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:                return (DYNAMIC_CAST<DoubleLiteralValue*> (p -> value)) ->
astGeneration/bytecode.h:            expression -> AssignmentExpressionCast();
astGeneration/bytecode.h:        AstPreUnaryExpression* pre = expression -> PreUnaryExpressionCast();
astGeneration/bytecode.h:        AstPostUnaryExpression* post = expression -> PostUnaryExpressionCast();
astGeneration/bytecode.h:                              ? (assignment -> write_method
astGeneration/bytecode.h:                                 : assignment -> left_hand_side)
astGeneration/bytecode.h:                              ? (pre -> write_method
astGeneration/bytecode.h:                                 ? (AstExpression*) NULL : pre -> expression)
astGeneration/bytecode.h:                              ? (post -> write_method
astGeneration/bytecode.h:                                 ? (AstExpression*) NULL : post -> expression)
astGeneration/bytecode.h:        if (lhs && lhs -> CastExpressionCast())
astGeneration/bytecode.h:            lhs = ((AstCastExpression*) lhs) -> expression;
astGeneration/bytecode.h:        while (lhs && lhs -> ParenthesizedExpressionCast())
astGeneration/bytecode.h:            lhs = ((AstParenthesizedExpression*) lhs) -> expression;
astGeneration/bytecode.h:        Symbol* sym = lhs ? lhs -> symbol : (Symbol*) NULL;
astGeneration/bytecode.h:        // If the expression associated with the left-hand side is null,
astGeneration/bytecode.h:        // then we have an access method. Otherwise, a left-hand side is
astGeneration/bytecode.h:        // a FieldAccess or name, the left-hand side is resolved into a
astGeneration/bytecode.h:        VariableSymbol* var = (sym ? sym -> VariableCast()
astGeneration/bytecode.h:                : var -> owner -> MethodCast() ? LOCAL_VAR
astGeneration/bytecode.h:                : var -> ACC_STATIC() ? STATIC_VAR
astGeneration/bytecode.h:        u2 index = name_and_type_constant_pool_index ->
astGeneration/bytecode.h:            Image(name -> index, type_name -> index);
astGeneration/bytecode.h:            name_and_type_constant_pool_index ->
astGeneration/bytecode.h:                Image(name -> index, type_name -> index) = index;
astGeneration/bytecode.h:        Utf8LiteralValue* class_name = type -> fully_qualified_name;
astGeneration/bytecode.h:            variable -> ExternalIdentity() -> Utf8_literal;
astGeneration/bytecode.h:        Utf8LiteralValue* field_type_name = variable -> signature;
astGeneration/bytecode.h:        assert(variable -> owner -> TypeCast());
astGeneration/bytecode.h:        u2 index = fieldref_constant_pool_index ->
astGeneration/bytecode.h:            Image(class_name -> index, name_type_index);
astGeneration/bytecode.h:            fieldref_constant_pool_index ->
astGeneration/bytecode.h:                Image(class_name -> index, name_type_index) = index;
astGeneration/bytecode.h:        return RegisterFieldref(variable -> ContainingType(), variable);
astGeneration/bytecode.h:        CPInfo::ConstantPoolTag kind = type -> ACC_INTERFACE()
astGeneration/bytecode.h:        Utf8LiteralValue* class_name = type -> fully_qualified_name;
astGeneration/bytecode.h:            method -> ExternalIdentity() -> Utf8_literal;
astGeneration/bytecode.h:        Utf8LiteralValue* method_type = method -> signature;
astGeneration/bytecode.h:        u2 index = methodref_constant_pool_index ->
astGeneration/bytecode.h:            Image(class_name -> index, name_type_index);
astGeneration/bytecode.h:            methodref_constant_pool_index -> Image(class_name -> index,
astGeneration/bytecode.h:            return RegisterMethodref(method -> containing_type, method);
astGeneration/bytecode.h:        u2 index = (*double_constant_pool_index)[lit -> index];
astGeneration/bytecode.h:            (*double_constant_pool_index)[lit -> index] = index;
astGeneration/bytecode.h:            constant_pool.SetNext(new CPDoubleInfo(lit -> value.HighWord(),
astGeneration/bytecode.h:                                                   lit -> value.LowWord()));
astGeneration/bytecode.h:        u2 index = (*integer_constant_pool_index)[lit -> index];
astGeneration/bytecode.h:            (*integer_constant_pool_index)[lit -> index] = index;
astGeneration/bytecode.h:            constant_pool.SetNext(new CPIntegerInfo((u4) lit -> value));
astGeneration/bytecode.h:                ? (*integer_constant_pool_index)[lit -> index] : 0);
astGeneration/bytecode.h:        u2 index = (*long_constant_pool_index)[lit -> index];
astGeneration/bytecode.h:            (*long_constant_pool_index)[lit -> index] = index;
astGeneration/bytecode.h:            constant_pool.SetNext(new CPLongInfo(lit -> value.HighWord(),
astGeneration/bytecode.h:                                                 lit -> value.LowWord()));
astGeneration/bytecode.h:        u2 index = (*float_constant_pool_index)[lit -> index];
astGeneration/bytecode.h:            (*float_constant_pool_index)[lit -> index] = index;
astGeneration/bytecode.h:            constant_pool.SetNext(new CPFloatInfo(lit -> value.Word()));
astGeneration/bytecode.h:        u2 index = utf8_constant_pool_index[lit -> index];
astGeneration/bytecode.h:            utf8_constant_pool_index[lit -> index] = index;
astGeneration/bytecode.h:            constant_pool.SetNext(new CPUtf8Info(lit -> value,
astGeneration/bytecode.h:                                                 lit -> length));
astGeneration/bytecode.h:            if (lit -> length > 0xffff)
astGeneration/bytecode.h:        return RegisterUtf8(sym -> Utf8_literal);
astGeneration/bytecode.h:        u2 index = (*string_constant_pool_index)[lit -> index];
astGeneration/bytecode.h:            (*string_constant_pool_index)[lit -> index] = index;
astGeneration/bytecode.h:        Utf8LiteralValue* lit = type -> num_dimensions
astGeneration/bytecode.h:            ? type -> signature : type -> fully_qualified_name;
astGeneration/bytecode.h:        u2 index = class_constant_pool_index[lit -> index];
astGeneration/bytecode.h:            class_constant_pool_index[lit -> index] = index;
astGeneration/bytecode.h:            if (type -> IsNested())
astGeneration/bytecode.h:                AccessFlags flags = type -> Flags();
astGeneration/bytecode.h:                inner_classes_attribute ->
astGeneration/bytecode.h:                    AddInnerClass(index, type -> IsLocal() ? 0
astGeneration/bytecode.h:                                  : RegisterClass(type -> ContainingType()),
astGeneration/bytecode.h:                                  type -> Anonymous() ? 0
astGeneration/bytecode.h:                                  : RegisterName(type -> name_symbol), flags);
astGeneration/bytecode.h:        u2 type_index = RegisterClass(sym -> containing_type);
astGeneration/bytecode.h:            (sym -> name_symbol == control.block_init_name_symbol ||
astGeneration/bytecode.h:             sym -> name_symbol == control.clinit_name_symbol) ? 0
astGeneration/bytecode.h:            : RegisterNameAndType(sym -> ExternalIdentity() -> Utf8_literal,
astGeneration/bytecode.h:                                  sym -> signature);
astGeneration/bytecode.h:        return LoadArrayElement(expression -> Type());
astGeneration/bytecode.h:        // we must treat even-odd and odd-even pairs differently.
astGeneration/bytecode.h:        return (Opcode) (((opc + 1) ^ 1) - 1);
astGeneration/bytecode.h:        code_attribute -> AddCode(i & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode((i >> 8) & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode(i & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode(u & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode((u >> 8) & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode(u & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode((u >> 24));
astGeneration/bytecode.h:        code_attribute -> AddCode((u >> 16) & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode((u >>  8) & 0xff);
astGeneration/bytecode.h:        code_attribute -> AddCode(u & 0xff);
Binary file bytecode.o matches
declarations/case.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/case.h:// NOTE that this class is hard-wired to work on an ASCII machine.
declarations/case.h:// make the array "lower" non-static. In such a case, each object
declarations/case.h:    // string. If the character is not found, return -1.
declarations/case.h:        return -1;
declarations/case.h:        return -1;
declarations/case.h:    // Compare two null-terminated character strings, s1 and s2
Binary file case.o matches
orchestration/class.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
orchestration/class.cpp:    if (constant -> Large())
orchestration/class.cpp:        if (entry && ! entry -> Check(*this))
orchestration/class.cpp:            // non-printing ASCII
orchestration/class.cpp:            if (bytes[i] <= 0x7f) // 1-byte (printing ASCII, if JIKES_DEBUG)
orchestration/class.cpp:            else if (bytes[i] <= 0xdf) // 2-byte source
orchestration/class.cpp:                u2 value = (bytes[i - 1] & 0x1f) << 6;
orchestration/class.cpp:            else // 3-byte source
orchestration/class.cpp:                u2 value = (bytes[i - 2] & 0x0f) << 12;
orchestration/class.cpp:                value |= (bytes[i - 1] & 0x3f) << 6;
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        switch (attr -> Tag())
orchestration/class.cpp:    assert(pool[descriptor_index] -> Tag() == CPInfo::CONSTANT_Utf8);
orchestration/class.cpp:        ? attr_signature -> Signature(pool)
orchestration/class.cpp:    return sig -> Bytes();
orchestration/class.cpp:    assert(pool[descriptor_index] -> Tag() == CPInfo::CONSTANT_Utf8);
orchestration/class.cpp:        ? attr_signature -> Signature(pool)
orchestration/class.cpp:    return sig -> Length();
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        switch (attr -> Tag())
orchestration/class.cpp:                buffer.MarkInvalid("annotation default on non-abstract or non-public method");
orchestration/class.cpp:        buffer.MarkInvalid("no code for non-native, non-abstract method");
orchestration/class.cpp:    assert(pool[descriptor_index] -> Tag() == CPInfo::CONSTANT_Utf8);
orchestration/class.cpp:        ? attr_signature -> Signature(pool)
orchestration/class.cpp:    return sig -> Bytes();
orchestration/class.cpp:    assert(pool[descriptor_index] -> Tag() == CPInfo::CONSTANT_Utf8);
orchestration/class.cpp:        ? attr_signature -> Signature(pool)
orchestration/class.cpp:    return sig -> Length();
orchestration/class.cpp:    switch (name -> Length())
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_Code))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_StackMap))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_Signature))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_Synthetic))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_Deprecated))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_Exceptions))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_SourceFile))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_InnerClasses))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_ConstantValue))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_LineNumberTable))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_EnclosingMethod))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_AnnotationDefault))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(), StringConstant::U8S_LocalVariableTable))
orchestration/class.cpp:        if (! strcmp(name -> Bytes(),
orchestration/class.cpp:        if (! strcmp(name -> Bytes(),
orchestration/class.cpp:        if (! strcmp(name -> Bytes(),
orchestration/class.cpp:        if (! strcmp(name -> Bytes(),
orchestration/class.cpp:        if (! strcmp(name -> Bytes(),
orchestration/class.cpp:    if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Utf8)
orchestration/class.cpp:    if (! buffer.Pool()[constantvalue_index] -> Constant())
orchestration/class.cpp:    unsigned remaining = attribute_length - 12;
orchestration/class.cpp:    remaining -= code_length;
orchestration/class.cpp:    remaining -= exception_table_length * 8;
orchestration/class.cpp:    while (exception_table_length--)
orchestration/class.cpp:            buffer.Pool()[entry.catch_type] -> Tag() != CPInfo::CONSTANT_Class)
orchestration/class.cpp:    while (attributes_count--)
orchestration/class.cpp:        remaining -= 6 + attr -> AttributeLength();
orchestration/class.cpp:        switch (attr -> Tag())
orchestration/class.cpp:        else if (constant_pool[exception_table[i].catch_type] -> Tag() ==
orchestration/class.cpp:            constant_pool[exception_table[i].catch_type] ->
orchestration/class.cpp:        attributes[j] -> Print(constant_pool, 2);
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Class)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        if ((buffer.Pool()[entry.inner_class_info_index] -> Tag() !=
orchestration/class.cpp:             (buffer.Pool()[entry.outer_class_info_index] -> Tag() !=
orchestration/class.cpp:             (buffer.Pool()[entry.inner_name_index] -> Tag() !=
orchestration/class.cpp:    if (buffer.Pool()[sourcefile_index] -> Tag() != CPInfo::CONSTANT_Utf8)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        if ((buffer.Pool()[entry.name_index] -> Tag() !=
orchestration/class.cpp:            (buffer.Pool()[entry.descriptor_index] -> Tag() !=
orchestration/class.cpp:    if (buffer.Pool()[signature_index] -> Tag() != CPInfo::CONSTANT_Utf8)
orchestration/class.cpp:            buffer.Pool()[info] -> Tag() != CPInfo::CONSTANT_Class)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:    unsigned remaining = attribute_length - 2; // -2 for frame_count
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        remaining -= frames[index] -> FrameSize();
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Integer)
orchestration/class.cpp:            buffer.MarkInvalid("bad int-like annotation constant");
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Long)
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Float)
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Double)
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_String)
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Class)
orchestration/class.cpp:    if (buffer.Pool()[type_name_index] -> Tag() != CPInfo::CONSTANT_Class ||
orchestration/class.cpp:        buffer.Pool()[const_name_index] -> Tag() != CPInfo::CONSTANT_Utf8)
orchestration/class.cpp:    return 1 + attr_value -> Length(); // +1 tag
orchestration/class.cpp:    attr_value -> Put(out);
orchestration/class.cpp:    attr_value -> Print(pool);
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:    if (buffer.Pool()[type_index] -> Tag() != CPInfo::CONSTANT_Utf8)
orchestration/class.cpp:    while (i--)
orchestration/class.cpp:        if (buffer.Pool()[index] -> Tag() != CPInfo::CONSTANT_Utf8)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        length += value -> Length();
orchestration/class.cpp:        while (count--)
orchestration/class.cpp:            length += value -> Length();
orchestration/class.cpp:    if (default_value -> Length() != attribute_length)
orchestration/class.cpp:    if (buffer.Pool()[class_index] -> Tag() != CPInfo::CONSTANT_Class ||
orchestration/class.cpp:         (buffer.Pool()[name_and_type_index] -> Tag() !=
orchestration/class.cpp:        while (--count) // skip entry 0
orchestration/class.cpp:            if (entry -> Large())
orchestration/class.cpp:                count--; // skip next entry for eight-byte constants
orchestration/class.cpp:    if (constant_pool[this_class] -> Tag() != CPInfo::CONSTANT_Class)
orchestration/class.cpp:        constant_pool[super_class] -> Tag() != CPInfo::CONSTANT_Class)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        if (constant_pool[inter] -> Tag() != CPInfo::CONSTANT_Class)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:    while (count--)
orchestration/class.cpp:        switch (attr -> Tag())
orchestration/class.cpp:    Semantic* sem = unit_type -> semantic_environment -> sem;
orchestration/class.cpp:    Control& control = sem -> control;
orchestration/class.cpp:    const char* class_file_name = unit_type -> ClassName();
orchestration/class.cpp:        constant_pool[i] -> Put(output_buffer);
orchestration/class.cpp:        if (constant_pool[i] -> Large())
orchestration/class.cpp:            i++; // skip the next entry for eight-byte constants
orchestration/class.cpp:        fields[i] -> Put(output_buffer);
orchestration/class.cpp:        methods[i] -> Put(output_buffer);
orchestration/class.cpp:        attributes[i] -> Put(output_buffer);
orchestration/class.cpp:        sem -> ReportSemError(SemanticError::CANNOT_WRITE_FILE,
orchestration/class.cpp:                              unit_type -> declaration, name);
orchestration/class.cpp:                                         str - signature, tok);
orchestration/class.cpp:        signature--;
orchestration/class.cpp:    return type -> GetArrayType(this, num_dimensions);
orchestration/class.cpp:    if (! class_info -> Type())
orchestration/class.cpp:        const char* str = class_info -> TypeName(constant_pool);
orchestration/class.cpp:            class_info -> SetType(ProcessSignature(base_type, str, tok));
orchestration/class.cpp:            u2 length = class_info -> TypeNameLength(constant_pool);
orchestration/class.cpp:            class_info -> SetType(ReadTypeFromSignature(base_type, str,
orchestration/class.cpp:    return class_info -> Type();
orchestration/class.cpp:    TypeSymbol* inner_type = base_type -> FindTypeSymbol(name_symbol);
orchestration/class.cpp:        int length = base_type -> ExternalNameLength() + 1 +
orchestration/class.cpp:            name_symbol -> NameLength(); // +1 for $,... +1 for $
orchestration/class.cpp:        wcscpy(external_name, base_type -> ExternalName());
orchestration/class.cpp:        wcscat(external_name, name_symbol -> Name());
orchestration/class.cpp:        inner_type = base_type -> InsertNestedTypeSymbol(name_symbol);
orchestration/class.cpp:        inner_type -> outermost_type = base_type -> outermost_type;
orchestration/class.cpp:        inner_type -> supertypes_closure = new SymbolSet;
orchestration/class.cpp:        inner_type -> subtypes = new SymbolSet;
orchestration/class.cpp:        inner_type -> SetExternalIdentity(external_name_symbol);
orchestration/class.cpp:        inner_type -> SetOwner(base_type);
orchestration/class.cpp:        inner_type -> SetSignature(control);
orchestration/class.cpp:            Control::GetFile(control, base_type -> ContainingPackage(),
orchestration/class.cpp:            inner_type -> file_symbol = file_symbol;
orchestration/class.cpp:            inner_type -> SetLocation();
orchestration/class.cpp:            inner_type -> SetSymbolTable(1);
orchestration/class.cpp:            inner_type -> super = control.Object();
orchestration/class.cpp:            inner_type -> MarkBad();
orchestration/class.cpp:                           inner_type -> ContainingPackageName(),
orchestration/class.cpp:                           inner_type -> ExternalName());
orchestration/class.cpp:        if (type -> SourcePending())
orchestration/class.cpp:            control.ProcessHeaders(type -> file_symbol);
orchestration/class.cpp:        for (len = total_length - 1;
orchestration/class.cpp:             len >= 0 && signature[len] != U_SLASH; len--)
orchestration/class.cpp:            if (package -> directory.Length() == 0)
orchestration/class.cpp:                               package -> PackageName());
orchestration/class.cpp:            control.FindOrInsertName(name, total_length - (len + 1));
orchestration/class.cpp:        type = package -> FindTypeSymbol(name_symbol);
orchestration/class.cpp:            if (type -> SourcePending())
orchestration/class.cpp:                control.ProcessHeaders(type -> file_symbol);
orchestration/class.cpp:                file_symbol && file_symbol -> IsJava() &&
orchestration/class.cpp:                ! file_symbol -> IsZip())
orchestration/class.cpp:                                   base_type -> ContainingPackageName(),
orchestration/class.cpp:                                   base_type -> ExternalName(),
orchestration/class.cpp:                                   type -> ContainingPackageName(),
orchestration/class.cpp:                                   type -> ExternalName());
orchestration/class.cpp:    FileSymbol* file_symbol = type -> file_symbol;
orchestration/class.cpp:                << file_symbol -> FileName()
orchestration/class.cpp:    if (file_symbol -> IsZip())
orchestration/class.cpp:        if (zipfile -> Buffer() == NULL)
orchestration/class.cpp:            type -> SetSymbolTable(1);
orchestration/class.cpp:                type -> super = (type == control.Throwable()
orchestration/class.cpp:            type -> MarkBad();
orchestration/class.cpp:                           file_symbol -> PathSym() -> Name(),
orchestration/class.cpp:                           type -> ContainingPackageName(),
orchestration/class.cpp:                           type -> ExternalName());
orchestration/class.cpp:        else ProcessClassFile(type, zipfile -> Buffer(),
orchestration/class.cpp:                              file_symbol -> uncompressed_size, tok);
orchestration/class.cpp:            JikesAPI::getInstance() -> read(file_symbol -> FileName());
orchestration/class.cpp:            type -> SetSymbolTable(1);
orchestration/class.cpp:                type -> super = (type == control.Throwable()
orchestration/class.cpp:            type -> MarkBad();
orchestration/class.cpp:                           type -> ContainingPackageName(),
orchestration/class.cpp:                           type -> ExternalName());
orchestration/class.cpp:            unsigned size = classFile -> getBufferSize();
orchestration/class.cpp:            ProcessClassFile(type, classFile -> getBuffer(), size, tok);
orchestration/class.cpp:    assert(! type -> HeaderProcessed());
orchestration/class.cpp:    if (! class_data -> Valid())
orchestration/class.cpp:        const char* problem = class_data -> DescribeProblem();
orchestration/class.cpp:                       type -> ExternalName(),
orchestration/class.cpp:                       type -> file_symbol -> PathSym() -> Name(),
orchestration/class.cpp:                       type -> ContainingPackageName(),
orchestration/class.cpp:        type -> MarkBad();
orchestration/class.cpp:    const ConstantPool& pool = class_data -> Pool();
orchestration/class.cpp:    CPClassInfo* class_info = class_data -> ThisClass();
orchestration/class.cpp:    if (strcmp(type -> fully_qualified_name -> value,
orchestration/class.cpp:               class_info -> TypeName(pool)))
orchestration/class.cpp:        wchar_t* str = new wchar_t[class_info -> TypeNameLength(pool) + 1];
orchestration/class.cpp:        control.ConvertUtf8ToUnicode(str, class_info -> TypeName(pool),
orchestration/class.cpp:                                     class_info -> TypeNameLength(pool));
orchestration/class.cpp:                       type -> ExternalName(),
orchestration/class.cpp:                       type -> file_symbol -> PathSym() -> Name(),
orchestration/class.cpp:        type -> MarkBad();
orchestration/class.cpp:    type -> MarkHeaderProcessed();
orchestration/class.cpp:    type -> MarkConstructorMembersProcessed();
orchestration/class.cpp:    type -> MarkMethodMembersProcessed();
orchestration/class.cpp:    type -> MarkFieldMembersProcessed();
orchestration/class.cpp:    type -> MarkLocalClassProcessingCompleted();
orchestration/class.cpp:    type -> MarkSourceNoLongerPending();
orchestration/class.cpp:    if (! type -> IsNested() &&
orchestration/class.cpp:        type -> ContainingPackage() == control.UnnamedPackage())
orchestration/class.cpp:            control.unnamed_package_types.Image(type -> Identity());
orchestration/class.cpp:                           tok, type -> Name(), old_type -> FileLoc());
orchestration/class.cpp:    // On systems such as NT and Win-95 that are not case-sensitive,
orchestration/class.cpp://      assert(type_name_length - (n + 1) == type -> ExternalNameLength());
orchestration/class.cpp://      for (i = 0; i < type -> ExternalNameLength(); i++)
orchestration/class.cpp://          if (type_name[n + 1 + i] != type -> ExternalName()[i])
orchestration/class.cpp://      if (i < type -> ExternalNameLength())
orchestration/class.cpp://                         type -> ContainingPackageName(),
orchestration/class.cpp://                         type -> ExternalName(), name);
orchestration/class.cpp:    const InnerClassesAttribute* inner_classes = class_data -> InnerClasses();
orchestration/class.cpp:    type -> SetSymbolTable(class_data -> FieldsCount() +
orchestration/class.cpp:                           class_data -> MethodsCount() +
orchestration/class.cpp:                            ? inner_classes -> InnerClassesLength() : 0));
orchestration/class.cpp:    type -> SetFlags(class_data -> Flags());
orchestration/class.cpp:    type -> ResetACC_SUPER();
orchestration/class.cpp:    if (class_data -> Deprecated())
orchestration/class.cpp:        type -> MarkDeprecated();
orchestration/class.cpp:        for (i = inner_classes -> InnerClassesLength() - 1; i >= 0; i--)
orchestration/class.cpp:            const CPClassInfo* inner = inner_classes -> Inner(i, pool);
orchestration/class.cpp:            const CPClassInfo* outer = inner_classes -> Outer(i, pool);
orchestration/class.cpp:                type -> SetFlags(inner_classes -> Flags(i));
orchestration/class.cpp:                    type -> MarkAnonymous();
orchestration/class.cpp:            else if (outer == class_info && inner_classes -> Name(i, pool) &&
orchestration/class.cpp:                     inner_classes -> NameLength(i, pool))
orchestration/class.cpp:                type -> AddNestedTypeSignature((inner_classes ->
orchestration/class.cpp:                                               (inner_classes ->
orchestration/class.cpp:        (control.option.unzip || ! type -> file_symbol -> IsZip()))
orchestration/class.cpp:        type -> ProcessNestedTypeSignatures(this, tok);
orchestration/class.cpp:    class_info = class_data -> SuperClass();
orchestration/class.cpp:        type -> MarkBad();
orchestration/class.cpp:        type -> super = GetType(type, class_info, pool, tok);
orchestration/class.cpp:        if (type -> super -> ACC_INTERFACE() || type -> super -> IsArray() ||
orchestration/class.cpp:            type -> super -> Bad())
orchestration/class.cpp:            type -> MarkBad();
orchestration/class.cpp:            type -> supertypes_closure -> AddElement(type -> super);
orchestration/class.cpp:            type -> supertypes_closure -> Union(*type -> super ->
orchestration/class.cpp:    for (i = class_data -> InterfacesCount() - 1; i >= 0; i--)
orchestration/class.cpp:        class_info = class_data -> Interface(i);
orchestration/class.cpp:        type -> AddInterface(interf);
orchestration/class.cpp:        type -> supertypes_closure -> AddElement(interf);
orchestration/class.cpp:        type -> supertypes_closure -> Union(*interf -> supertypes_closure);
orchestration/class.cpp:        if (! interf -> ACC_INTERFACE())
orchestration/class.cpp:            type -> MarkBad();
orchestration/class.cpp:    for (i = class_data -> FieldsCount() - 1; i >= 0; i--)
orchestration/class.cpp:        const FieldInfo* field = class_data -> Field(i);
orchestration/class.cpp:        if (field -> ACC_SYNTHETIC())
orchestration/class.cpp:            continue; // No point reading these - the user can't access them.
orchestration/class.cpp:            control.ConvertUtf8ToUnicode(field -> Name(pool),
orchestration/class.cpp:                                         field -> NameLength(pool));
orchestration/class.cpp:        symbol -> SetOwner(type);
orchestration/class.cpp:        symbol -> MarkComplete();
orchestration/class.cpp:        symbol -> MarkInitialized();
orchestration/class.cpp:        symbol -> SetFlags(field -> Flags());
orchestration/class.cpp:        symbol -> SetSignatureString(field -> Signature(pool, control),
orchestration/class.cpp:                                     field -> SignatureLength(pool, control));
orchestration/class.cpp:        if (field -> Deprecated())
orchestration/class.cpp:            symbol -> MarkDeprecated();
orchestration/class.cpp:        const CPInfo* value = field -> ConstantValue(pool);
orchestration/class.cpp:            switch (value -> Tag())
orchestration/class.cpp:                symbol -> initial_value = control.int_pool.
orchestration/class.cpp:                    FindOrInsert(((CPIntegerInfo*) value) -> Value());
orchestration/class.cpp:                symbol -> initial_value = control.long_pool.
orchestration/class.cpp:                    FindOrInsert(((CPLongInfo*) value) -> Value());
orchestration/class.cpp:                symbol -> initial_value = control.float_pool.
orchestration/class.cpp:                    FindOrInsert(((CPFloatInfo*) value) -> Value());
orchestration/class.cpp:                symbol -> initial_value = control.double_pool.
orchestration/class.cpp:                    FindOrInsert(((CPDoubleInfo*) value) -> Value());
orchestration/class.cpp:                    symbol -> initial_value = control.Utf8_pool.
orchestration/class.cpp:                        FindOrInsert(str_value -> Bytes(pool),
orchestration/class.cpp:                                     str_value -> Length(pool));
orchestration/class.cpp:        type -> InsertVariableSymbol(symbol);
orchestration/class.cpp:            (control.option.unzip || ! type -> file_symbol -> IsZip()))
orchestration/class.cpp:            symbol -> ProcessVariableSignature(this, tok);
orchestration/class.cpp:    for (i = class_data -> MethodsCount() - 1; i >= 0; i--)
orchestration/class.cpp:        const MethodInfo* method = class_data -> Method(i);
orchestration/class.cpp:            control.ConvertUtf8ToUnicode(method -> Name(pool),
orchestration/class.cpp:                                         method -> NameLength(pool));
orchestration/class.cpp:        if (method -> ACC_SYNTHETIC() ||
orchestration/class.cpp:            continue; // No point reading these - the user can't access them.
orchestration/class.cpp:        symbol -> SetContainingType(type);
orchestration/class.cpp:        symbol -> SetFlags(method -> Flags());
orchestration/class.cpp:            FindOrInsert(method -> Signature(pool, control),
orchestration/class.cpp:                         method -> SignatureLength(pool, control));
orchestration/class.cpp:        symbol -> SetSignature(sig);
orchestration/class.cpp:        if (method -> Deprecated())
orchestration/class.cpp:            symbol -> MarkDeprecated();
orchestration/class.cpp:        const ExceptionsAttribute* throws_clause = method -> Exceptions();
orchestration/class.cpp:            for (int j = throws_clause -> NumberOfExceptions() - 1;
orchestration/class.cpp:                 j >= 0; j--)
orchestration/class.cpp:                    throws_clause -> Exception(j, pool);
orchestration/class.cpp:                symbol ->
orchestration/class.cpp:                    AddThrowsSignature(exception -> TypeName(pool),
orchestration/class.cpp:                                       exception -> TypeNameLength(pool));
orchestration/class.cpp:        type -> InsertMethodSymbol(symbol);
orchestration/class.cpp:            (control.option.unzip || ! type -> file_symbol -> IsZip()))
orchestration/class.cpp:            symbol -> ProcessMethodSignature(this, tok);
orchestration/class.cpp:        (control.option.unzip || ! type -> file_symbol -> IsZip()))
orchestration/class.cpp:        for (i = pool.Length() - 1; i > 0; i--)
orchestration/class.cpp:            if (pool[i] -> Tag() == CPInfo::CONSTANT_Class)
orchestration/class.cpp:            else if (pool[i] -> Tag() == CPInfo::CONSTANT_NameAndType)
orchestration/class.cpp:                    ((CPNameAndTypeInfo*) pool[i]) -> Signature(pool);
orchestration/class.cpp:    type -> CompressSpace();
class.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
class.h:    // If this UTF8 was valid, then Bytes returns a NULL-terminated string
class.h:    // NULL-terminated sequence, with no embedded NULLs.
class.h:        return constant_pool[name_index] -> Tag() == CONSTANT_Utf8;
class.h:        assert(constant_pool[name_index] -> Tag() == CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[name_index]) -> Bytes();
class.h:        assert(constant_pool[name_index] -> Tag() == CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[name_index]) -> Length();
class.h:        if (constant_pool[name_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[name_index] -> Describe(constant_pool);
class.h:        if (constant_pool[name_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[name_index] -> Describe(constant_pool);
class.h:        return constant_pool[class_index] -> Tag() == CONSTANT_Class &&
class.h:            (constant_pool[name_and_type_index] -> Tag() ==
class.h:        if (constant_pool[class_index] -> Tag() == CONSTANT_Class)
class.h:            constant_pool[class_index] -> Describe(constant_pool);
class.h:        if (constant_pool[name_and_type_index] -> Tag() ==
class.h:            constant_pool[name_and_type_index] -> Describe(constant_pool);
class.h:        if (constant_pool[class_index] -> Tag() == CONSTANT_Class)
class.h:            constant_pool[class_index] -> Describe(constant_pool);
class.h:        if (constant_pool[name_and_type_index] -> Tag() ==
class.h:            constant_pool[name_and_type_index] -> Describe(constant_pool);
class.h:        return constant_pool[string_index] -> Tag() == CONSTANT_Utf8;
class.h:        assert(constant_pool[string_index] -> Tag() == CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[string_index]) -> Bytes();
class.h:        assert(constant_pool[string_index] -> Tag() == CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[string_index]) -> Length();
class.h:        if (constant_pool[string_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[string_index] -> Describe(constant_pool);
class.h:        if (constant_pool[string_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[string_index] -> Describe(constant_pool);
class.h:        assert(constant_pool[descriptor_index] -> Tag() ==
class.h:        return ((const CPUtf8Info*) constant_pool[descriptor_index]) ->
class.h:        assert(constant_pool[descriptor_index] -> Tag() ==
class.h:        return ((const CPUtf8Info*) constant_pool[descriptor_index]) ->
class.h:        return constant_pool[name_index] -> Tag() == CONSTANT_Utf8 &&
class.h:            constant_pool[descriptor_index] -> Tag() == CONSTANT_Utf8;
class.h:        if (constant_pool[name_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[name_index] -> Describe(constant_pool);
class.h:        if (constant_pool[descriptor_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[descriptor_index] -> Describe(constant_pool);
class.h:        if (constant_pool[name_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[name_index] -> Describe(constant_pool);
class.h:        if (constant_pool[descriptor_index] -> Tag() == CONSTANT_Utf8)
class.h:            constant_pool[descriptor_index] -> Describe(constant_pool);
class.h:        if (constant_pool[attribute_name_index] -> Tag() ==
class.h:            constant_pool[attribute_name_index] -> Describe(constant_pool);
class.h:// An unknown attribute - we are allowed to read them from existing .class
class.h:        assert(constant_pool[constantvalue_index] -> Constant());
class.h:        if (constant_pool[constantvalue_index] -> Constant())
class.h:            constant_pool[constantvalue_index] -> Describe(constant_pool);
class.h:        assert(constant_pool[exception_index_table[i]] -> Tag() ==
class.h:            if (constant_pool[exception_index_table[i]] -> Tag() ==
class.h:                constant_pool[exception_index_table[i]] ->
class.h:        assert(constant_pool[classes[i].inner_class_info_index] -> Tag() ==
class.h:               (constant_pool[classes[i].outer_class_info_index] -> Tag() ==
class.h:               (constant_pool[classes[i].inner_name_index] -> Tag() ==
class.h:                constant_pool[classes[i].inner_name_index]) -> Bytes();
class.h:               (constant_pool[classes[i].inner_name_index] -> Tag() ==
class.h:               constant_pool[classes[i].inner_name_index]) -> Length() : 0;
class.h:            if (constant_pool[classes[i].inner_class_info_index] -> Tag() ==
class.h:                constant_pool[classes[i].inner_class_info_index] ->
class.h:            else if (constant_pool[classes[i].outer_class_info_index] ->
class.h:                constant_pool[classes[i].outer_class_info_index] ->
class.h:            else if (constant_pool[classes[i].inner_name_index] -> Tag() ==
class.h:                constant_pool[classes[i].inner_name_index] ->
class.h:// Valid for classes, methods, and fields, this marks a compiler-generated
class.h:        assert(constant_pool[sourcefile_index] -> Tag() ==
class.h:        return ((CPUtf8Info*) constant_pool[sourcefile_index]) -> Bytes();
class.h:        assert(constant_pool[sourcefile_index] -> Tag() ==
class.h:        return ((CPUtf8Info*) constant_pool[sourcefile_index]) -> Length();
class.h:        if (constant_pool[sourcefile_index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:            constant_pool[sourcefile_index] -> Describe(constant_pool);
class.h:        while(--i > 0 && line_number_table[i].start_pc > max_pc)
class.h:            entry.length = end - start;
class.h:            if (constant_pool[index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:                constant_pool[index] -> Describe(constant_pool);
class.h:            if (constant_pool[index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:                constant_pool[index] -> Describe(constant_pool);
class.h:        assert(constant_pool[signature_index] -> Tag() ==
class.h:        if (constant_pool[signature_index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:            constant_pool[signature_index] -> Describe(constant_pool);
class.h:                    if (constant_pool[info] -> Tag() == CPInfo::CONSTANT_Class)
class.h:                        constant_pool[info] -> Describe(constant_pool);
class.h:        attribute_length += frame -> FrameSize();
class.h:            frames[i] -> Put(out);
class.h:            frames[i] -> Print(constant_pool);
class.h:// Valid only on non-abstract non-native methods, this is the method
class.h:        code.Reset(code.Length() - count);
class.h:        attribute_length -= count;
class.h:        attribute_length += 6 + attribute -> AttributeLength();
class.h:        switch (attribute -> Tag())
class.h:            attributes[i] -> Put(out);
class.h:        pool[index] -> Describe(pool);
class.h:            if (pool[index] -> Tag() == CPInfo::CONSTANT_Integer)
class.h:                i4 value = ((CPIntegerInfo*) pool[index]) -> Value();
class.h:            if (pool[index] -> Tag() == CPInfo::CONSTANT_Integer)
class.h:                i4 value = ((CPIntegerInfo*) pool[index]) -> Value();
class.h:            if (pool[index] -> Tag() == CPInfo::CONSTANT_Integer)
class.h:                i4 value = ((CPIntegerInfo*) pool[index]) -> Value();
class.h:                if (value < -128 || value > 127)
class.h:            if (pool[index] -> Tag() == CPInfo::CONSTANT_Integer)
class.h:                i4 value = ((CPIntegerInfo*) pool[index]) -> Value();
class.h:                if (value < -32768 || value > 32767)
class.h:            if (pool[index] -> Tag() != CPInfo::CONSTANT_Integer)
class.h:            if (pool[index] -> Tag() != CPInfo::CONSTANT_Long)
class.h:            if (pool[index] -> Tag() != CPInfo::CONSTANT_Float)
class.h:            if (pool[index] -> Tag() != CPInfo::CONSTANT_Double)
class.h:            if (pool[index] -> Tag() != CPInfo::CONSTANT_String)
class.h:            if (pool[index] -> Tag() != CPInfo::CONSTANT_Class)
class.h:            assert(false && "invalid constant-valued attribute");
class.h:        pool[type_name_index] -> Describe(pool);
class.h:        if (pool[type_name_index] -> Tag() != CPInfo::CONSTANT_Class)
class.h:        pool[const_name_index] -> Describe(pool);
class.h:        if (pool[type_name_index] -> Tag() != CPInfo::CONSTANT_Utf8)
class.h:        while (i--)
class.h:        len += value -> Length();
class.h:            values[i] -> Put(out);
class.h:            values[0] -> Print(pool);
class.h:            values[i] -> Print(pool);
class.h:        while (i--)
class.h:        while (i--)
class.h:            size += 2 + components[i].component_value -> Length();
class.h:        while (i--)
class.h:            components[i].component_value -> Put(out);
class.h:        pool[type_index] -> Describe(pool);
class.h:            pool[components[0].component_name_index] -> Describe(pool);
class.h:            components[0].component_value -> Print(pool);
class.h:            pool[components[i].component_name_index] -> Describe(pool);
class.h:            components[i].component_value -> Print(pool);
class.h:        while (i--)
class.h:        attribute_length += annotation -> Length();
class.h:            annotations[i] -> Put(out);
class.h:            annotations[i] -> Print(constant_pool);
class.h:        for (unsigned i = num_parameters; i--; )
class.h:            for (unsigned j = parameters[i].Length(); j--; )
class.h:        attribute_length += annotation -> Length();
class.h:                parameters[i][j] -> Put(out);
class.h:                parameters[i][j] -> Print(constant_pool);
class.h:                        value -> Length())
class.h:        default_value -> Put(out);
class.h:        default_value -> Print(constant_pool);
class.h:        if (constant_pool[class_index] -> Tag() == CPInfo::CONSTANT_Class &&
class.h:             (constant_pool[name_and_type_index] -> Tag() ==
class.h:            constant_pool[class_index] -> Describe(constant_pool);
class.h:                constant_pool[name_and_type_index] -> Describe(constant_pool);
class.h:        assert(constant_pool[name_index] -> Tag() == CPInfo::CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[name_index]) -> Bytes();
class.h:        assert(constant_pool[name_index] -> Tag() == CPInfo::CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[name_index]) -> Length();
class.h:        switch (attribute -> Tag())
class.h:        return attr_constantvalue ? attr_constantvalue -> Value(constant_pool)
class.h:            attributes[i] -> Put(out);
class.h:        if (constant_pool[name_index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:            constant_pool[name_index] -> Describe(constant_pool);
class.h:        if (constant_pool[descriptor_index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:            constant_pool[descriptor_index] -> Describe(constant_pool);
class.h:            attributes[i] -> Print(constant_pool);
class.h:        assert(constant_pool[name_index] -> Tag() == CPInfo::CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[name_index]) -> Bytes();
class.h:        assert(constant_pool[name_index] -> Tag() == CPInfo::CONSTANT_Utf8);
class.h:        return ((const CPUtf8Info*) constant_pool[name_index]) -> Length();
class.h:        switch (attribute -> Tag())
class.h:            attributes[i] -> Put(out);
class.h:        if (constant_pool[name_index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:            constant_pool[name_index] -> Describe(constant_pool);
class.h:        if (constant_pool[descriptor_index] -> Tag() == CPInfo::CONSTANT_Utf8)
class.h:            constant_pool[descriptor_index] -> Describe(constant_pool);
class.h:            attributes[i] -> Print(constant_pool);
class.h:    // cp_info constant_pool[constant_pool_count - 1]
class.h:        return constant_pool[this_class] -> Tag() == CPInfo::CONSTANT_Class
class.h:        return constant_pool[super_class] -> Tag() == CPInfo::CONSTANT_Class
class.h:        return constant_pool[interfaces[i]] -> Tag() == CPInfo::CONSTANT_Class
class.h:        switch (attribute -> Tag())
class.h:        return attr_sourcefile ? attr_sourcefile -> SourceFile(constant_pool)
class.h:            ? attr_sourcefile -> SourceFileLength(constant_pool) : 0;
class.h:            len = buffer_tail - buffer;
class.h:        for (i = 32; i; i -= 4)
class.h:            char c = (magic >> (i - 4)) & 0xf;
class.h:            Coutput << (char) (c < 10 ? c + '0' : c + 'a' - 10);
class.h:            constant_pool[i] -> Print(constant_pool);
class.h:        if (constant_pool[this_class] -> Tag() == CPInfo::CONSTANT_Class)
class.h:            constant_pool[this_class] -> Describe(constant_pool);
class.h:        else if (constant_pool[super_class] -> Tag() == CPInfo::CONSTANT_Class)
class.h:            constant_pool[super_class] -> Describe(constant_pool);
class.h:            if (constant_pool[interfaces[i]] -> Tag() ==
class.h:                constant_pool[interfaces[i]] -> Describe(constant_pool);
class.h:            fields[i] -> Print(constant_pool);
class.h:            methods[i] -> Print(constant_pool);
class.h:            attributes[i] -> Print(constant_pool);
Binary file class.o matches
code.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
code.cpp:// DO NOT MODIFY THIS FILE - it is generated using gencode.java.
declarations/code.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/code.h:// DO NOT MODIFY THIS FILE - it is generated using gencode.java.
declarations/code.h:    // with some self-explanatory functions defined on CODE.
declarations/code.h:        return (hi << 10) + lo + (0x10000 - (0xd800 << 10) - 0xdc00);
declarations/code.h:        return c - (c <= U_9 ? U_0 : c < U_a ? U_A - 10 : U_a - 10);
Binary file code.o matches
config.h:/* Define as nonzero to enable experimental `-source 1.5' features. */
config.h:/* defined if bool is a built-in C++ type */
config.h:/* Defined if Jikes supports -encoding for input files. */
config.h:/* Define to 1 if you have the `icu-uc' library (-licu-uc). */
config.h:/* define if the compiler supports Run-Time Type Identification */
config.h:/* A string to indicate the release of jikes: Version 1.19 - 1 Feb 2004 */
config.h:#define JIKES_VERSION_STRING "Version 1.22 - 3 October 2004"
config.h.in:/* Define as nonzero to enable experimental `-source 1.5' features. */
config.h.in:/* defined if bool is a built-in C++ type */
config.h.in:/* Defined if Jikes supports -encoding for input files. */
config.h.in:/* Define to 1 if you have the `icu-uc' library (-licu-uc). */
config.h.in:/* define if the compiler supports Run-Time Type Identification */
config.h.in:/* A string to indicate the release of jikes: Version 1.19 - 1 Feb 2004 */
orchestration/control.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
orchestration/control.cpp:        scanner -> Scan(file_symbol);
orchestration/control.cpp:        if (file_symbol -> lex_stream) // did we have a successful scan!
orchestration/control.cpp:                parser -> PackageHeaderParse(file_symbol -> lex_stream,
orchestration/control.cpp:            ast_pool -> Reset();
orchestration/control.cpp:                    << file_symbol -> FileName();
orchestration/control.cpp:        main_file_clone = input_files[0] -> Clone();
orchestration/control.cpp:        FileSymbol* file_symbol = classpath[dot_classpath_index] ->
orchestration/control.cpp:            RootDirectory() -> InsertFileSymbol(dot_name_symbol);
orchestration/control.cpp:        file_symbol -> directory_symbol = classpath[dot_classpath_index] ->
orchestration/control.cpp:        file_symbol -> SetJava();
orchestration/control.cpp:        main_file_clone = file_symbol -> Clone();
orchestration/control.cpp:    main_file_clone -> semantic = new Semantic(*this, main_file_clone);
orchestration/control.cpp:    system_semantic = main_file_clone -> semantic;
orchestration/control.cpp:    scanner -> SetUp(main_file_clone);
orchestration/control.cpp:        system_semantic -> ReportSemError(SemanticError::NO_CURRENT_DIRECTORY,
orchestration/control.cpp:        system_semantic ->
orchestration/control.cpp:        system_semantic -> ReportSemError(SemanticError::CANNOT_OPEN_ZIP_FILE,
orchestration/control.cpp:        system_semantic -> ReportSemError(SemanticError::IO_WARNING, BAD_TOKEN,
orchestration/control.cpp:        system_semantic -> ReportSemError(SemanticError::IO_ERROR, BAD_TOKEN,
orchestration/control.cpp:    if (lang_package -> directory.Length() == 0)
orchestration/control.cpp:        system_semantic -> ReportSemError(SemanticError::PACKAGE_NOT_FOUND,
orchestration/control.cpp:    // When the -d option is specified, create the relevant
orchestration/control.cpp:                system_semantic -> ReportSemError(SemanticError::CANNOT_OPEN_DIRECTORY,
orchestration/control.cpp:        system_semantic -> ReportSemError(SemanticError::BAD_INPUT_FILE,
orchestration/control.cpp:        system_semantic -> ReportSemError(SemanticError::UNREADABLE_INPUT_FILE,
orchestration/control.cpp:    if (system_semantic -> NumErrors() > 0)
orchestration/control.cpp:        system_semantic -> PrintMessages();
orchestration/control.cpp:        return_code = system_semantic -> return_code;
orchestration/control.cpp:        system_semantic -> PrintMessages();
orchestration/control.cpp:        system_semantic -> PrintMessages();
orchestration/control.cpp:        if (system_semantic -> return_code > 0 ||
orchestration/control.cpp:                system_semantic -> return_code = 0;
orchestration/control.cpp:                    system_semantic ->
orchestration/control.cpp:                    system_semantic ->
orchestration/control.cpp:                    LexStream* lex_stream = file_symbol -> lex_stream;
orchestration/control.cpp:                        AstPackageDeclaration* package_declaration = parser ->
orchestration/control.cpp:                        ast_pool -> Reset();
orchestration/control.cpp:                system_semantic -> PrintMessages();
orchestration/control.cpp:                if (system_semantic -> return_code > 0 ||
orchestration/control.cpp:                        char* java_name = file_symbol -> FileName();
orchestration/control.cpp:                        for (i = 0; i < file_symbol -> types.Length(); i++)
orchestration/control.cpp:                            TypeSymbol* type = file_symbol -> types[i];
orchestration/control.cpp:                                    type -> SignatureString());
orchestration/control.cpp:                            for (static_parent = (TypeSymbol*) type -> static_parents -> FirstElement();
orchestration/control.cpp:                                 static_parent = (TypeSymbol*) type -> static_parents -> NextElement())
orchestration/control.cpp:                                if (! type -> parents ->
orchestration/control.cpp:                                            static_parent -> SignatureString());
orchestration/control.cpp:                                    if (static_parent -> file_symbol &&
orchestration/control.cpp:                                        static_parent -> file_symbol -> IsClass())
orchestration/control.cpp:                            for (parent = (TypeSymbol*) type -> parents -> FirstElement();
orchestration/control.cpp:                                 parent = (TypeSymbol*) type -> parents -> NextElement())
orchestration/control.cpp:                                        parent -> SignatureString());
orchestration/control.cpp:                                if (parent -> file_symbol &&
orchestration/control.cpp:                                    parent -> file_symbol -> IsClass())
orchestration/control.cpp:                        char* class_name = type -> file_symbol -> FileName();
orchestration/control.cpp:                                type -> SignatureString());
orchestration/control.cpp:                candidates -> Union(input_class_file_set);
orchestration/control.cpp:                dependence_checker -> PartialOrder();
orchestration/control.cpp:                dependence_checker -> OutputDependences();
orchestration/control.cpp:        name_symbol = FindOrInsertName(package_name, length - start);
orchestration/control.cpp:            package_symbol -> FindPackageSymbol(name_symbol);
orchestration/control.cpp:                package_symbol -> InsertPackageSymbol(name_symbol);
orchestration/control.cpp:    DirectorySymbol* directory_symbol = path_symbol -> RootDirectory();
orchestration/control.cpp:                                                   end - start);
orchestration/control.cpp:            directory_symbol -> FindDirectorySymbol(name_symbol);
orchestration/control.cpp:        directory_symbol = system_table ->
orchestration/control.cpp:            directory_symbol -> ReadDirectory();
orchestration/control.cpp:            system_table -> InsertDirectorySymbol(status.st_dev,
orchestration/control.cpp:                classpath[dot_classpath_index] -> RootDirectory();
orchestration/control.cpp:                        if (directory_symbol -> Identity() == dot_name_symbol ||
orchestration/control.cpp:                            directory_symbol -> Identity() == dot_dot_name_symbol)
orchestration/control.cpp:                                directory_symbol -> FindDirectorySymbol(dot_dot_name_symbol);
orchestration/control.cpp:                                    directory_symbol -> InsertDirectorySymbol(dot_dot_name_symbol,
orchestration/control.cpp:                        else directory_symbol = directory_symbol -> owner -> DirectoryCast();
orchestration/control.cpp:                            directory_symbol -> FindDirectorySymbol(name_symbol);
orchestration/control.cpp:                                directory_symbol -> InsertDirectorySymbol(name_symbol,
orchestration/control.cpp:                classpath[dot_classpath_index] -> RootDirectory())
orchestration/control.cpp:                system_table -> InsertDirectorySymbol(status.st_dev,
orchestration/control.cpp:                directory_symbol -> ReadDirectory();
orchestration/control.cpp:        classpath[dot_classpath_index] -> RootDirectory();
orchestration/control.cpp:                    name_length = length - start;
orchestration/control.cpp:            directory_symbol -> FindDirectorySymbol(name_symbol);
orchestration/control.cpp:                directory_symbol -> InsertDirectorySymbol(name_symbol,
orchestration/control.cpp:                if (directory_symbol -> Identity() == dot_name_symbol ||
orchestration/control.cpp:                    directory_symbol -> Identity() == dot_dot_name_symbol)
orchestration/control.cpp:                        directory_symbol -> FindDirectorySymbol(dot_dot_name_symbol);
orchestration/control.cpp:                            directory_symbol -> InsertDirectorySymbol(dot_dot_name_symbol,
orchestration/control.cpp:                else directory_symbol = directory_symbol -> owner -> DirectoryCast();
orchestration/control.cpp:                    directory_symbol -> FindDirectorySymbol(name_symbol);
orchestration/control.cpp:                        directory_symbol -> InsertDirectorySymbol(name_symbol,
orchestration/control.cpp:    directory_symbol -> ReadDirectory();
orchestration/control.cpp:    // filenames should remain in arguments - constructing the Option should
orchestration/control.cpp:                (! FileSymbol::IsJavaSuffix(&file_name[file_name_length - FileSymbol::java_suffix_length])))
orchestration/control.cpp:                                              file_name_length - FileSymbol::java_suffix_length);
orchestration/control.cpp:    int length = file_name_symbol -> Utf8NameLength() +
orchestration/control.cpp:    strcpy(java_name, file_name_symbol -> Utf8Name());
orchestration/control.cpp:    DirectoryEntry* entry = directory_symbol -> FindEntry(java_name, length);
orchestration/control.cpp:        file_symbol = directory_symbol -> FindFileSymbol(file_name_symbol);
orchestration/control.cpp:                directory_symbol -> InsertFileSymbol(file_name_symbol);
orchestration/control.cpp:            file_symbol -> directory_symbol = directory_symbol;
orchestration/control.cpp:            file_symbol -> SetJava();
orchestration/control.cpp:        file_symbol -> mtime = entry -> Mtime();
orchestration/control.cpp:    for (len = name_length - 1; len >= 0 && name[len] != U_SLASH; len--)
orchestration/control.cpp:                                        name_length - (len + 1));
orchestration/control.cpp:    for (len = name_length - 1;
orchestration/control.cpp:         len--);
orchestration/control.cpp:                                        name_length - (len + 1));
orchestration/control.cpp:        else if (classpath[i] -> IsZip())
orchestration/control.cpp:                    directory_symbol -> FindFileSymbol(file_name_symbol);
orchestration/control.cpp:                if (file_symbol && file_symbol -> IsJava())
orchestration/control.cpp:    if (name -> base_opt)
orchestration/control.cpp:        package = FindOrInsertPackage(lex_stream, name -> base_opt);
orchestration/control.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
orchestration/control.cpp:        PackageSymbol* subpackage = package -> FindPackageSymbol(name_symbol);
orchestration/control.cpp:            subpackage = package -> InsertPackageSymbol(name_symbol);
orchestration/control.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
orchestration/control.cpp:    if (file_symbol -> semantic)
orchestration/control.cpp:                << file_symbol -> FileName()
orchestration/control.cpp:    if (! file_symbol -> lex_stream)
orchestration/control.cpp:         scanner -> Scan(file_symbol);
orchestration/control.cpp:    else file_symbol -> lex_stream -> Reset();
orchestration/control.cpp:    if (file_symbol -> lex_stream) // do we have a successful scan!
orchestration/control.cpp:        if (! file_symbol -> compilation_unit)
orchestration/control.cpp:            file_symbol -> compilation_unit =
orchestration/control.cpp:                parser -> HeaderParse(file_symbol -> lex_stream);
orchestration/control.cpp:        if (file_symbol -> compilation_unit)
orchestration/control.cpp:            assert(! file_symbol -> semantic);
orchestration/control.cpp:            if (! file_symbol -> package)
orchestration/control.cpp:                                          file_symbol -> compilation_unit -> package_declaration_opt);
orchestration/control.cpp:            file_symbol -> semantic = new Semantic(*this, file_symbol);
orchestration/control.cpp:            semantic.Next() = file_symbol -> semantic;
orchestration/control.cpp:            file_symbol -> semantic -> ProcessTypeNames();
orchestration/control.cpp:                type -> ProcessTypeHeaders();
orchestration/control.cpp:                type -> semantic_environment -> sem ->
orchestration/control.cpp:            type -> ProcessMembers();
orchestration/control.cpp:    for (unsigned j = 0; j < type -> NumAnonymousTypes(); j++)
orchestration/control.cpp:        CollectTypes(type -> AnonymousType(j), types);
orchestration/control.cpp:    if (type -> local)
orchestration/control.cpp:        for (TypeSymbol* local_type = (TypeSymbol*) type -> local -> FirstElement();
orchestration/control.cpp:             local_type = (TypeSymbol*) type -> local -> NextElement())
orchestration/control.cpp:    if (type -> non_local)
orchestration/control.cpp:        for (TypeSymbol* non_local_type = (TypeSymbol*) type -> non_local -> FirstElement();
orchestration/control.cpp:             non_local_type = (TypeSymbol*) type -> non_local -> NextElement())
orchestration/control.cpp:    Semantic* sem = type -> semantic_environment -> sem;
orchestration/control.cpp:    if (type -> declaration &&
orchestration/control.cpp:        ! sem -> compilation_unit -> BadCompilationUnitCast())
orchestration/control.cpp:        if (! type -> file_symbol -> IsZip())
orchestration/control.cpp:            int length = type -> Utf8NameLength() +
orchestration/control.cpp:            strcpy(classfile_name, type -> Utf8Name());
orchestration/control.cpp:                type -> file_symbol -> OutputDirectory();
orchestration/control.cpp:                directory -> FindCaseInsensitiveEntry(classfile_name, length);
orchestration/control.cpp:            // case-sensitive test) to the name of the type, issue an
orchestration/control.cpp:            if (entry && strcmp(classfile_name, entry -> name) != 0)
orchestration/control.cpp:                wchar_t* entry_name = new wchar_t[entry -> length + 1];
orchestration/control.cpp:                    entry_name[i] = entry -> name[i];
orchestration/control.cpp:                entry_name[entry -> length] = U_NULL;
orchestration/control.cpp:                sem -> ReportSemError(SemanticError::FILE_FILE_CONFLICT,
orchestration/control.cpp:                                      type -> declaration -> identifier_token,
orchestration/control.cpp:                                      type -> Name(), entry_name,
orchestration/control.cpp:                                      directory -> Name());
orchestration/control.cpp:        if (! parser -> InitializerParse(sem -> lex_stream,
orchestration/control.cpp:                                         type -> declaration))
orchestration/control.cpp:            sem -> compilation_unit -> MarkBad();
orchestration/control.cpp:            type -> CompleteSymbolTable();
orchestration/control.cpp:            if (! parser -> BodyParse(sem -> lex_stream, type -> declaration))
orchestration/control.cpp:                sem -> compilation_unit -> MarkBad();
orchestration/control.cpp:            else type -> ProcessExecutableBodies();
orchestration/control.cpp:        if (sem -> NumErrors() == 0 &&
orchestration/control.cpp:            sem -> lex_stream -> NumBadTokens() == 0 &&
orchestration/control.cpp:            ! sem -> compilation_unit -> BadCompilationUnitCast())
orchestration/control.cpp:                for (unsigned k = 0; k < types -> Length(); k++)
orchestration/control.cpp:                    type -> file_symbol -> SetFileNameLiteral(this);
orchestration/control.cpp:                    code -> GenerateCode();
orchestration/control.cpp:                if (sem -> NumErrors() == 0)
orchestration/control.cpp:                    for (unsigned k = 0; k < types -> Length(); k++)
orchestration/control.cpp:                        delete type -> semantic_environment;
orchestration/control.cpp:                        type -> semantic_environment = NULL;
orchestration/control.cpp:                        type -> declaration -> semantic_environment = NULL;
orchestration/control.cpp:    sem -> types_to_be_processed.RemoveElement(type);
orchestration/control.cpp:    if (sem -> types_to_be_processed.Size() == 0)
orchestration/control.cpp:            CleanUp(sem -> source_file_symbol);
orchestration/control.cpp:    if (sem -> NumErrors() != 0 ||
orchestration/control.cpp:        sem -> lex_stream -> NumBadTokens() != 0 ||
orchestration/control.cpp:        sem -> compilation_unit -> BadCompilationUnitCast())
orchestration/control.cpp:         i < sem -> compilation_unit -> NumImportDeclarations(); ++i)
orchestration/control.cpp:            sem -> compilation_unit -> ImportDeclaration(i);
orchestration/control.cpp:        Symbol* symbol = import_declaration -> name -> symbol;
orchestration/control.cpp:        if (import_declaration -> star_token_opt)
orchestration/control.cpp:            PackageSymbol* package = symbol -> PackageCast();
orchestration/control.cpp:                ! sem -> referenced_package_imports.IsElement(package))
orchestration/control.cpp:                sem -> ReportSemError(SemanticError::UNUSED_PACKAGE_IMPORT,
orchestration/control.cpp:                                      package -> PackageName());
orchestration/control.cpp:            TypeSymbol* import_type = symbol -> TypeCast();
orchestration/control.cpp:                ! sem -> referenced_type_imports.IsElement(import_type))
orchestration/control.cpp:                sem -> ReportSemError(SemanticError::UNUSED_TYPE_IMPORT,
orchestration/control.cpp:                                      import_type -> ContainingPackage() -> PackageName(),
orchestration/control.cpp:                                      import_type -> ExternalName());
orchestration/control.cpp:    file_symbol -> package = (package_declaration
orchestration/control.cpp:                              ? FindOrInsertPackage(file_symbol -> lex_stream,
orchestration/control.cpp:                                                    package_declaration -> name)
orchestration/control.cpp:    for (unsigned i = 0; i < file_symbol -> lex_stream -> NumTypes(); i++)
orchestration/control.cpp:        TokenIndex identifier_token = file_symbol -> lex_stream ->
orchestration/control.cpp:            Next(file_symbol -> lex_stream -> Type(i));
orchestration/control.cpp:        if (file_symbol -> lex_stream -> Kind(identifier_token) ==
orchestration/control.cpp:                file_symbol -> lex_stream -> NameSymbol(identifier_token);
orchestration/control.cpp:            if (! file_symbol -> package -> FindTypeSymbol(name_symbol))
orchestration/control.cpp:                TypeSymbol* type = file_symbol -> package ->
orchestration/control.cpp:                type -> file_symbol = file_symbol;
orchestration/control.cpp:                type -> outermost_type = type;
orchestration/control.cpp:                type -> supertypes_closure = new SymbolSet;
orchestration/control.cpp:                type -> subtypes = new SymbolSet;
orchestration/control.cpp:                type -> SetOwner(file_symbol -> package);
orchestration/control.cpp:                type -> SetSignature(*this);
orchestration/control.cpp:                type -> MarkSourcePending();
orchestration/control.cpp:                    unnamed_package_types.Image(type -> Identity()) == NULL)
orchestration/control.cpp:    Semantic* sem = file_symbol -> semantic;
orchestration/control.cpp:            sem -> lex_stream -> Reset(); // rewind input and ...
orchestration/control.cpp:            sem -> lex_stream -> Dump();  // dump it!
orchestration/control.cpp:            sem -> compilation_unit -> Print(*sem -> lex_stream);
orchestration/control.cpp:                sem -> compilation_unit -> debug_unparse = true;
orchestration/control.cpp:            sem -> compilation_unit -> Unparse(sem -> lex_stream,
orchestration/control.cpp:        sem -> PrintMessages();
orchestration/control.cpp:        if (sem -> return_code > 0)
orchestration/control.cpp:        file_symbol -> CleanUp();
declarations/control.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/control.h:        if (! name_symbol -> Utf8_literal)
declarations/control.h:            name_symbol -> Utf8_literal =
declarations/control.h:                ConvertUnicodeToUtf8(name_symbol -> Name());
Binary file control.o matches
cscope.out:cscope 15 $HOME/sandbox/jikes/jikes-1.22/src               0000802132
cscope.out: & -�cc�=�
cscope.out:710 --
cscope.out: -> LeftToken(); }
cscope.out: -> RightToken(); }
cscope.out: ? block_��em�t�-> 
cscope.out: ? def�ed_v��bˠ-> 
cscope.out: ? ba�_݈-> 
cscope.out: -> 
cscope.out: -> LeftToken(); }
cscope.out: -> 
cscope.out: -> IdentifierToken(); }
cscope.out: ? bounds_݈-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? ba�_݈-> 
cscope.out: -> LeftToken();
cscope.out: ?�y�_�gum�ts_݈-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> RightToken(); }
cscope.out: ? memb�_v�ue_���-> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(0) -> LeftToken(); }
cscope.out:(�- 1�-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: ? imp�t_de���iڠ-> 
cscope.out: ?�y�_de���iڠ-> 
cscope.out: -> 
cscope.out:(0�-> 
cscope.out:(0�-> 
cscope.out:(�- 1�-> 
cscope.out:() - 1) ->
cscope.out: -> 
cscope.out: -> 
cscope.out: ? in���_v��bˠ-> 
cscope.out: ? c�ss_v��bˠ-> 
cscope.out: ? m�hod�-> 
cscope.out: ? cڡru�ܠ-> 
cscope.out: ? s�tic_���liz��-> 
cscope.out: ? in���_���liz��-> 
cscope.out: ? i_�as��-> 
cscope.out: ? i_�um�-> 
cscope.out: ? i_��r���-> 
cscope.out: ? i_�n٩iڠ-> 
cscope.out: ?�m�y_de���iڠ-> 
cscope.out: ? bound�-> 
cscope.out:(NumBounds(�- 1�-> 
cscope.out: ?��am���-> 
cscope.out: ? i�����-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: -> 
cscope.out: ? v��b�_���liz��-> 
cscope.out: ? b�ck�s_݈-> 
cscope.out: ? b�ck�s_݈-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? v��b�_de���ܠ-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: -> 
cscope.out: ? modif�rs_݈-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? f�m�_��m���-> 
cscope.out: ? b�ck�s_݈-> 
cscope.out: ? b�ck�s_݈-> 
cscope.out: ?�hrow�-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: ?�y�_��m��s_݈-> 
cscope.out: -> 
cscope.out: ? m�hod_body_݈-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ?�rgum�t�-> 
cscope.out: ? shadow_�gum�t�-> 
cscope.out: ?�y�_�gum�ts_݈-> 
cscope.out: ? ba�_݈-> 
cscope.out: ?�y�_�gum�ts_݈-> 
cscope.out: ?�hrow�-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: ?�y�_��m��s_݈-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? i�����-> 
cscope.out: ?�num_cڡ�t�-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: -> 
cscope.out: ? modif�rs_݈-> 
cscope.out: ? c�ss_body_݈-> 
cscope.out: ?�rgum�ts_݈-> 
cscope.out: ? i�����-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: -> 
cscope.out: ? modif�rs_݈-> 
cscope.out: - 1;
cscope.out: -> 
cscope.out: ? v��b�_de���ܠ-> 
cscope.out: ? modif�rs_݈-> 
cscope.out: -> 
cscope.out:() - 1) ->
cscope.out: -> LeftToken(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: ? f��_��em�t_݈-> 
cscope.out: -> 
cscope.out: -> LeftToken(); }
cscope.out: -> 
cscope.out: ? sw�ch_�b��-> 
cscope.out:(0�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? f�_��_��em�t�-> 
cscope.out: ? f�_upd�e_��em�t�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? c�ch_�au��-> 
cscope.out: ? f��ly_�au�_݈-> 
cscope.out:(�- 1�-> 
cscope.out: -> LeftToken(); }
cscope.out: ? ba�_݈-> 
cscope.out: ? ba�_݈-> 
cscope.out: ? ba�_݈-> 
cscope.out: ? c�ss_body_݈-> 
cscope.out: -> 
cscope.out: ? dim_ex��-> 
cscope.out: ? b�ck�s_݈-> 
cscope.out: -> 
cscope.out: ? b�ck�s_݈-> 
cscope.out:(�- 1�-> 
cscope.out: -> LeftToken(); }
cscope.out: ? ba�_݈-> 
cscope.out: -> 
cscope.out: -> LeftToken(); }
cscope.out: -> LeftToken(); }
cscope.out: -> RightToken(); }
cscope.out: -> RightToken(); }
cscope.out: -> LeftToken(); }
cscope.out: -> 
cscope.out: -> LeftToken(); }
cscope.out: -> RightToken(); }
cscope.out: -> LeftToken(); }
cscope.out: -> 
cscope.out: -> LeftToken(); }
cscope.out: -> RightToken(); }
cscope.out: - 8);
cscope.out: - 10);
cscope.out: - 12);
cscope.out:) - 1) / (Cell);
cscope.out:[base_index - 1];
cscope.out: - 1] = 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: && c�ss_body -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: - 1])));
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:--;
cscope.out: - 1];
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out:)) ->
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: &&�h�-> 
cscope.out:�-> 
cscope.out: &&�h�-> 
cscope.out:�-> 
cscope.out: ?�h�-> 
cscope.out: ? sym -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ->
cscope.out: -> 
cscope.out: -> index);
cscope.out: ->
cscope.out: -> 
cscope.out: -> index) = index;
cscope.out: -> 
cscope.out: -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ->
cscope.out: -> 
cscope.out: ->
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out: ->
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: :�y� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ->
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: + 1) ^ 1) - 1);
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]) ->
cscope.out:] -> 
cscope.out:]) ->
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]] -> 
cscope.out:]] -> 
cscope.out:]] ->
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:] ->
cscope.out:] ->
cscope.out:] ->
cscope.out:] -> 
cscope.out:] ->
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:1254 --
cscope.out: - 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:(�- 
cscope.out: -�
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out: < -128 || value > 127)
cscope.out:] -> 
cscope.out:]�-> 
cscope.out: < -32768 || value > 32767)
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: && "invalid constant-valued�ttribute");
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:--)
cscope.out: -> 
cscope.out:] -> 
cscope.out:[0] -> 
cscope.out:] -> 
cscope.out:--)
cscope.out:--)
cscope.out: -> 
cscope.out:--)
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out:--)
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:; i--; )
cscope.out:(); j--; )
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out: -> 
cscope.out: ?��r_cڡ�tv�u�-> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out:] -> 
cscope.out:]�-> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]] -> 
cscope.out: -> 
cscope.out: ?��r_sour�f��-> 
cscope.out: -> 
cscope.out: - 
cscope.out: = 32; i; i -= 4)
cscope.out: - 4)) & 0xf;
cscope.out: + 'a' - 10);
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:]] -> 
cscope.out:]] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: + (0x10000 - (0xd800 << 10) - 0xdc00);
cscope.out: - (�<�
cscope.out: - 10 : U_a - 10);
cscope.out: "V�si� 1.22 - 3 O�ob� 2004"
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: = -1, 
cscope.out:.Length() - 1); }
cscope.out:.L�gth(�- 1] : 
cscope.out: = -1 };
cscope.out: + 1 - 
cscope.out:�- 
cscope.out:-() const;
cscope.out:-(cڡ IEEE�߈
cscope.out: + (-
cscope.out:-=(cڡ 
cscope.out: = *thi�- 
cscope.out:--(�{  *
cscope.out: -= 1; }
cscope.out:--()
cscope.out: -= 1;
cscope.out:() - Sign()
cscope.out:) ? -1 : *this > op;
cscope.out: - 32,
cscope.out: + 1 - 
cscope.out:)�- 
cscope.out: | -(
cscope.out:-() const;
cscope.out:-(cڡ IEEEdoub� 
cscope.out: + (-
cscope.out:-=(cڡ 
cscope.out: = *thi�- 
cscope.out:--(�{  *
cscope.out: -= 1; }
cscope.out:--()
cscope.out: -= 1;
cscope.out:() - Sign()
cscope.out:) ? -1 : *this > op;
cscope.out: - 1]); }
cscope.out:-(cڡ 
cscope.out: -> 
cscope.out:--; }
cscope.out:[0]�- (
cscope.out:�{  -
cscope.out:-(cڡ 
cscope.out:-() const;
cscope.out:-=(cڡ 
cscope.out:--();
cscope.out:--();
cscope.out:67 --
cscope.out: = (hash_v�u�<< 5�- hash_v�u�+ *
cscope.out:78 --
cscope.out: = (hash_v�u�<< 5�- hash_v�u�+ *
cscope.out: -> 
cscope.out: ? Utf8_l��� -> 
cscope.out: ? Utf8_l��� -> 
cscope.out:(�-> 
cscope.out: - 1)];
cscope.out: + (i - 1)]; }
cscope.out:]�- 
cscope.out:]�- 
cscope.out:]�- 
cscope.out: = 3; i >= 0; i--)
cscope.out: - 10 + 
cscope.out: -> fill(c); }
cscope.out: -> 
cscope.out: -> 
cscope.out:() - 1);
cscope.out:.Length() - 1] : 0;
cscope.out: - 1)
cscope.out: - 1)
cscope.out:.Length() - 1); }
cscope.out:(�- 1] : 
cscope.out:() - 1; i >= 0; i--)
cscope.out:] -> 
cscope.out:() - 1; i >= 0; i--)
cscope.out:] -> 
cscope.out:() - 1; i >= 0; i--)
cscope.out:] -> 
cscope.out:() - 1);
cscope.out:.L�gth(�- 1] : 
cscope.out: - 1);
cscope.out: - 1);
cscope.out:(�- 1] : 
cscope.out:() - 1];
cscope.out:() - 1);
cscope.out:() - 1];
cscope.out:--;
cscope.out: - 1];
cscope.out: - 1];
cscope.out: - 1];
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: &&�his_v��b� -> 
cscope.out: &&�his_m�hod -> 
cscope.out:() - 1);
cscope.out:() - 1];
cscope.out: ->�ex_stream),
cscope.out: -> compilation_unit),
cscope.out: -> directory_symbol),
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(),�� -> 
cscope.out: -> 
cscope.out: ?��� -> 
cscope.out:(�-> 
cscope.out:(�&& ThisM�hod(�-> 
cscope.out:(�&& ThisV��b�(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out:(),�� -> 
cscope.out: ->* 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ->* 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> Identity(); }
cscope.out: ? c��i� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:() - 1;
cscope.out: -> 
cscope.out: -> 
cscope.out: = -1;
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> symbol;
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> Identity())
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: - 1�/ c�l_siz�* (
cscope.out: - 1�/ c�l_siz�* (
cscope.out: - 1�/ 
cscope.out:; i >= 0; i--)
cscope.out: - 1�/ c�l_siz�* (
cscope.out: - 1) / cell_size;
cscope.out: - 1) / cell_size;
cscope.out: - 1) / cell_size;
cscope.out: - 1�/ 
cscope.out:) 1 << (i % cell_size)) - (CELL) 1
cscope.out:663 --
cscope.out: - 1�/ 
cscope.out: >= 0; i--)
cscope.out: - 1�/ 
cscope.out: >= 0; i--)
cscope.out:-(cڡ 
cscope.out:�-�
cscope.out:-=(cڡ 
cscope.out: - 1�/ 
cscope.out: >= 0; i--)
cscope.out: - 1) / cell_size;
cscope.out: - 1) / cell_size;
cscope.out: - 1�/ 
cscope.out: - 1) / cell_size - 1)
cscope.out:--] = 
cscope.out:)) - (CELL) 1
cscope.out:772 - (
cscope.out:-(cڡ 
cscope.out:�-�
cscope.out:-=(cڡ 
cscope.out: -�
cscope.out: -�
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:];��m�t;��m���em��-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: = -1;
cscope.out: - 
cscope.out: - 
cscope.out: - 
cscope.out: - 
cscope.out:) -1;
cscope.out: - 1;
cscope.out:.Length() - 1;
cscope.out: <= 0 ? 0 : i - 1; }
cscope.out:() - 1);
cscope.out:(�? NumTok�s(�- 1 : i].
cscope.out:() - 1) + 1 : 0;
cscope.out: - 1) < Line(i);
cscope.out: + 1] - 1;
cscope.out:(--
cscope.out:(�- 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ?��r��-> 
cscope.out: ?��r��-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:�-> 
cscope.out:() -> IsZip(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:() -> IsZip(); }
cscope.out:(�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:�-> 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? f�e_lo�ti� -> 
cscope.out: ? f�m�_��m���-> 
cscope.out: -> 
cscope.out: ?�hrow�-> 
cscope.out: -> 
cscope.out: ?�hrows_sig�tu��-> 
cscope.out: -> 
cscope.out: ?�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: ?�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: &&�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? c�ss_l����-> 
cscope.out: -> 
cscope.out: ?�e�ed_ty��-> 
cscope.out: -> 
cscope.out: ? i�����-> 
cscope.out: -> 
cscope.out: ?�n�ymous_ty��-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ?�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: ?�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: &&�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? m�hod -> 
cscope.out:�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:�-> 
cscope.out:�-> 
cscope.out: && su��-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ?�ype -> base_type :�ype;
cscope.out: ->�um_dimensions &&
cscope.out: -> 
cscope.out: ->�um_dimensions &&
cscope.out: -> 
cscope.out: -> 
cscope.out: ? f�e_lo�ti� -> 
cscope.out: -> 
cscope.out: - 1);
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out:�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ?��ay -> 
cscope.out: -> 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? f�e_lo�ti� -> 
cscope.out: ?�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: ?�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: &&�x���_�me_symb� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(-1)
cscope.out: -> 
cscope.out:(�|| owø-> 
cscope.out: -> 
cscope.out: ? m�hod_owø-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? m�hod_owø-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> Name(); }
cscope.out: -> NameLength(); }
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ?�n�ymous_symb�_po� -> 
cscope.out: -> 
cscope.out: ?�y�_symb�_po� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? m�hod_symb�_po� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? v��b�_symb�_po� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? oth�_symb�_po� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out: ?�ab� -> 
cscope.out: -> 
cscope.out: ?�ab� -> 
cscope.out: -> 
cscope.out: ?�ab� -> 
cscope.out: -> 
cscope.out: ?�ab� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out: ?�ab� -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out: ?�ab� -> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out: ?�ab� -> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: = symb�, symb� = symb� -> 
cscope.out: -> 
cscope.out: ->�ext;
cscope.out:() - 1;
cscope.out: -> 
cscope.out:�-> 
cscope.out: ->�ool_index;
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out: ?�ab� -> 
cscope.out: ?�ab� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:; c�did����ndid��-> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ->�ext_method;
cscope.out: -> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out: ?�ab� -> 
cscope.out: ?�ab� -> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out:(�-> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out: ?�ab� -> 
cscope.out: ?�ab� -> 
cscope.out: -> 
cscope.out:; symb� = symb� -> 
cscope.out: -> 
cscope.out:(�&& symb� -> 
cscope.out:(�-> 
cscope.out: ? c��i� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? c��i� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ? c��i� -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out:] -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: ->
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out: -> 
cscope.out:() - 1; i >= 0; i--)
cscope.out: -> 
cscope.out:�-> 
cscope.out: -> 
cscope.out:�-> 
cscope.out:-
cscope.out:-,
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-DISTANCE=3 
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-
cscope.out:-Redu� 
cscope.out: > 255. 16-
cscope.out:[0]�- (
cscope.out:�{  -
cscope.out: - 
cscope.out:()]�- 
cscope.out: =�0 ? -1 : (�- 1�>> 
cscope.out:�- 1; k > 
cscope.out:; k--)
cscope.out: -�
cscope.out: -> 
cscope.out:--;
cscope.out: - 1];
cscope.out: - 1];
cscope.out: - 4);
cscope.out: - 8);
cscope.out:)�-> 
cscope.out:�-> 
cscope.out: - 1�>> Tu�e<T>::
cscope.out: - 
cscope.out:517 --
cscope.out:(�-> 
cscope.out: - 1�>> buf�r.
cscope.out: -> 
cscope.out: -> 
cscope.out: - size);
cscope.out:-=�);}
cscope.out:�((d)->
cscope.out: ((d)->
cscope.out:�(((*�(d�+ (d)->
cscope.out:�- &(d)->
cscope.out:�( (d)->
cscope.out: > 1 ?  (d)->d_name : \
cscope.out: (-128)
cscope.out: (-32767-1)
cscope.out: (-2147483647-1)
cscope.out: (-
cscope.out:(9223372036854775807)-1)
cscope.out: (-128)
cscope.out: (-32767-1)
cscope.out: (-2147483647-1)
cscope.out: (-
cscope.out:(9223372036854775807)-1)
cscope.out: (-128)
cscope.out: (-9223372036854775807L-1)
cscope.out: (-9223372036854775807L-1)
cscope.out: (-2147483647-1)
cscope.out: (-2147483647-1)
cscope.out: (-
cscope.out:(9223372036854775807)-1)
cscope.out: (-9223372036854775807L-1)
cscope.out: (-2147483647-1)
cscope.out: (-
cscope.out:(9223372036854775807)-1)
cscope.out: (-9223372036854775807L-1)
cscope.out: (-2147483647-1)
cscope.out: (-2147483647-1)
cscope.out: =�-1L && 
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out: -1
cscope.out:[48 -  (
cscope.out:68 -  (
cscope.out:�-  (
cscope.out:�((buf)->
cscope.out: - (buf)->�_mode)
cscope.out:�((buf)->
cscope.out: - (buf)->�_mode)
cscope.out:�((buf)->
cscope.out: - (buf)->�_mode)
cscope.out: (-2147483647�- 1l)
cscope.out: - 0) >= 500) && \
cscope.out: && (_XOPEN_SOURCE - 0) < 500
cscope.out: - 0) >= 199309L
cscope.out: - 0) >= 199506L
cscope.out: - 0) >= 200112L
cscope.out: - 0) >= 500
cscope.out: - 0) >= 600
cscope.out:�((�t)->
cscope.out:�((�t)->
cscope.out:->
cscope.out:)->
cscope.out:)->
cscope.out:)->
cscope.out:�- 1�% (8 *  ())))
cscope.out:�(((sig�- 1�/ (8 *  ()))
cscope.out:60 --
cscope.out:->
cscope.out:65 --
cscope.out:->
cscope.out:->
cscope.out:[--
cscope.out: && --
cscope.out:->
cscope.out:84 --
cscope.out:->
cscope.out:->__val[__cnt] \
cscope.out:->
cscope.out:93 --
cscope.out:->
cscope.out:->__val[__cnt] \
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:), "1" (__�- 1 + (cڡ *�
cscope.out: - 1 + (*�
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out: - 1;
cscope.out: - 1), "1" (__n),
cscope.out: - 1;
cscope.out: - 1;
cscope.out: - 1;
cscope.out: - 1;
cscope.out: - 1;
cscope.out: - 1�- 
cscope.out: - 1�- 
cscope.out: - 1�- 
cscope.out: - 1�- 
cscope.out:�+ 1�- (size_t)(cڡ *)(__x�=�1)
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out:->
cscope.out: - 1;
cscope.out: - 
cscope.out:814 - ((
cscope.out:819 - ((
cscope.out:826 - ((
cscope.out:832 - ((
cscope.out:843 - 
cscope.out:))[1] - 
cscope.out:))[2] - 
cscope.out:855 - 
cscope.out:[0] - ((
cscope.out:869 - ((
cscope.out:[2] - ((
cscope.out:879 - ((
cscope.out:[-1] = '\0';
cscope.out: - 1] = '\0'; \
cscope.out: - 1); \
cscope.out: < -128 || __�> 255 ? __�: (
cscope.out: >�-128 && __�< 256 ? (*
cscope.out: >�-128 && __�< 256 ? (*
cscope.out:)->
cscope.out:)->
cscope.out:)->
astGeneration/decl.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
astGeneration/decl.cpp:    if (! compilation_unit -> package_declaration_opt)
astGeneration/decl.cpp:        compilation_unit -> package_declaration_opt;
astGeneration/decl.cpp:             *package = subpackage -> owner;
astGeneration/decl.cpp:         package; subpackage = package, package = package -> owner)
astGeneration/decl.cpp:            Control::GetFile(control, package, subpackage -> Identity());
astGeneration/decl.cpp:            char* file_name = file_symbol -> FileName();
astGeneration/decl.cpp:            int length = file_symbol -> FileNameLength();
astGeneration/decl.cpp:                           compilation_unit -> package_declaration_opt -> name,
astGeneration/decl.cpp:                           package -> PackageName(), subpackage -> Name(),
astGeneration/decl.cpp:    // TODO: Warn about package annotations outside of package-info.java.
astGeneration/decl.cpp:    compilation_unit = source_file_symbol -> compilation_unit;
astGeneration/decl.cpp:        if (compilation_unit -> EmptyCompilationUnitCast())
astGeneration/decl.cpp:             i < compilation_unit -> NumTypeDeclarations(); i++)
astGeneration/decl.cpp:                compilation_unit -> TypeDeclaration(i);
astGeneration/decl.cpp:            if (type_declaration -> EmptyDeclarationCast())
astGeneration/decl.cpp:    if (compilation_unit -> BadCompilationUnitCast())
astGeneration/decl.cpp:        for (unsigned i = 0; i < lex_stream -> NumTypes(); i++)
astGeneration/decl.cpp:                lex_stream -> Next(lex_stream -> Type(i));
astGeneration/decl.cpp:                lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:                TypeSymbol* type = this_package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:                type -> MarkBad();
astGeneration/decl.cpp:                type -> MarkSourceNoLongerPending();
astGeneration/decl.cpp:                type -> supertypes_closure = new SymbolSet;
astGeneration/decl.cpp:                type -> subtypes = new SymbolSet;
astGeneration/decl.cpp:                type -> semantic_environment =
astGeneration/decl.cpp:                    type -> super = control.no_type;
astGeneration/decl.cpp:                if (! type -> FindMethodSymbol(control.init_name_symbol))
astGeneration/decl.cpp:                source_file_symbol -> types.Next() = type;
astGeneration/decl.cpp:    for (unsigned k = 0; k < compilation_unit -> NumTypeDeclarations(); k++)
astGeneration/decl.cpp:        AstDeclaredType* declaration = compilation_unit -> TypeDeclaration(k);
astGeneration/decl.cpp:        if (! declaration -> EmptyDeclarationCast())
astGeneration/decl.cpp:            identifier_token = declaration -> class_body -> identifier_token;
astGeneration/decl.cpp:                lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:            if (name_symbol -> IsBadStyleForClass())
astGeneration/decl.cpp:                               identifier_token, name_symbol -> Name());
astGeneration/decl.cpp:            type = this_package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:            if (! type -> SourcePending())
astGeneration/decl.cpp:                               identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                               type -> FileLoc());
astGeneration/decl.cpp:                if (type -> ContainingPackage() == control.UnnamedPackage())
astGeneration/decl.cpp:                                       identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                                       old_type -> FileLoc());
astGeneration/decl.cpp:                type -> MarkSourceNoLongerPending();
astGeneration/decl.cpp:                type -> semantic_environment =
astGeneration/decl.cpp:                type -> declaration = declaration -> class_body;
astGeneration/decl.cpp:                type -> SetFlags(ProcessTopLevelTypeModifiers(declaration));
astGeneration/decl.cpp:                type -> SetSymbolTable(declaration -> class_body ->
astGeneration/decl.cpp:                type -> SetLocation();
astGeneration/decl.cpp:                if (lex_stream -> IsDeprecated(declaration -> LeftToken()))
astGeneration/decl.cpp:                    type -> MarkDeprecated();
astGeneration/decl.cpp:                source_file_symbol -> types.Next() = type;
astGeneration/decl.cpp:                declaration -> class_body -> semantic_environment =
astGeneration/decl.cpp:                    type -> semantic_environment;
astGeneration/decl.cpp:                CheckNestedMembers(type, declaration -> class_body);
astGeneration/decl.cpp:                lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:            for (unsigned i = 0; i < this_package -> directory.Length(); i++)
astGeneration/decl.cpp:                // subpackages require a named top-level package. In other
astGeneration/decl.cpp:                if ((this_package -> directory[i] ->
astGeneration/decl.cpp:                    char* file_name = type -> file_symbol -> FileName();
astGeneration/decl.cpp:                    int length = type -> file_symbol -> FileNameLength();
astGeneration/decl.cpp:                                   this_package -> PackageName(),
astGeneration/decl.cpp:                                   name_symbol -> Name(), error_name);
astGeneration/decl.cpp:            if (type -> Identity() != source_file_symbol -> Identity())
astGeneration/decl.cpp:                    Control::GetJavaFile(package, type -> Identity());
astGeneration/decl.cpp:                                   this_package -> PackageName(),
astGeneration/decl.cpp:                                   source_file_symbol -> Name(),
astGeneration/decl.cpp:                                   package -> PackageName(), type -> Name());
astGeneration/decl.cpp:        if (type && type -> ACC_PUBLIC())
astGeneration/decl.cpp:                if (source_file_symbol -> Identity() !=
astGeneration/decl.cpp:                    public_type -> Identity())
astGeneration/decl.cpp:                                   type -> declaration -> identifier_token,
astGeneration/decl.cpp:                                   public_type -> Name());
astGeneration/decl.cpp:                               type -> declaration -> identifier_token,
astGeneration/decl.cpp:                               type -> Name(),
astGeneration/decl.cpp:                               public_type -> Name());
astGeneration/decl.cpp:    for (i = 0; i < class_body -> NumNestedClasses(); i++)
astGeneration/decl.cpp:        AstClassDeclaration* decl = class_body -> NestedClass(i);
astGeneration/decl.cpp:    for (i = 0; i < class_body -> NumNestedEnums(); i++)
astGeneration/decl.cpp:        AstEnumDeclaration* decl = class_body -> NestedEnum(i);
astGeneration/decl.cpp:    for (i = 0; i < class_body -> NumNestedInterfaces(); i++)
astGeneration/decl.cpp:        AstInterfaceDeclaration* decl = class_body -> NestedInterface(i);
astGeneration/decl.cpp:    for (i = 0; i < class_body -> NumNestedAnnotations(); i++)
astGeneration/decl.cpp:        AstAnnotationDeclaration* decl = class_body -> NestedAnnotation(i);
astGeneration/decl.cpp:    for (i = 0; i < class_body -> NumEmptyDeclarations(); i++)
astGeneration/decl.cpp:                           class_body -> EmptyDeclaration(i));
astGeneration/decl.cpp:    TypeSymbol* type = type_shadow_symbol -> type_symbol;
astGeneration/decl.cpp:        if (type_shadow_symbol -> NumConflicts())
astGeneration/decl.cpp:            type = type_shadow_symbol -> Conflict(0);
astGeneration/decl.cpp:    for ( ; i < type_shadow_symbol -> NumConflicts(); i++)
astGeneration/decl.cpp:                       identifier_token, type -> Name(),
astGeneration/decl.cpp:                       type -> owner -> TypeCast() -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> owner -> TypeCast() -> ExternalName(),
astGeneration/decl.cpp:                       type_shadow_symbol -> Conflict(i) -> owner -> TypeCast() -> ContainingPackageName(),
astGeneration/decl.cpp:                       type_shadow_symbol -> Conflict(i) -> owner -> TypeCast() -> ExternalName());
astGeneration/decl.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:    if (env -> symbol_table.Size())
astGeneration/decl.cpp:        for (int i = env -> symbol_table.Size(); --i >= 0; )
astGeneration/decl.cpp:            old_type = env -> symbol_table[i] -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:    else old_type = env -> Type() -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:                       identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                       old_type -> FileLoc());
astGeneration/decl.cpp:        for (; env; env = env -> previous)
astGeneration/decl.cpp:            if (env -> Type() -> Identity() == name_symbol)
astGeneration/decl.cpp:                               identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                               env -> Type() -> FileLoc());
astGeneration/decl.cpp:    AstClassBody* class_body = declaration -> class_body;
astGeneration/decl.cpp:        lex_stream -> NameSymbol(class_body -> identifier_token);
astGeneration/decl.cpp:    TypeSymbol* outermost_type = containing_type -> outermost_type;
astGeneration/decl.cpp:    CheckNestedTypeDuplication(containing_type -> semantic_environment,
astGeneration/decl.cpp:                               class_body -> identifier_token);
astGeneration/decl.cpp:    int length = containing_type -> ExternalNameLength() + 1 +
astGeneration/decl.cpp:        name_symbol -> NameLength(); // +1 for $,... +1 for $
astGeneration/decl.cpp:    wcscpy(external_name, containing_type -> ExternalName());
astGeneration/decl.cpp:    wcscat(external_name, name_symbol -> Name());
astGeneration/decl.cpp:        containing_type -> InsertNestedTypeSymbol(name_symbol);
astGeneration/decl.cpp:    inner_type -> outermost_type = outermost_type;
astGeneration/decl.cpp:    inner_type -> supertypes_closure = new SymbolSet;
astGeneration/decl.cpp:    inner_type -> subtypes = new SymbolSet;
astGeneration/decl.cpp:    inner_type -> SetExternalIdentity(control.FindOrInsertName(external_name,
astGeneration/decl.cpp:    inner_type -> semantic_environment =
astGeneration/decl.cpp:                                containing_type -> semantic_environment);
astGeneration/decl.cpp:    inner_type -> declaration = declaration -> class_body;
astGeneration/decl.cpp:    inner_type -> file_symbol = source_file_symbol;
astGeneration/decl.cpp:    inner_type -> SetFlags(ProcessNestedTypeModifiers(containing_type,
astGeneration/decl.cpp:    inner_type -> SetOwner(containing_type);
astGeneration/decl.cpp:    inner_type -> SetSymbolTable(class_body -> NumClassBodyDeclarations() + 3);
astGeneration/decl.cpp:    inner_type -> SetLocation();
astGeneration/decl.cpp:    inner_type -> SetSignature(control);
astGeneration/decl.cpp:    if (lex_stream -> IsDeprecated(declaration -> LeftToken()))
astGeneration/decl.cpp:        inner_type -> MarkDeprecated();
astGeneration/decl.cpp:    // If not a top-level type, then add pointer to enclosing type.
astGeneration/decl.cpp:    if (! inner_type -> ACC_STATIC())
astGeneration/decl.cpp:        inner_type -> InsertThis0();
astGeneration/decl.cpp:    else if (containing_type -> IsInner())
astGeneration/decl.cpp:                       class_body -> identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                       containing_type -> Name(),
astGeneration/decl.cpp:                       containing_type -> FileLoc());
astGeneration/decl.cpp:        inner_type -> ResetACC_STATIC();
astGeneration/decl.cpp:    if (inner_type -> IsLocal())
astGeneration/decl.cpp:        if (! outermost_type -> local)
astGeneration/decl.cpp:            outermost_type -> local = new SymbolSet;
astGeneration/decl.cpp:        outermost_type -> local -> AddElement(inner_type);
astGeneration/decl.cpp:        if (! outermost_type -> non_local)
astGeneration/decl.cpp:            outermost_type -> non_local = new SymbolSet;
astGeneration/decl.cpp:        outermost_type -> non_local -> AddElement(inner_type);
astGeneration/decl.cpp:    if (name_symbol -> IsBadStyleForClass())
astGeneration/decl.cpp:                       class_body -> identifier_token, name_symbol -> Name());
astGeneration/decl.cpp:    declaration -> class_body -> semantic_environment =
astGeneration/decl.cpp:        inner_type -> semantic_environment;
astGeneration/decl.cpp:    for (unsigned i = 0; i < compilation_unit -> NumImportDeclarations(); i++)
astGeneration/decl.cpp:            compilation_unit -> ImportDeclaration(i);
astGeneration/decl.cpp:        if (import_declaration -> static_token_opt)
astGeneration/decl.cpp:                               import_declaration -> static_token_opt);
astGeneration/decl.cpp:        if (import_declaration -> star_token_opt)
astGeneration/decl.cpp:        declaration -> class_body -> semantic_environment -> Type();
astGeneration/decl.cpp:    assert(! type -> HeaderProcessed() || type -> Bad());
astGeneration/decl.cpp:    type -> MarkHeaderProcessed();
astGeneration/decl.cpp:    if (type -> Bad())
astGeneration/decl.cpp:    // with recursion or non-existant classes.
astGeneration/decl.cpp:    if (this_package == control.LangPackage() && ! type -> IsNested())
astGeneration/decl.cpp:        if (type -> Identity() == control.Object_name_symbol)
astGeneration/decl.cpp:            if (declaration -> super_opt || declaration -> NumInterfaces())
astGeneration/decl.cpp:                               declaration -> LeftToken(),
astGeneration/decl.cpp:                               declaration -> class_body -> left_brace_token - 1);
astGeneration/decl.cpp:            if (declaration -> type_parameters_opt)
astGeneration/decl.cpp:                               declaration -> LeftToken(),
astGeneration/decl.cpp:                               declaration -> class_body -> left_brace_token - 1,
astGeneration/decl.cpp:                               type -> ContainingPackageName(),
astGeneration/decl.cpp:                               type -> ExternalName());
astGeneration/decl.cpp:            type -> MarkHeaderProcessed();
astGeneration/decl.cpp:        else if (type -> Identity() == control.Enum_name_symbol)
astGeneration/decl.cpp:            type -> MarkEnum();
astGeneration/decl.cpp:    if (declaration -> type_parameters_opt)
astGeneration/decl.cpp:        ProcessTypeParameters(type, declaration -> type_parameters_opt);
astGeneration/decl.cpp:    if (declaration -> super_opt)
astGeneration/decl.cpp:        ProcessType(declaration -> super_opt);
astGeneration/decl.cpp:        TypeSymbol* super_type = declaration -> super_opt -> symbol;
astGeneration/decl.cpp:        assert(! super_type -> SourcePending());
astGeneration/decl.cpp:        if (! super_type -> HeaderProcessed())
astGeneration/decl.cpp:            super_type -> ProcessTypeHeaders();
astGeneration/decl.cpp:            super_type -> IsDeprecated() && ! type -> IsDeprecated())
astGeneration/decl.cpp:                           declaration -> super_opt,
astGeneration/decl.cpp:                           super_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           super_type -> ExternalName());
astGeneration/decl.cpp:        if (super_type -> IsEnum())
astGeneration/decl.cpp:                           declaration -> super_opt,
astGeneration/decl.cpp:                           super_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           super_type -> ExternalName());
astGeneration/decl.cpp:        else if (super_type -> ACC_INTERFACE())
astGeneration/decl.cpp:                           declaration -> super_opt,
astGeneration/decl.cpp:                           super_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           super_type -> ExternalName());
astGeneration/decl.cpp:        else if (super_type -> ACC_FINAL())
astGeneration/decl.cpp:                           declaration -> super_opt,
astGeneration/decl.cpp:                           super_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           super_type -> ExternalName());
astGeneration/decl.cpp:        else if (super_type -> Bad())
astGeneration/decl.cpp:            super_type -> subtypes -> AddElement(type);
astGeneration/decl.cpp:            type -> super = super_type;
astGeneration/decl.cpp:                type -> supertypes_closure -> AddElement(super_type);
astGeneration/decl.cpp:                type -> supertypes_closure -> Union(*super_type ->
astGeneration/decl.cpp:                if (super_type -> owner -> TypeCast())
astGeneration/decl.cpp:                    super_type = super_type -> ContainingType();
astGeneration/decl.cpp:    if (! type -> super)
astGeneration/decl.cpp:        type -> super = control.Object();
astGeneration/decl.cpp:        type -> supertypes_closure -> AddElement(control.Object());
astGeneration/decl.cpp:        control.Object() -> subtypes -> AddElement(type);
astGeneration/decl.cpp:    AddDependence(type, type -> super);
astGeneration/decl.cpp:    for (unsigned i = 0; i < declaration -> NumInterfaces(); i++)
astGeneration/decl.cpp:        ProcessSuperinterface(type, declaration -> Interface(i));
astGeneration/decl.cpp:    if (type -> supertypes_closure -> IsElement(type))
astGeneration/decl.cpp:        type -> super = control.Object();
astGeneration/decl.cpp:        type -> ResetInterfaces();
astGeneration/decl.cpp:        type -> MarkCircular();
astGeneration/decl.cpp:                       declaration -> class_body -> identifier_token,
astGeneration/decl.cpp:                       declaration -> class_body -> left_brace_token - 1,
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:    else if (declaration -> type_parameters_opt &&
astGeneration/decl.cpp:             type -> IsSubclass(control.Throwable()))
astGeneration/decl.cpp:                       declaration -> LeftToken(),
astGeneration/decl.cpp:                       declaration -> class_body -> left_brace_token - 1,
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:        declaration -> class_body -> semantic_environment -> Type();
astGeneration/decl.cpp:    assert(! type -> HeaderProcessed() || type -> Bad());
astGeneration/decl.cpp:    type -> MarkHeaderProcessed();
astGeneration/decl.cpp:                       declaration -> enum_token);
astGeneration/decl.cpp:        type -> super = control.Object();
astGeneration/decl.cpp:        type -> MarkBad();
astGeneration/decl.cpp:    if (type -> Bad())
astGeneration/decl.cpp:    type -> super = control.Enum();
astGeneration/decl.cpp:    type -> supertypes_closure -> AddElement(control.Enum());
astGeneration/decl.cpp:    type -> MarkEnum(); // Since ACC_ENUM is only for enum constants.
astGeneration/decl.cpp:    control.Enum() -> subtypes -> AddElement(type);
astGeneration/decl.cpp:    AddDependence(type, type -> super);
astGeneration/decl.cpp:    for (unsigned i = 0; i < declaration -> NumInterfaces(); i++)
astGeneration/decl.cpp:        ProcessSuperinterface(type, declaration -> Interface(i));
astGeneration/decl.cpp:    assert(! type -> supertypes_closure -> IsElement(type));
astGeneration/decl.cpp:        declaration -> class_body -> semantic_environment -> Type();
astGeneration/decl.cpp:    assert(! type -> HeaderProcessed() || type -> Bad());
astGeneration/decl.cpp:    type -> MarkHeaderProcessed();
astGeneration/decl.cpp:    if (declaration -> type_parameters_opt)
astGeneration/decl.cpp:        ProcessTypeParameters(type, declaration -> type_parameters_opt);
astGeneration/decl.cpp:    type -> super = control.Object();
astGeneration/decl.cpp:    for (unsigned k = 0; k < declaration -> NumInterfaces(); k++)
astGeneration/decl.cpp:        ProcessSuperinterface(type, declaration -> Interface(k));
astGeneration/decl.cpp:    if (type -> supertypes_closure -> IsElement(type))
astGeneration/decl.cpp:        type -> ResetInterfaces();
astGeneration/decl.cpp:        type -> MarkCircular();
astGeneration/decl.cpp:                       declaration -> class_body -> identifier_token,
astGeneration/decl.cpp:                       declaration -> class_body -> left_brace_token - 1,
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:        declaration -> class_body -> semantic_environment -> Type();
astGeneration/decl.cpp:    assert(! type -> HeaderProcessed() || type -> Bad());
astGeneration/decl.cpp:    type -> MarkHeaderProcessed();
astGeneration/decl.cpp:                       declaration -> interface_token - 1,
astGeneration/decl.cpp:                       declaration -> interface_token);
astGeneration/decl.cpp:        type -> MarkBad();
astGeneration/decl.cpp:    type -> super = control.Object();
astGeneration/decl.cpp:    type -> AddInterface(control.Annotation());
astGeneration/decl.cpp:    TypeSymbol* interf = name -> symbol;
astGeneration/decl.cpp:    assert(! interf -> SourcePending());
astGeneration/decl.cpp:    if (! interf -> HeaderProcessed())
astGeneration/decl.cpp:        interf -> ProcessTypeHeaders();
astGeneration/decl.cpp:        interf -> IsDeprecated() && ! base_type -> IsDeprecated())
astGeneration/decl.cpp:                       interf -> ContainingPackageName(),
astGeneration/decl.cpp:                       interf -> ExternalName());
astGeneration/decl.cpp:    if (! interf -> ACC_INTERFACE())
astGeneration/decl.cpp:        if (! interf -> Bad())
astGeneration/decl.cpp:                           interf -> ContainingPackageName(),
astGeneration/decl.cpp:                           interf -> ExternalName());
astGeneration/decl.cpp:        name -> symbol = NULL;
astGeneration/decl.cpp:        for (unsigned k = 0; k < base_type -> NumInterfaces(); k++)
astGeneration/decl.cpp:            if (base_type -> Interface(k) == interf)
astGeneration/decl.cpp:                               interf -> ContainingPackageName(),
astGeneration/decl.cpp:                               interf -> ExternalName(),
astGeneration/decl.cpp:                               base_type -> ExternalName());
astGeneration/decl.cpp:                name -> symbol = NULL;
astGeneration/decl.cpp:        name -> symbol = interf; // save type name in ast.
astGeneration/decl.cpp:        base_type -> AddInterface(interf);
astGeneration/decl.cpp:        interf -> subtypes -> AddElement(base_type);
astGeneration/decl.cpp:            base_type -> supertypes_closure -> AddElement(interf);
astGeneration/decl.cpp:            base_type -> supertypes_closure -> Union(*interf ->
astGeneration/decl.cpp:            if (interf -> owner -> TypeCast())
astGeneration/decl.cpp:                interf = interf -> ContainingType();
astGeneration/decl.cpp:// owner, so anon_type must be non-null only in that case.
astGeneration/decl.cpp:    assert(! body -> owner ^ ! anon_type);
astGeneration/decl.cpp:    SemanticEnvironment* sem = anon_type ? anon_type -> semantic_environment
astGeneration/decl.cpp:        : body -> semantic_environment;
astGeneration/decl.cpp:    TypeSymbol* type = anon_type ? anon_type : sem -> Type();
astGeneration/decl.cpp:    if (type -> HeaderProcessed())
astGeneration/decl.cpp:        anon_type -> MarkHeaderProcessed();
astGeneration/decl.cpp:    else if (body -> owner -> ClassDeclarationCast())
astGeneration/decl.cpp:        ProcessTypeHeader((AstClassDeclaration*) body -> owner);
astGeneration/decl.cpp:    else if (body -> owner -> EnumDeclarationCast())
astGeneration/decl.cpp:        ProcessTypeHeader((AstEnumDeclaration*) body -> owner);
astGeneration/decl.cpp:    else if (body -> owner -> InterfaceDeclarationCast())
astGeneration/decl.cpp:        ProcessTypeHeader((AstInterfaceDeclaration*) body -> owner);
astGeneration/decl.cpp:        assert(body -> owner -> AnnotationDeclarationCast());
astGeneration/decl.cpp:        ProcessTypeHeader((AstAnnotationDeclaration*) body -> owner);
astGeneration/decl.cpp:    for (i = 0; i < body -> NumNestedClasses(); i++)
astGeneration/decl.cpp:        AstClassDeclaration* nested_class = body -> NestedClass(i);
astGeneration/decl.cpp:        type -> AddNestedType(ProcessTypeHeaders(nested_class -> class_body));
astGeneration/decl.cpp:    for (i = 0; i < body -> NumNestedEnums(); i++)
astGeneration/decl.cpp:        AstEnumDeclaration* nested_enum = body -> NestedEnum(i);
astGeneration/decl.cpp:        type -> AddNestedType(ProcessTypeHeaders(nested_enum -> class_body));
astGeneration/decl.cpp:    for (i = 0; i < body -> NumNestedInterfaces(); i++)
astGeneration/decl.cpp:        AstInterfaceDeclaration* nested = body -> NestedInterface(i);
astGeneration/decl.cpp:        type -> AddNestedType(ProcessTypeHeaders(nested -> class_body));
astGeneration/decl.cpp:    for (i = 0; i < body -> NumNestedAnnotations(); i++)
astGeneration/decl.cpp:        AstAnnotationDeclaration* nested = body -> NestedAnnotation(i);
astGeneration/decl.cpp:        type -> AddNestedType(ProcessTypeHeaders(nested -> class_body));
astGeneration/decl.cpp:                   type -> ContainingPackageName(),
astGeneration/decl.cpp:                   type -> ExternalName(), type -> AccessString());
astGeneration/decl.cpp:    if (type == control.null_type || type -> Bad() || type -> Primitive())
astGeneration/decl.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:    if (! type -> expanded_type_table)
astGeneration/decl.cpp:        type -> expanded_type_table -> FindTypeShadowSymbol(name_symbol);
astGeneration/decl.cpp:    if (type -> Bad())
astGeneration/decl.cpp:    if (name -> base_opt && ! name -> base_opt -> symbol)
astGeneration/decl.cpp:        type = MustFindNestedType(type, name -> base_opt);
astGeneration/decl.cpp:    TypeSymbol* inner_type = FindNestedType(type, name -> identifier_token);
astGeneration/decl.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:        for (TypeSymbol* super_type = type -> super;
astGeneration/decl.cpp:             super_type && ! super_type -> Bad();
astGeneration/decl.cpp:             super_type = super_type -> super)
astGeneration/decl.cpp:            assert(super_type -> expanded_type_table);
astGeneration/decl.cpp:            TypeShadowSymbol* type_shadow_symbol = super_type ->
astGeneration/decl.cpp:                expanded_type_table -> FindTypeShadowSymbol(name_symbol);
astGeneration/decl.cpp:                                              name -> identifier_token);
astGeneration/decl.cpp:        else inner_type = GetBadNestedType(type, name -> identifier_token);
astGeneration/decl.cpp:    return inner_type -> Bad() ? control.no_type : inner_type;
astGeneration/decl.cpp:    assert(this_type -> HeaderProcessed());
astGeneration/decl.cpp:    if (class_body -> NumConstructors())
astGeneration/decl.cpp:        for (unsigned i = 0; i < class_body -> NumConstructors(); i++)
astGeneration/decl.cpp:            ProcessConstructorDeclaration(class_body -> Constructor(i));
astGeneration/decl.cpp:    else if (! this_type -> Anonymous() && ! this_type -> ACC_INTERFACE())
astGeneration/decl.cpp:    this_type -> MarkConstructorMembersProcessed();
astGeneration/decl.cpp:    assert(ThisType() -> HeaderProcessed());
astGeneration/decl.cpp:    for (unsigned i = 0; i < class_body -> NumMethods(); i++)
astGeneration/decl.cpp:        ProcessMethodDeclaration(class_body -> Method(i));
astGeneration/decl.cpp:    ThisType() -> MarkMethodMembersProcessed();
astGeneration/decl.cpp:    assert(ThisType() -> HeaderProcessed());
astGeneration/decl.cpp:    for (i = 0; i < class_body -> NumInstanceVariables(); i++)
astGeneration/decl.cpp:        ProcessFieldDeclaration(class_body -> InstanceVariable(i));
astGeneration/decl.cpp:    for (i = 0; i < class_body -> NumClassVariables(); i++)
astGeneration/decl.cpp:        ProcessFieldDeclaration(class_body -> ClassVariable(i));
astGeneration/decl.cpp:    ThisType() -> MarkFieldMembersProcessed();
astGeneration/decl.cpp:    assert(this_type -> HeaderProcessed());
astGeneration/decl.cpp:    // Does it have any non-default constructors?
astGeneration/decl.cpp:    for (unsigned i = 0; i < class_body -> NumConstructors(); ++i)
astGeneration/decl.cpp:            class_body -> Constructor(i);
astGeneration/decl.cpp:        if (! constructor_declaration -> IsValid())
astGeneration/decl.cpp:        MethodSymbol* constructor = constructor_declaration ->
astGeneration/decl.cpp:        if (constructor -> ACC_PRIVATE())
astGeneration/decl.cpp:        if (class_body -> default_constructor == NULL ||
astGeneration/decl.cpp:            constructor != class_body -> default_constructor -> constructor_symbol)
astGeneration/decl.cpp:    for (unsigned i = 0; i < class_body -> NumMethods(); ++i)
astGeneration/decl.cpp:        AstMethodDeclaration* method_declaration = class_body -> Method(i);
astGeneration/decl.cpp:        if (! method_declaration -> IsValid())
astGeneration/decl.cpp:        MethodSymbol* method = method_declaration -> method_symbol;
astGeneration/decl.cpp:        if (! method -> ACC_STATIC())
astGeneration/decl.cpp:        if (! this_type -> ACC_INTERFACE() && ! method -> ACC_ABSTRACT())
astGeneration/decl.cpp:            if (method -> name_symbol == control.equals_name_symbol &&
astGeneration/decl.cpp:                method -> Type() == control.boolean_type &&
astGeneration/decl.cpp:                method -> NumFormalParameters() == 1 &&
astGeneration/decl.cpp:                has_correct_equals_method = (method -> FormalParameter(0) ->
astGeneration/decl.cpp:            if (method -> name_symbol == control.hashCode_name_symbol &&
astGeneration/decl.cpp:                method -> Type() == control.int_type &&
astGeneration/decl.cpp:                method -> NumFormalParameters() == 0)
astGeneration/decl.cpp:                       equals_method -> method_declarator -> identifier_token,
astGeneration/decl.cpp:                       this_type -> Name());
astGeneration/decl.cpp:                       equals_method -> method_declarator -> identifier_token,
astGeneration/decl.cpp:                       this_type -> Name());
astGeneration/decl.cpp:                       hashCode_method -> method_declarator -> identifier_token,
astGeneration/decl.cpp:                       this_type -> Name());
astGeneration/decl.cpp:    bool is_non_empty_class = (class_body -> NumClassVariables() > 0 ||
astGeneration/decl.cpp:                               class_body -> NumInstanceVariables() > 0 ||
astGeneration/decl.cpp:                               class_body -> NumMethods() > 0);
astGeneration/decl.cpp:    bool has_instance_members = (class_body -> NumInstanceVariables() > 0 ||
astGeneration/decl.cpp:        ! this_type -> ACC_INTERFACE() &&
astGeneration/decl.cpp:        ! this_type -> ACC_ABSTRACT() &&
astGeneration/decl.cpp:        ! this_type -> Anonymous() &&
astGeneration/decl.cpp:        this_type -> super == control.Object())
astGeneration/decl.cpp:                       class_body -> identifier_token,
astGeneration/decl.cpp:                       this_type -> Name());
astGeneration/decl.cpp:    if (this_type -> ACC_INTERFACE() &&
astGeneration/decl.cpp:        this_type -> super == control.Object() &&
astGeneration/decl.cpp:        class_body -> NumMethods() == 0)
astGeneration/decl.cpp:        int field_count = class_body -> NumClassVariables() +
astGeneration/decl.cpp:                          class_body -> NumInstanceVariables();
astGeneration/decl.cpp:                           class_body -> identifier_token,
astGeneration/decl.cpp:                           this_type -> Name());
astGeneration/decl.cpp:    if (! this_type -> Implements(control.Serializable()))
astGeneration/decl.cpp:    if (this_type -> IsInner())
astGeneration/decl.cpp:                       class_body -> identifier_token);
astGeneration/decl.cpp:    for (unsigned i = 0; i < class_body -> NumClassVariables(); ++i)
astGeneration/decl.cpp:        AstFieldDeclaration* fd = class_body -> ClassVariable(i);
astGeneration/decl.cpp:        for (unsigned j = 0; j < fd -> NumVariableDeclarators(); ++j)
astGeneration/decl.cpp:            AstVariableDeclarator* vd = fd -> VariableDeclarator(j);
astGeneration/decl.cpp:            NameSymbol* name_symbol = lex_stream -> NameSymbol(vd ->
astGeneration/decl.cpp:                variable_declarator_name -> identifier_token);
astGeneration/decl.cpp:                       class_body -> identifier_token);
astGeneration/decl.cpp:    state_stack.Push(class_body -> semantic_environment);
astGeneration/decl.cpp:    assert(! this_type -> ConstructorMembersProcessed() || this_type -> Bad());
astGeneration/decl.cpp:    assert(! this_type -> MethodMembersProcessed() || this_type -> Bad());
astGeneration/decl.cpp:    assert(! this_type -> FieldMembersProcessed() || this_type -> Bad());
astGeneration/decl.cpp:    delete this_type -> innertypes_closure; // save some space !!!
astGeneration/decl.cpp:    this_type -> innertypes_closure = NULL;
astGeneration/decl.cpp:    if (this_type -> IsInner())
astGeneration/decl.cpp:        for (i = 0; i < class_body -> NumStaticInitializers(); i++)
astGeneration/decl.cpp:                           class_body -> StaticInitializer(i),
astGeneration/decl.cpp:                           this_type -> Name(), this_type -> FileLoc());
astGeneration/decl.cpp:    for (i = 0; i < this_type -> NumNestedTypes(); i++)
astGeneration/decl.cpp:        TypeSymbol* inner_type = this_type -> NestedType(i);
astGeneration/decl.cpp:        ProcessMembers(inner_type -> declaration);
astGeneration/decl.cpp:    if (compilation_unit -> BadCompilationUnitCast())
astGeneration/decl.cpp:    state_stack.Push(class_body -> semantic_environment);
astGeneration/decl.cpp:    TokenIndex identifier = class_body -> identifier_token;
astGeneration/decl.cpp:    assert(this_type -> ConstructorMembersProcessed());
astGeneration/decl.cpp:    assert(this_type -> MethodMembersProcessed());
astGeneration/decl.cpp:    assert(this_type -> FieldMembersProcessed());
astGeneration/decl.cpp:    if (! this_type -> expanded_method_table)
astGeneration/decl.cpp:    if (this_type -> super && ! this_type -> Bad())
astGeneration/decl.cpp:        if (! this_type -> ACC_ABSTRACT())
astGeneration/decl.cpp:                this_type -> expanded_method_table;
astGeneration/decl.cpp:                 i < expanded_table -> symbol_pool.Length(); i++)
astGeneration/decl.cpp:                    expanded_table -> symbol_pool[i] -> method_symbol;
astGeneration/decl.cpp:                if (method -> ACC_ABSTRACT())
astGeneration/decl.cpp:                    TypeSymbol* containing_type = method -> containing_type;
astGeneration/decl.cpp:                        if (! method -> IsTyped())
astGeneration/decl.cpp:                            method -> ProcessMethodSignature(this, identifier);
astGeneration/decl.cpp:                                       identifier, method -> Header(),
astGeneration/decl.cpp:                                       containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                       containing_type -> ExternalName(),
astGeneration/decl.cpp:                                       this_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                       this_type -> ExternalName());
astGeneration/decl.cpp:        PackageSymbol* package = this_type -> ContainingPackage();
astGeneration/decl.cpp:        for (TypeSymbol* super_type = this_type -> super;
astGeneration/decl.cpp:             super_type && super_type -> ACC_ABSTRACT();
astGeneration/decl.cpp:             super_type = super_type -> super)
astGeneration/decl.cpp:            if (super_type -> ContainingPackage() == package)
astGeneration/decl.cpp:            package = super_type -> ContainingPackage();
astGeneration/decl.cpp:                super_type -> expanded_method_table;
astGeneration/decl.cpp:                 i < super_expanded_table -> symbol_pool.Length(); i++)
astGeneration/decl.cpp:                    super_expanded_table -> symbol_pool[i] -> method_symbol;
astGeneration/decl.cpp:                // non-default methods were inherited.
astGeneration/decl.cpp:                if (! method -> ACC_ABSTRACT() || method -> ACC_PUBLIC() ||
astGeneration/decl.cpp:                    method -> ACC_PROTECTED())
astGeneration/decl.cpp:                TypeSymbol* containing_type = method -> containing_type;
astGeneration/decl.cpp:                if (! method -> IsTyped())
astGeneration/decl.cpp:                    method -> ProcessMethodSignature(this, identifier);
astGeneration/decl.cpp:                     intermediate = intermediate -> super)
astGeneration/decl.cpp:                    MethodShadowSymbol* shadow = intermediate ->
astGeneration/decl.cpp:                        expanded_method_table ->
astGeneration/decl.cpp:                    if (intermediate -> ContainingPackage() != package)
astGeneration/decl.cpp:                        if ((shadow -> method_symbol -> ACC_PUBLIC() ||
astGeneration/decl.cpp:                             shadow -> method_symbol -> ACC_PROTECTED()) &&
astGeneration/decl.cpp:                            (shadow -> method_symbol -> Type() !=
astGeneration/decl.cpp:                             method -> Type()))
astGeneration/decl.cpp:                            if (method_clash == shadow -> method_symbol)
astGeneration/decl.cpp:                            else method_clash = shadow -> method_symbol;
astGeneration/decl.cpp:                    else if (shadow -> method_symbol -> containing_type ==
astGeneration/decl.cpp:                    ! this_type -> ACC_ABSTRACT())
astGeneration/decl.cpp:                    ReportSemError((this_type -> Anonymous()
astGeneration/decl.cpp:                                   identifier, method -> Header(),
astGeneration/decl.cpp:                                   containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   containing_type -> ExternalName(),
astGeneration/decl.cpp:                                   this_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   this_type -> ExternalName());
astGeneration/decl.cpp:                    TypeSymbol* base_type = method_clash -> containing_type;
astGeneration/decl.cpp:                                   this_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   this_type -> ExternalName(),
astGeneration/decl.cpp:                                   method_clash -> Header(),
astGeneration/decl.cpp:                                   base_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   base_type -> ExternalName(),
astGeneration/decl.cpp:                                   method -> Header(),
astGeneration/decl.cpp:                                   containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   containing_type -> ExternalName());
astGeneration/decl.cpp:    for (unsigned l = 0; l < this_type -> NumNestedTypes(); l++)
astGeneration/decl.cpp:        TypeSymbol* inner_type = this_type -> NestedType(l);
astGeneration/decl.cpp:        CompleteSymbolTable(inner_type -> declaration);
astGeneration/decl.cpp:    for (unsigned i = 0; i < compilation_unit -> NumTypeDeclarations(); i++)
astGeneration/decl.cpp:            compilation_unit -> TypeDeclaration(i);
astGeneration/decl.cpp:        if (type_declaration -> class_body &&
astGeneration/decl.cpp:            type_declaration -> class_body -> semantic_environment)
astGeneration/decl.cpp:            CleanUpType(type_declaration -> class_body ->
astGeneration/decl.cpp:                        semantic_environment -> Type());
astGeneration/decl.cpp:    type -> DeleteAnonymousTypes();
astGeneration/decl.cpp:    for (unsigned i = 0; i < type -> NumNestedTypes(); i++)
astGeneration/decl.cpp:        CleanUpType(type -> NestedType(i));
astGeneration/decl.cpp:    type -> CompressSpace(); // space optimization
astGeneration/decl.cpp:    for (unsigned j = 0; j < type -> NumMethodSymbols(); j++)
astGeneration/decl.cpp:        type -> MethodSym(j) -> CleanUp();
astGeneration/decl.cpp:    delete type -> local;
astGeneration/decl.cpp:    type -> local = NULL;
astGeneration/decl.cpp:    delete type -> non_local;
astGeneration/decl.cpp:    type -> non_local = NULL;
astGeneration/decl.cpp:    delete type -> semantic_environment;
astGeneration/decl.cpp:    type -> semantic_environment = NULL;
astGeneration/decl.cpp:    type -> declaration = NULL;
astGeneration/decl.cpp:    if (file_symbol && file_symbol -> IsJava())
astGeneration/decl.cpp:        if (! file_symbol -> semantic)
astGeneration/decl.cpp:        type = package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:            type = package -> InsertOuterTypeSymbol(name_symbol);
astGeneration/decl.cpp:            type -> MarkBad();
astGeneration/decl.cpp:            type -> outermost_type = type;
astGeneration/decl.cpp:            type -> supertypes_closure = new SymbolSet;
astGeneration/decl.cpp:            type -> subtypes = new SymbolSet;
astGeneration/decl.cpp:            type -> semantic_environment =
astGeneration/decl.cpp:                type -> super = (type == control.Throwable()
astGeneration/decl.cpp:            type -> SetOwner(package);
astGeneration/decl.cpp:            type -> SetSignature(control);
astGeneration/decl.cpp:            type -> file_symbol = file_symbol;
astGeneration/decl.cpp:            file_symbol -> types.Next() = type;
astGeneration/decl.cpp:                           type -> ContainingPackageName(),
astGeneration/decl.cpp:                           type -> ExternalName());
astGeneration/decl.cpp:        else if (file_symbol -> semantic -> NumErrors())
astGeneration/decl.cpp:                           name_symbol -> Name());
astGeneration/decl.cpp:        type = package -> InsertOuterTypeSymbol(name_symbol);
astGeneration/decl.cpp:        type -> outermost_type = type;
astGeneration/decl.cpp:        type -> supertypes_closure = new SymbolSet;
astGeneration/decl.cpp:        type -> subtypes = new SymbolSet;
astGeneration/decl.cpp:        type -> SetOwner(package);
astGeneration/decl.cpp:        type -> SetSignature(control);
astGeneration/decl.cpp:        type -> file_symbol = file_symbol;
astGeneration/decl.cpp:        type -> SetLocation();
astGeneration/decl.cpp:        file_symbol -> package = package;
astGeneration/decl.cpp:        file_symbol -> types.Next() = type;
astGeneration/decl.cpp:        assert (! type -> IsNested());
astGeneration/decl.cpp:        PackageSymbol* subpackage = package -> FindPackageSymbol(name_symbol);
astGeneration/decl.cpp:            subpackage = package -> InsertPackageSymbol(name_symbol);
astGeneration/decl.cpp:        if (subpackage -> directory.Length())
astGeneration/decl.cpp:            if (package -> directory.Length())
astGeneration/decl.cpp:                               subpackage -> PackageName());
astGeneration/decl.cpp:            type = package -> InsertOuterTypeSymbol(name_symbol);
astGeneration/decl.cpp:            type -> outermost_type = type;
astGeneration/decl.cpp:            type -> SetOwner(package);
astGeneration/decl.cpp:            type -> SetSignature(control);
astGeneration/decl.cpp:            type -> MarkBad();
astGeneration/decl.cpp:                           type -> ContainingPackageName(),
astGeneration/decl.cpp:                           type -> ExternalName());
astGeneration/decl.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:    TypeSymbol* outermost_type = type -> outermost_type;
astGeneration/decl.cpp:    if (! outermost_type -> non_local)
astGeneration/decl.cpp:        outermost_type -> non_local = new SymbolSet;
astGeneration/decl.cpp:    if (! outermost_type -> local)
astGeneration/decl.cpp:        outermost_type -> local = new SymbolSet;
astGeneration/decl.cpp:    int length = type -> ExternalNameLength() + 1 +
astGeneration/decl.cpp:        name_symbol -> NameLength(); // +1 for $,... +1 for $
astGeneration/decl.cpp:    wcscpy(external_name, type -> ExternalName());
astGeneration/decl.cpp:    wcscat(external_name, name_symbol -> Name());
astGeneration/decl.cpp:    TypeSymbol* inner_type = type -> InsertNestedTypeSymbol(name_symbol);
astGeneration/decl.cpp:    inner_type -> MarkBad();
astGeneration/decl.cpp:    inner_type -> outermost_type = type -> outermost_type;
astGeneration/decl.cpp:    inner_type -> supertypes_closure = new SymbolSet;
astGeneration/decl.cpp:    inner_type -> subtypes = new SymbolSet;
astGeneration/decl.cpp:    inner_type -> SetExternalIdentity(control.FindOrInsertName(external_name,
astGeneration/decl.cpp:    inner_type -> super = control.Object();
astGeneration/decl.cpp:    inner_type -> SetOwner(type);
astGeneration/decl.cpp:    if (! type -> Bad())
astGeneration/decl.cpp:                       inner_type -> ContainingPackageName(),
astGeneration/decl.cpp:                       inner_type -> ExternalName());
astGeneration/decl.cpp:    if (name -> base_opt)
astGeneration/decl.cpp:        ProcessImportQualifiedName(name -> base_opt);
astGeneration/decl.cpp:        Symbol* symbol = name -> base_opt -> symbol;
astGeneration/decl.cpp:        TypeSymbol* type = symbol -> TypeCast();
astGeneration/decl.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:            if (type -> Bad()) // Avoid chain-reaction errors.
astGeneration/decl.cpp:                name -> symbol = control.no_type;
astGeneration/decl.cpp:            if (! type -> expanded_type_table)
astGeneration/decl.cpp:                ComputeTypesClosure(type, name -> identifier_token);
astGeneration/decl.cpp:            TypeShadowSymbol* type_shadow_symbol = type ->
astGeneration/decl.cpp:                expanded_type_table -> FindTypeShadowSymbol(name_symbol);
astGeneration/decl.cpp:            // inherited and hence non-canonical). But we do need an extra
astGeneration/decl.cpp:                inner_type = type_shadow_symbol -> type_symbol;
astGeneration/decl.cpp:            else if (type != inner_type -> owner)
astGeneration/decl.cpp:                               name, name_symbol -> Name(),
astGeneration/decl.cpp:                               inner_type -> ContainingPackageName(),
astGeneration/decl.cpp:                               inner_type -> ExternalName());
astGeneration/decl.cpp:            else if (inner_type -> ACC_PRIVATE() ||
astGeneration/decl.cpp:                     (! inner_type -> ACC_PUBLIC() &&
astGeneration/decl.cpp:                      inner_type -> ContainingPackage() != this_package))
astGeneration/decl.cpp:            name -> symbol = inner_type;
astGeneration/decl.cpp:            PackageSymbol* package = symbol -> PackageCast();
astGeneration/decl.cpp:            type = package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:                                    name -> identifier_token);
astGeneration/decl.cpp:            else if (type -> SourcePending())
astGeneration/decl.cpp:                control.ProcessHeaders(type -> file_symbol);
astGeneration/decl.cpp:                if (! type -> ACC_PUBLIC() &&
astGeneration/decl.cpp:                    type -> ContainingPackage() != this_package)
astGeneration/decl.cpp:                name -> symbol = type;
astGeneration/decl.cpp:                    package -> FindPackageSymbol(name_symbol);
astGeneration/decl.cpp:                    subpackage = package -> InsertPackageSymbol(name_symbol);
astGeneration/decl.cpp:                name -> symbol = subpackage;
astGeneration/decl.cpp:        // all sorts (top-level or inner) can be imported by either kind of
astGeneration/decl.cpp:                                              name -> identifier_token);
astGeneration/decl.cpp:                           name -> identifier_token,
astGeneration/decl.cpp:                           lex_stream -> NameString(name -> identifier_token));
astGeneration/decl.cpp:            name -> symbol = control.no_type;
astGeneration/decl.cpp:                lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:            name -> symbol = package;
astGeneration/decl.cpp:// Processes a package-or-type name. If an accessible type exists, it is
astGeneration/decl.cpp:// The result is stored in name->symbol.
astGeneration/decl.cpp:    if (name -> base_opt)
astGeneration/decl.cpp:        ProcessPackageOrType(name -> base_opt);
astGeneration/decl.cpp:        Symbol* symbol = name -> base_opt -> symbol;
astGeneration/decl.cpp:        TypeSymbol* type = symbol -> TypeCast();
astGeneration/decl.cpp:            name -> symbol = MustFindNestedType(type, name);
astGeneration/decl.cpp:            PackageSymbol* package = symbol -> PackageCast();
astGeneration/decl.cpp:                lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:            type = package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:                                    name -> identifier_token);
astGeneration/decl.cpp:            else if (type -> SourcePending())
astGeneration/decl.cpp:                control.ProcessHeaders(type -> file_symbol);
astGeneration/decl.cpp:                name -> symbol = type;
astGeneration/decl.cpp:                    lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:                    package -> FindPackageSymbol(name_symbol);
astGeneration/decl.cpp:                    subpackage = package -> InsertPackageSymbol(name_symbol);
astGeneration/decl.cpp:                name -> symbol = subpackage;
astGeneration/decl.cpp:                if (subpackage -> directory.Length() == 0)
astGeneration/decl.cpp:                                   name -> identifier_token,
astGeneration/decl.cpp:                                   subpackage -> PackageName());
astGeneration/decl.cpp:        TypeSymbol* type = FindType(name -> identifier_token);
astGeneration/decl.cpp:            name -> symbol = type;
astGeneration/decl.cpp:                lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:            if (package -> directory.Length() == 0)
astGeneration/decl.cpp:                    NameSymbol* name_symbol = lex_stream ->
astGeneration/decl.cpp:                        NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:                    for (TypeSymbol* super_type = ThisType() -> super;
astGeneration/decl.cpp:                         super_type; super_type = super_type -> super)
astGeneration/decl.cpp:                        assert(super_type -> expanded_type_table);
astGeneration/decl.cpp:                            super_type -> expanded_type_table ->
astGeneration/decl.cpp:                            type = type_shadow_symbol -> type_symbol;
astGeneration/decl.cpp:                    name -> symbol = type;
astGeneration/decl.cpp:                                   name -> identifier_token,
astGeneration/decl.cpp:                                   package -> PackageName());
astGeneration/decl.cpp:                    name -> symbol = package;
astGeneration/decl.cpp:            else name -> symbol = package;
astGeneration/decl.cpp:    ProcessImportQualifiedName(import_declaration -> name);
astGeneration/decl.cpp:    Symbol* symbol = import_declaration -> name -> symbol;
astGeneration/decl.cpp:    PackageSymbol* package = symbol -> PackageCast();
astGeneration/decl.cpp:    if (package && package -> directory.Length() == 0)
astGeneration/decl.cpp:                       import_declaration -> name,
astGeneration/decl.cpp:                       package -> PackageName());
astGeneration/decl.cpp:    // Two or more type-import-on-demand may name the same package; the effect
astGeneration/decl.cpp:    TypeSymbol* type = symbol -> TypeCast();
astGeneration/decl.cpp:        type -> IsDeprecated() && type -> file_symbol != source_file_symbol)
astGeneration/decl.cpp:                       import_declaration -> name,
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:    TypeSymbol* type = package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:        if (type -> SourcePending())
astGeneration/decl.cpp:            control.ProcessHeaders(type -> file_symbol);
astGeneration/decl.cpp:    ProcessImportQualifiedName(import_declaration -> name);
astGeneration/decl.cpp:    Symbol* symbol = import_declaration -> name -> symbol;
astGeneration/decl.cpp:    PackageSymbol* package = symbol -> PackageCast();
astGeneration/decl.cpp:    TypeSymbol* type = symbol -> TypeCast();
astGeneration/decl.cpp:    // we can give a better message than "expected '.'". If a non-type is
astGeneration/decl.cpp:    // imported, we create a place-holder type so that the use of the
astGeneration/decl.cpp:                       import_declaration -> name,
astGeneration/decl.cpp:                       package -> PackageName());
astGeneration/decl.cpp:        NameSymbol* name_symbol = lex_stream ->
astGeneration/decl.cpp:            NameSymbol(import_declaration -> name -> RightToken());
astGeneration/decl.cpp:        type = package -> InsertOuterTypeSymbol(name_symbol);
astGeneration/decl.cpp:        type -> MarkBad();
astGeneration/decl.cpp:        type -> super = control.no_type;
astGeneration/decl.cpp:        type -> outermost_type = control.no_type;
astGeneration/decl.cpp:    // If two single-type-import declarations in the same compilation unit
astGeneration/decl.cpp:    // attempt to import types with the same simple name, then a compile-time
astGeneration/decl.cpp:    for (k = 0; k < compilation_unit -> NumTypeDeclarations(); k++)
astGeneration/decl.cpp:        AstDeclaredType* declaration = compilation_unit -> TypeDeclaration(k);
astGeneration/decl.cpp:        if (declaration -> class_body &&
astGeneration/decl.cpp:            declaration -> class_body -> semantic_environment)
astGeneration/decl.cpp:                declaration -> class_body -> semantic_environment -> Type();
astGeneration/decl.cpp:            if (old_type -> Identity() == type -> Identity())
astGeneration/decl.cpp:    if (k < compilation_unit -> NumTypeDeclarations())
astGeneration/decl.cpp:        AstName* name = import_declaration -> name;
astGeneration/decl.cpp:        package = name -> base_opt
astGeneration/decl.cpp:            ? name -> base_opt -> symbol -> PackageCast()
astGeneration/decl.cpp:                           lex_stream -> NameString(name -> identifier_token),
astGeneration/decl.cpp:                           old_type -> FileLoc());
astGeneration/decl.cpp:                           lex_stream -> NameString(name -> identifier_token),
astGeneration/decl.cpp:                           old_type -> FileLoc());
astGeneration/decl.cpp:        for (i = 0; i < compilation_unit -> NumImportDeclarations(); i++)
astGeneration/decl.cpp:                compilation_unit -> ImportDeclaration(i) -> name -> Type();
astGeneration/decl.cpp:            if (compilation_unit -> ImportDeclaration(i) == import_declaration ||
astGeneration/decl.cpp:                (other_type && other_type -> Identity() == type -> Identity()))
astGeneration/decl.cpp:        assert(i < compilation_unit -> NumImportDeclarations());
astGeneration/decl.cpp:        if (compilation_unit -> ImportDeclaration(i) == import_declaration)
astGeneration/decl.cpp:            import_declaration -> name -> symbol = type;
astGeneration/decl.cpp:            AstName* name = compilation_unit -> ImportDeclaration(i) -> name;
astGeneration/decl.cpp:            FileLocation file_location(lex_stream, name -> identifier_token);
astGeneration/decl.cpp:                           lex_stream -> NameString(name -> identifier_token),
astGeneration/decl.cpp:    if (control.option.deprecation && type -> IsDeprecated() &&
astGeneration/decl.cpp:        type -> file_symbol != source_file_symbol)
astGeneration/decl.cpp:                       import_declaration -> name,
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:    AccessFlags access_flags = this_type -> ACC_INTERFACE()
astGeneration/decl.cpp:    // JLS2 8.1.2 - Inner classes may not have static fields unless they are
astGeneration/decl.cpp:    // initializer, we check that it is indeed a compile-time constant
astGeneration/decl.cpp:    if (this_type -> IsInner() && access_flags.ACC_STATIC())
astGeneration/decl.cpp:            assert(field_declaration -> modifiers_opt &&
astGeneration/decl.cpp:                   field_declaration -> modifiers_opt -> static_token_opt);
astGeneration/decl.cpp:                           field_declaration -> modifiers_opt -> static_token_opt,
astGeneration/decl.cpp:                           this_type -> Name(),
astGeneration/decl.cpp:                           this_type -> FileLoc());
astGeneration/decl.cpp:        lex_stream -> IsDeprecated(field_declaration -> LeftToken());
astGeneration/decl.cpp:    bool deprecated_type = this_type -> IsDeprecated();
astGeneration/decl.cpp:        this_type -> MarkDeprecated();
astGeneration/decl.cpp:    ProcessType(field_declaration -> type);
astGeneration/decl.cpp:    TypeSymbol* field_type = field_declaration -> type -> symbol;
astGeneration/decl.cpp:        this_type -> ResetDeprecated();
astGeneration/decl.cpp:         i < field_declaration -> NumVariableDeclarators(); i++)
astGeneration/decl.cpp:            field_declaration -> VariableDeclarator(i);
astGeneration/decl.cpp:            variable_declarator -> variable_declarator_name;
astGeneration/decl.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:        if (this_type -> FindVariableSymbol(name_symbol))
astGeneration/decl.cpp:                           name -> identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                           this_type -> Name(),
astGeneration/decl.cpp:                           this_type -> FindVariableSymbol(name_symbol) -> FileLoc());
astGeneration/decl.cpp:                this_type -> InsertVariableSymbol(name_symbol);
astGeneration/decl.cpp:                field_type -> num_dimensions + name -> NumBrackets();
astGeneration/decl.cpp:            variable -> SetType(field_type -> GetArrayType(this, dims));
astGeneration/decl.cpp:            variable -> SetFlags(access_flags);
astGeneration/decl.cpp:            variable -> SetOwner(this_type);
astGeneration/decl.cpp:            variable -> declarator = variable_declarator;
astGeneration/decl.cpp:                (dims || ! variable_declarator -> variable_initializer_opt ||
astGeneration/decl.cpp:                 (! field_type -> Primitive() &&
astGeneration/decl.cpp:                               name -> identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                               this_type -> Name(), this_type -> FileLoc());
astGeneration/decl.cpp:            variable_declarator -> symbol = variable;
astGeneration/decl.cpp:            variable -> SetLocation();
astGeneration/decl.cpp:                variable -> MarkDeprecated();
astGeneration/decl.cpp:    TypeSymbol* field_type = field_declaration -> type -> symbol;
astGeneration/decl.cpp:    NameSymbol* name_symbol = lex_stream ->
astGeneration/decl.cpp:        NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:        field_type -> IsArray())
astGeneration/decl.cpp:        // FIXME: shouldn't warn if it's a zero-length array.
astGeneration/decl.cpp:                       name, name_symbol -> Name());
astGeneration/decl.cpp:        bool is_serializable = this_type -> Implements(control.Serializable());
astGeneration/decl.cpp:        name_symbol -> IsBadStyleForConstantField())
astGeneration/decl.cpp:                       name -> identifier_token, name_symbol -> Name());
astGeneration/decl.cpp:             name_symbol -> IsBadStyleForField())
astGeneration/decl.cpp:                       name -> identifier_token, name_symbol -> Name());
astGeneration/decl.cpp:    if (this_type -> ACC_STRICTFP())
astGeneration/decl.cpp:    if (constructor_declaration -> type_parameters_opt)
astGeneration/decl.cpp:                       constructor_declaration -> type_parameters_opt);
astGeneration/decl.cpp:        constructor_declaration -> constructor_declarator;
astGeneration/decl.cpp:        lex_stream -> NameString(constructor_declarator -> identifier_token);
astGeneration/decl.cpp:    if (this_type -> Anonymous())
astGeneration/decl.cpp:    else if (lex_stream -> NameSymbol(constructor_declarator -> identifier_token) != this_type -> Identity())
astGeneration/decl.cpp:        if (Spell::Index(constructor_name, this_type -> Name()) >= 5)
astGeneration/decl.cpp:                           constructor_declarator -> identifier_token,
astGeneration/decl.cpp:                           constructor_name, this_type -> Name());
astGeneration/decl.cpp:            constructor_name = this_type -> Name(); // correct the name
astGeneration/decl.cpp:                           constructor_declarator -> identifier_token,
astGeneration/decl.cpp:                           constructor_name, this_type -> Name());
astGeneration/decl.cpp:    // margin for one-liners.
astGeneration/decl.cpp:        new BlockSymbol(constructor_declarator -> NumFormalParameters() + 3);
astGeneration/decl.cpp:    block_symbol -> max_variable_index = 1;
astGeneration/decl.cpp:        ? lex_stream -> NameSymbol(constructor_declarator -> identifier_token)
astGeneration/decl.cpp:    MethodSymbol* constructor = this_type -> FindMethodSymbol(name_symbol);
astGeneration/decl.cpp:    if (constructor && this_type -> FindOverloadMethod(constructor,
astGeneration/decl.cpp:                       constructor_declarator, this_type -> Name(),
astGeneration/decl.cpp:                       constructor -> FileLoc());
astGeneration/decl.cpp:    constructor = this_type -> InsertMethodSymbol(name_symbol);
astGeneration/decl.cpp:    constructor -> SetType(ctor_type);
astGeneration/decl.cpp:    constructor -> SetFlags(access_flags);
astGeneration/decl.cpp:    constructor -> SetContainingType(this_type);
astGeneration/decl.cpp:    constructor -> SetBlockSymbol(block_symbol);
astGeneration/decl.cpp:    constructor -> declaration = constructor_declaration;
astGeneration/decl.cpp:    constructor -> SetLocation();
astGeneration/decl.cpp:    if (this_type -> EnclosingType())
astGeneration/decl.cpp:            block_symbol -> InsertVariableSymbol(control.this_name_symbol);
astGeneration/decl.cpp:        this0_variable -> SetType(this_type -> ContainingType());
astGeneration/decl.cpp:        this0_variable -> SetOwner(constructor);
astGeneration/decl.cpp:        this0_variable -> SetLocalVariableIndex(block_symbol ->
astGeneration/decl.cpp:        this0_variable -> MarkComplete();
astGeneration/decl.cpp:        this0_variable -> SetACC_SYNTHETIC();
astGeneration/decl.cpp:         i < constructor_declarator -> NumFormalParameters(); i++)
astGeneration/decl.cpp:            constructor_declarator -> FormalParameter(i) -> formal_declarator;
astGeneration/decl.cpp:        VariableSymbol* symbol = formal_declarator -> symbol;
astGeneration/decl.cpp:        symbol -> SetOwner(constructor);
astGeneration/decl.cpp:        symbol -> SetLocalVariableIndex(block_symbol -> max_variable_index++);
astGeneration/decl.cpp:        symbol -> MarkComplete();
astGeneration/decl.cpp:        if (control.IsDoubleWordType(symbol -> Type()))
astGeneration/decl.cpp:            block_symbol -> max_variable_index++;
astGeneration/decl.cpp:        symbol -> declarator = formal_declarator;
astGeneration/decl.cpp:        symbol -> SetLocation();
astGeneration/decl.cpp:        constructor -> AddFormalParameter(symbol);
astGeneration/decl.cpp:    constructor -> SetSignature(control);
astGeneration/decl.cpp:    for (unsigned k = 0; k < constructor_declaration -> NumThrows(); k++)
astGeneration/decl.cpp:        AstTypeName* throw_expr = constructor_declaration -> Throw(k);
astGeneration/decl.cpp:        constructor -> AddThrows(throw_expr -> symbol);
astGeneration/decl.cpp:    constructor_declaration -> constructor_symbol = constructor;
astGeneration/decl.cpp:    if (lex_stream -> IsDeprecated(constructor_declaration -> LeftToken()))
astGeneration/decl.cpp:        constructor -> MarkDeprecated();
astGeneration/decl.cpp:    assert(! type -> ACC_INTERFACE());
astGeneration/decl.cpp:        type -> InsertMethodSymbol(control.init_name_symbol);
astGeneration/decl.cpp:    block_symbol -> max_variable_index = 1; // All types need a spot for "this"
astGeneration/decl.cpp:    constructor -> SetType(type);
astGeneration/decl.cpp:    constructor -> SetContainingType(type);
astGeneration/decl.cpp:    constructor -> SetBlockSymbol(block_symbol);
astGeneration/decl.cpp:    if (type -> ACC_PUBLIC())
astGeneration/decl.cpp:        constructor -> SetACC_PUBLIC();
astGeneration/decl.cpp:    else if (type -> ACC_PROTECTED())
astGeneration/decl.cpp:        constructor -> SetACC_PROTECTED();
astGeneration/decl.cpp:    else if (type -> ACC_PRIVATE())
astGeneration/decl.cpp:        constructor -> SetACC_PRIVATE();
astGeneration/decl.cpp:    if (type -> ACC_STRICTFP())
astGeneration/decl.cpp:        constructor -> SetACC_STRICTFP();
astGeneration/decl.cpp:    if (type -> EnclosingType())
astGeneration/decl.cpp:            block_symbol -> InsertVariableSymbol(control.this_name_symbol);
astGeneration/decl.cpp:        this0_variable -> SetType(type -> ContainingType());
astGeneration/decl.cpp:        this0_variable -> SetOwner(constructor);
astGeneration/decl.cpp:        this0_variable -> SetLocalVariableIndex(block_symbol ->
astGeneration/decl.cpp:        this0_variable -> MarkComplete();
astGeneration/decl.cpp:        this0_variable -> SetACC_SYNTHETIC();
astGeneration/decl.cpp:    constructor -> SetSignature(control);
astGeneration/decl.cpp:    AstClassBody* class_body = type -> declaration;
astGeneration/decl.cpp:        TokenIndex left_loc = class_body -> identifier_token;
astGeneration/decl.cpp:        TokenIndex right_loc = class_body -> left_brace_token - 1;
astGeneration/decl.cpp:            compilation_unit -> ast_pool -> GenMethodDeclarator();
astGeneration/decl.cpp:        method_declarator -> identifier_token = left_loc;
astGeneration/decl.cpp:        method_declarator -> left_parenthesis_token = left_loc;
astGeneration/decl.cpp:        method_declarator -> right_parenthesis_token = right_loc;
astGeneration/decl.cpp:            super_call = compilation_unit -> ast_pool -> GenSuperCall();
astGeneration/decl.cpp:            super_call -> super_token = left_loc;
astGeneration/decl.cpp:            super_call -> arguments = compilation_unit -> ast_pool ->
astGeneration/decl.cpp:            super_call -> semicolon_token = right_loc;
astGeneration/decl.cpp:            compilation_unit -> ast_pool -> GenReturnStatement();
astGeneration/decl.cpp:        return_statement -> return_token = left_loc;
astGeneration/decl.cpp:        return_statement -> semicolon_token = left_loc;
astGeneration/decl.cpp:        return_statement -> is_reachable = true;
astGeneration/decl.cpp:            compilation_unit -> ast_pool -> GenMethodBody();
astGeneration/decl.cpp:        constructor_block -> block_symbol = new BlockSymbol(0);
astGeneration/decl.cpp:        constructor_block -> left_brace_token  = left_loc;
astGeneration/decl.cpp:        constructor_block -> right_brace_token = right_loc;
astGeneration/decl.cpp:        constructor_block -> AllocateStatements(1);
astGeneration/decl.cpp:        constructor_block -> AddStatement(return_statement);
astGeneration/decl.cpp:        constructor_block -> explicit_constructor_opt = super_call;
astGeneration/decl.cpp:            compilation_unit -> ast_pool -> GenConstructorDeclaration();
astGeneration/decl.cpp:        constructor_declaration -> constructor_declarator = method_declarator;
astGeneration/decl.cpp:        constructor_declaration -> constructor_body = constructor_block;
astGeneration/decl.cpp:        constructor_declaration -> constructor_symbol = constructor;
astGeneration/decl.cpp:        constructor -> declaration = constructor_declaration;
astGeneration/decl.cpp:        class_body -> default_constructor = constructor_declaration;
astGeneration/decl.cpp:// of which is necessarily abstract. If one is non-abstract, it must
astGeneration/decl.cpp:    assert(! hidden_method -> ACC_PRIVATE());
astGeneration/decl.cpp:        (method -> containing_type -> ACC_INTERFACE() &&
astGeneration/decl.cpp:         method -> containing_type != base_type &&
astGeneration/decl.cpp:         hidden_method -> containing_type == control.Object()))
astGeneration/decl.cpp:    if (method -> containing_type == base_type && ThisType() == base_type)
astGeneration/decl.cpp:            (AstMethodDeclaration*) method -> declaration;
astGeneration/decl.cpp:            method_declaration -> method_declarator;
astGeneration/decl.cpp:        left_tok = method_declarator -> LeftToken();
astGeneration/decl.cpp:        right_tok = method_declarator -> RightToken();
astGeneration/decl.cpp:        left_tok = ThisType() -> declaration -> identifier_token;
astGeneration/decl.cpp:        right_tok = ThisType() -> declaration -> left_brace_token - 1;
astGeneration/decl.cpp:    if (hidden_method -> Type() != method -> Type())
astGeneration/decl.cpp:        // support Object->Object covariance (and not primitive->primitive,
astGeneration/decl.cpp:        // void->primitive, or void->Object). When loading from .java files,
astGeneration/decl.cpp:        if (hidden_method -> Type() -> IsSubtype(control.Object()) &&
astGeneration/decl.cpp:            method -> Type() -> IsSubtype(hidden_method -> Type()))
astGeneration/decl.cpp:            // even for -source 1.4!
astGeneration/decl.cpp:                ! hidden_method -> containing_type ->
astGeneration/decl.cpp:                  file_symbol -> IsClassOnly())
astGeneration/decl.cpp:                               left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                               hidden_method -> Header());
astGeneration/decl.cpp:        else if (method -> containing_type == base_type)
astGeneration/decl.cpp:            if (base_type -> ACC_INTERFACE() &&
astGeneration/decl.cpp:                hidden_method -> containing_type == control.Object())
astGeneration/decl.cpp:                if (hidden_method -> ACC_PUBLIC())
astGeneration/decl.cpp:                                   left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                                   hidden_method -> Header());
astGeneration/decl.cpp:                    base_type -> MarkBad();
astGeneration/decl.cpp:                                   base_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   base_type -> ExternalName(),
astGeneration/decl.cpp:                                   method -> Header(),
astGeneration/decl.cpp:                                   hidden_method -> Header());
astGeneration/decl.cpp:                               left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                               hidden_method -> Header(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:                base_type -> MarkBad();
astGeneration/decl.cpp:                           left_tok, right_tok, base_type -> ExternalName(),
astGeneration/decl.cpp:                           method -> Header(),
astGeneration/decl.cpp:                           method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           method -> containing_type -> ExternalName(),
astGeneration/decl.cpp:                           hidden_method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:            base_type -> MarkBad();
astGeneration/decl.cpp:    if (method -> containing_type == base_type &&
astGeneration/decl.cpp:        (hidden_method -> ACC_FINAL() ||
astGeneration/decl.cpp:         hidden_method -> containing_type -> ACC_FINAL()))
astGeneration/decl.cpp:        if (base_type -> ACC_INTERFACE())
astGeneration/decl.cpp:                           left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> Header());
astGeneration/decl.cpp:                           left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:        base_type -> MarkBad();
astGeneration/decl.cpp:        hidden_method -> IsDeprecated() &&
astGeneration/decl.cpp:        ! method -> containing_type -> file_symbol -> IsClassOnly())
astGeneration/decl.cpp:                       left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                       hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                       hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:    if (method -> ACC_STATIC() != hidden_method -> ACC_STATIC())
astGeneration/decl.cpp:        if (method -> containing_type == base_type)
astGeneration/decl.cpp:            ReportSemError((method -> ACC_STATIC()
astGeneration/decl.cpp:                           left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:            assert(method -> ACC_STATIC());
astGeneration/decl.cpp:                           left_tok, right_tok, base_type -> ExternalName(),
astGeneration/decl.cpp:                           method -> Header(),
astGeneration/decl.cpp:                           method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           method -> containing_type -> ExternalName(),
astGeneration/decl.cpp:                           hidden_method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:        base_type -> MarkBad();
astGeneration/decl.cpp:    if (hidden_method -> ACC_PUBLIC())
astGeneration/decl.cpp:        if (! method -> ACC_PUBLIC())
astGeneration/decl.cpp:            if (method -> containing_type == base_type)
astGeneration/decl.cpp:                               left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                               method -> AccessString(),
astGeneration/decl.cpp:                               hidden_method -> Header(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:                base_type -> MarkBad();
astGeneration/decl.cpp:            else if (! method -> ACC_ABSTRACT())
astGeneration/decl.cpp:                               base_type -> ExternalName(),
astGeneration/decl.cpp:                               method -> Header(),
astGeneration/decl.cpp:                               method -> AccessString(),
astGeneration/decl.cpp:                               method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                               method -> containing_type -> ExternalName(),
astGeneration/decl.cpp:                               hidden_method -> Header(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:                base_type -> MarkBad();
astGeneration/decl.cpp:    else if (hidden_method -> ACC_PROTECTED())
astGeneration/decl.cpp:        if (! method -> ACC_PROTECTED() &&
astGeneration/decl.cpp:            ! method -> ACC_PUBLIC())
astGeneration/decl.cpp:                           left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                           method -> AccessString(),
astGeneration/decl.cpp:                           hidden_method -> Header(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:            base_type -> MarkBad();
astGeneration/decl.cpp:    else if (method -> ACC_PRIVATE())
astGeneration/decl.cpp:                       left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                       hidden_method -> Header(),
astGeneration/decl.cpp:                       hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                       hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:        base_type -> MarkBad();
astGeneration/decl.cpp:    if (method -> containing_type != base_type && method -> ACC_ABSTRACT())
astGeneration/decl.cpp:    method -> ProcessMethodThrows(this, left_tok);
astGeneration/decl.cpp:    hidden_method -> ProcessMethodThrows(this, left_tok);
astGeneration/decl.cpp:    for (int i = method -> NumThrows() - 1; i >= 0; i--)
astGeneration/decl.cpp:        TypeSymbol* exception = method -> Throws(i);
astGeneration/decl.cpp:        for (k = hidden_method -> NumThrows() - 1; k >= 0; k--)
astGeneration/decl.cpp:            if (exception -> IsSubclass(hidden_method -> Throws(k)))
astGeneration/decl.cpp:            if (method -> containing_type == base_type)
astGeneration/decl.cpp:                if (base_type -> ACC_INTERFACE() &&
astGeneration/decl.cpp:                    hidden_method -> containing_type == control.Object())
astGeneration/decl.cpp:                    if (hidden_method -> ACC_PUBLIC())
astGeneration/decl.cpp:                                       exception -> Name(),
astGeneration/decl.cpp:                                       method -> Header());
astGeneration/decl.cpp:                        base_type -> MarkBad();
astGeneration/decl.cpp:                                   exception -> Name(),
astGeneration/decl.cpp:                                   hidden_method -> Header(),
astGeneration/decl.cpp:                                   hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:                    base_type -> MarkBad();
astGeneration/decl.cpp:                               base_type -> ExternalName(),
astGeneration/decl.cpp:                               exception -> Name(), method -> Header(),
astGeneration/decl.cpp:                               method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                               method -> containing_type -> ExternalName(),
astGeneration/decl.cpp:                               hidden_method -> Header(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ContainingPackageName(),
astGeneration/decl.cpp:                               hidden_method -> containing_type -> ExternalName());
astGeneration/decl.cpp:                base_type -> MarkBad();
astGeneration/decl.cpp:    if (super_type -> Bad())
astGeneration/decl.cpp:        base_type -> MarkBad();
astGeneration/decl.cpp:        *(base_type -> expanded_type_table);
astGeneration/decl.cpp:        *(super_type -> expanded_type_table);
astGeneration/decl.cpp:        TypeSymbol* type = type_shadow_symbol -> type_symbol;
astGeneration/decl.cpp:        if (type -> ACC_PUBLIC() ||
astGeneration/decl.cpp:            type -> ACC_PROTECTED() ||
astGeneration/decl.cpp:            (! type -> ACC_PRIVATE() &&
astGeneration/decl.cpp:             super_type -> ContainingPackage() == base_type -> ContainingPackage()))
astGeneration/decl.cpp:                base_expanded_table.FindTypeShadowSymbol(type -> Identity());
astGeneration/decl.cpp:            if (! shadow || shadow -> type_symbol -> owner != base_type)
astGeneration/decl.cpp:                else shadow -> AddConflict(type);
astGeneration/decl.cpp:                assert(type -> owner != super_type ||
astGeneration/decl.cpp:                       type_shadow_symbol -> NumConflicts() == 0);
astGeneration/decl.cpp:                     j < type_shadow_symbol -> NumConflicts(); j++)
astGeneration/decl.cpp:                    shadow -> AddConflict(type_shadow_symbol -> Conflict(j));
astGeneration/decl.cpp:        else if (! type -> ACC_PRIVATE() &&
astGeneration/decl.cpp:                 type_shadow_symbol -> NumConflicts())
astGeneration/decl.cpp:            assert(type -> owner != super_type);
astGeneration/decl.cpp:                base_expanded_table.FindTypeShadowSymbol(type -> Identity());
astGeneration/decl.cpp:                assert(shadow -> type_symbol -> owner == base_type);
astGeneration/decl.cpp:                    InsertTypeShadowSymbol(type_shadow_symbol -> Conflict(0));
astGeneration/decl.cpp:                     k < type_shadow_symbol -> NumConflicts(); k++)
astGeneration/decl.cpp:                    shadow -> AddConflict(type_shadow_symbol -> Conflict(k));
astGeneration/decl.cpp:    if (super_type -> Bad())
astGeneration/decl.cpp:        base_type -> MarkBad();
astGeneration/decl.cpp:        *(base_type -> expanded_field_table);
astGeneration/decl.cpp:        *(super_type -> expanded_field_table);
astGeneration/decl.cpp:        VariableSymbol* variable = variable_shadow_symbol -> variable_symbol;
astGeneration/decl.cpp:        if (variable -> ACC_PUBLIC() ||
astGeneration/decl.cpp:            variable -> ACC_PROTECTED() ||
astGeneration/decl.cpp:            (! variable -> ACC_PRIVATE() &&
astGeneration/decl.cpp:             super_type -> ContainingPackage() == base_type -> ContainingPackage()))
astGeneration/decl.cpp:                FindVariableShadowSymbol(variable -> Identity());
astGeneration/decl.cpp:            if (! shadow || shadow -> variable_symbol -> owner != base_type)
astGeneration/decl.cpp:                else shadow -> AddConflict(variable);
astGeneration/decl.cpp:                assert(variable -> owner != super_type ||
astGeneration/decl.cpp:                       variable_shadow_symbol -> NumConflicts() == 0);
astGeneration/decl.cpp:                     j < variable_shadow_symbol -> NumConflicts(); j++)
astGeneration/decl.cpp:                    shadow -> AddConflict(variable_shadow_symbol ->
astGeneration/decl.cpp:        else if (! variable -> ACC_PRIVATE() &&
astGeneration/decl.cpp:                 ! variable -> ACC_SYNTHETIC() &&
astGeneration/decl.cpp:                 variable_shadow_symbol -> NumConflicts())
astGeneration/decl.cpp:            assert(variable -> owner != super_type);
astGeneration/decl.cpp:                FindVariableShadowSymbol(variable -> Identity());
astGeneration/decl.cpp:                assert(shadow -> variable_symbol -> owner == base_type);
astGeneration/decl.cpp:                    InsertVariableShadowSymbol(variable_shadow_symbol ->
astGeneration/decl.cpp:                     k < variable_shadow_symbol -> NumConflicts(); k++)
astGeneration/decl.cpp:                    shadow -> AddConflict(variable_shadow_symbol ->
astGeneration/decl.cpp:    if (super_type -> Bad())
astGeneration/decl.cpp:        base_type -> MarkBad();
astGeneration/decl.cpp:        base_type -> expanded_method_table;
astGeneration/decl.cpp:        super_type -> expanded_method_table;
astGeneration/decl.cpp:    PackageSymbol* base_package = base_type -> ContainingPackage();
astGeneration/decl.cpp:    for (i = 0; i < super_expanded_table -> symbol_pool.Length(); i++)
astGeneration/decl.cpp:            super_expanded_table -> symbol_pool[i];
astGeneration/decl.cpp:        MethodSymbol* method = method_shadow_symbol -> method_symbol;
astGeneration/decl.cpp:        if ((base_type -> ACC_INTERFACE() &&
astGeneration/decl.cpp:             super_type -> ACC_INTERFACE() &&
astGeneration/decl.cpp:             method -> containing_type == control.Object()) ||
astGeneration/decl.cpp:            method -> ACC_SYNTHETIC())
astGeneration/decl.cpp:        if (method -> ACC_PUBLIC() || method -> ACC_PROTECTED() ||
astGeneration/decl.cpp:            (! method -> ACC_PRIVATE() &&
astGeneration/decl.cpp:             super_type -> ContainingPackage() == base_package))
astGeneration/decl.cpp:            MethodShadowSymbol* shadow = base_expanded_table ->
astGeneration/decl.cpp:                CheckMethodOverride(shadow -> method_symbol, method,
astGeneration/decl.cpp:                     m < method_shadow_symbol -> NumConflicts(); m++)
astGeneration/decl.cpp:                    CheckMethodOverride(shadow -> method_symbol,
astGeneration/decl.cpp:                                        method_shadow_symbol -> Conflict(m),
astGeneration/decl.cpp:                shadow -> method_symbol -> containing_type != base_type)
astGeneration/decl.cpp:                    shadow = base_expanded_table -> Overload(method);
astGeneration/decl.cpp:                else shadow -> AddConflict(method);
astGeneration/decl.cpp:                assert(method -> containing_type != super_type ||
astGeneration/decl.cpp:                       method_shadow_symbol -> NumConflicts() == 0);
astGeneration/decl.cpp:                     j < method_shadow_symbol -> NumConflicts(); j++)
astGeneration/decl.cpp:                    shadow -> AddConflict(method_shadow_symbol -> Conflict(j));
astGeneration/decl.cpp:        else if (! method -> ACC_PRIVATE())
astGeneration/decl.cpp:            MethodShadowSymbol* shadow = base_expanded_table ->
astGeneration/decl.cpp:            if (method_shadow_symbol -> NumConflicts())
astGeneration/decl.cpp:                assert(method -> containing_type != super_type);
astGeneration/decl.cpp:                    assert(shadow -> method_symbol -> containing_type == base_type);
astGeneration/decl.cpp:                         k < method_shadow_symbol -> NumConflicts(); k++)
astGeneration/decl.cpp:                        CheckMethodOverride(shadow -> method_symbol,
astGeneration/decl.cpp:                                            method_shadow_symbol -> Conflict(k),
astGeneration/decl.cpp:                    shadow = base_expanded_table ->
astGeneration/decl.cpp:                        Overload(method_shadow_symbol -> Conflict(0));
astGeneration/decl.cpp:                         l < method_shadow_symbol -> NumConflicts(); l++)
astGeneration/decl.cpp:                        shadow -> AddConflict(method_shadow_symbol ->
astGeneration/decl.cpp:                assert(shadow -> method_symbol -> containing_type ==
astGeneration/decl.cpp:                        (AstMethodDeclaration*) shadow -> method_symbol -> declaration;
astGeneration/decl.cpp:                        method_declaration -> method_declarator;
astGeneration/decl.cpp:                    left_tok = method_declarator -> LeftToken();
astGeneration/decl.cpp:                    right_tok = method_declarator -> RightToken();
astGeneration/decl.cpp:                    left_tok = ThisType() -> declaration -> identifier_token;
astGeneration/decl.cpp:                        ThisType() -> declaration -> right_brace_token - 1;
astGeneration/decl.cpp:                if (! method -> IsTyped())
astGeneration/decl.cpp:                    method -> ProcessMethodSignature(this, tok);
astGeneration/decl.cpp:                if (! method -> ACC_ABSTRACT() ||
astGeneration/decl.cpp:                    method -> Type() == shadow -> method_symbol -> Type() ||
astGeneration/decl.cpp:                    (! shadow -> method_symbol -> ACC_PUBLIC() &&
astGeneration/decl.cpp:                     ! shadow -> method_symbol -> ACC_PROTECTED()))
astGeneration/decl.cpp:                                   left_tok, right_tok, method -> Header(),
astGeneration/decl.cpp:                                   base_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   base_type -> ExternalName(),
astGeneration/decl.cpp:                                   super_type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   super_type -> ExternalName());
astGeneration/decl.cpp:    // reentered the package, the non-inherited default methods were
astGeneration/decl.cpp:    // is non-inherited only if a class C is in the package, it's subclass
astGeneration/decl.cpp:    while (super_type -> super)
astGeneration/decl.cpp:        super_type = super_type -> super;
astGeneration/decl.cpp:        if (prev -> ContainingPackage() == base_package ||
astGeneration/decl.cpp:            super_type -> ContainingPackage() != base_package)
astGeneration/decl.cpp:        super_expanded_table = super_type -> expanded_method_table;
astGeneration/decl.cpp:        for (i = 0; i < super_expanded_table -> symbol_pool.Length(); i++)
astGeneration/decl.cpp:                super_expanded_table -> symbol_pool[i];
astGeneration/decl.cpp:            MethodSymbol* method = method_shadow_symbol -> method_symbol;
astGeneration/decl.cpp:            if (! method -> ACC_PUBLIC() && ! method -> ACC_PROTECTED() &&
astGeneration/decl.cpp:                ! method -> ACC_PRIVATE() && ! method -> ACC_SYNTHETIC() &&
astGeneration/decl.cpp:                method_shadow_symbol -> NumConflicts() == 0)
astGeneration/decl.cpp:                // found a non-inherited package scope method
astGeneration/decl.cpp:                MethodShadowSymbol* shadow = base_expanded_table ->
astGeneration/decl.cpp:                    shadow -> method_symbol -> containing_type == base_type)
astGeneration/decl.cpp:                    CheckMethodOverride(shadow -> method_symbol, method,
astGeneration/decl.cpp:    if (! type -> HeaderProcessed())
astGeneration/decl.cpp:        type -> ProcessTypeHeaders();
astGeneration/decl.cpp:    type -> expanded_type_table = new ExpandedTypeTable();
astGeneration/decl.cpp:    TypeSymbol* super_class = type -> super;
astGeneration/decl.cpp:        if (! super_class -> expanded_type_table)
astGeneration/decl.cpp:    for (unsigned j = 0; j < type -> NumInterfaces(); j++)
astGeneration/decl.cpp:        TypeSymbol* interf = type -> Interface(j);
astGeneration/decl.cpp:        if (! interf -> expanded_type_table)
astGeneration/decl.cpp:    if (! type -> NestedTypesProcessed())
astGeneration/decl.cpp:        type -> ProcessNestedTypeSignatures(this, tok);
astGeneration/decl.cpp:    for (unsigned i = 0; i < type -> NumTypeSymbols(); i++)
astGeneration/decl.cpp:        if (! type -> TypeSym(i) -> Bad())
astGeneration/decl.cpp:            type -> expanded_type_table ->
astGeneration/decl.cpp:                InsertTypeShadowSymbol(type -> TypeSym(i));
astGeneration/decl.cpp:    for (unsigned k = 0; k < type -> NumInterfaces(); k++)
astGeneration/decl.cpp:        AddInheritedTypes(type, type -> Interface(k));
astGeneration/decl.cpp:    type -> expanded_type_table -> CompressSpace();
astGeneration/decl.cpp:    type -> expanded_field_table = new ExpandedFieldTable();
astGeneration/decl.cpp:    TypeSymbol* super_class = type -> super;
astGeneration/decl.cpp:        if (! super_class -> expanded_field_table)
astGeneration/decl.cpp:    for (unsigned j = 0; j < type -> NumInterfaces(); j++)
astGeneration/decl.cpp:        TypeSymbol* interf = type -> Interface(j);
astGeneration/decl.cpp:        if (! interf -> expanded_field_table)
astGeneration/decl.cpp:    assert(type -> FieldMembersProcessed());
astGeneration/decl.cpp:    for (unsigned i = 0; i < type -> NumVariableSymbols(); i++)
astGeneration/decl.cpp:        VariableSymbol* variable = type -> VariableSym(i);
astGeneration/decl.cpp:        type -> expanded_field_table -> InsertVariableShadowSymbol(variable);
astGeneration/decl.cpp:    for (unsigned k = 0; k < type -> NumInterfaces(); k++)
astGeneration/decl.cpp:        AddInheritedFields(type, type -> Interface(k));
astGeneration/decl.cpp:    type -> expanded_field_table -> CompressSpace();
astGeneration/decl.cpp:    type -> expanded_method_table = new ExpandedMethodTable();
astGeneration/decl.cpp:    TypeSymbol* super_class = type -> super;
astGeneration/decl.cpp:        if (! super_class -> expanded_method_table)
astGeneration/decl.cpp:    for (unsigned j = 0; j < type -> NumInterfaces(); j++)
astGeneration/decl.cpp:        TypeSymbol* interf = type -> Interface(j);
astGeneration/decl.cpp:        if (! interf -> expanded_method_table)
astGeneration/decl.cpp:    assert(type -> MethodMembersProcessed());
astGeneration/decl.cpp:    for (unsigned i = 0; i < type -> NumMethodSymbols(); i++)
astGeneration/decl.cpp:        MethodSymbol* method = type -> MethodSym(i);
astGeneration/decl.cpp:        if (*(method -> Name()) != U_LESS)
astGeneration/decl.cpp:            type -> expanded_method_table -> Overload(method);
astGeneration/decl.cpp:    if (super_class && ! type -> ACC_INTERFACE())
astGeneration/decl.cpp:    for (unsigned k = 0; k < type -> NumInterfaces(); k++)
astGeneration/decl.cpp:        AddInheritedMethods(type, type -> Interface(k), tok);
astGeneration/decl.cpp:    if (type -> ACC_INTERFACE()) // the super class is Object
astGeneration/decl.cpp:    type -> expanded_method_table -> CompressSpace();
astGeneration/decl.cpp:    for (unsigned i = 0; i < method_declarator -> NumFormalParameters(); i++)
astGeneration/decl.cpp:            method_declarator -> FormalParameter(i);
astGeneration/decl.cpp:        ProcessType(parameter -> type);
astGeneration/decl.cpp:        TypeSymbol* parm_type = parameter -> type -> symbol;
astGeneration/decl.cpp:            parameter -> formal_declarator -> variable_declarator_name;
astGeneration/decl.cpp:            lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:        VariableSymbol* symbol = block -> FindVariableSymbol(name_symbol);
astGeneration/decl.cpp:                           name -> identifier_token, name_symbol -> Name());
astGeneration/decl.cpp:        else symbol = block -> InsertVariableSymbol(name_symbol);
astGeneration/decl.cpp:        unsigned dims = parm_type -> num_dimensions + name -> NumBrackets();
astGeneration/decl.cpp:        if (parameter -> ellipsis_token_opt)
astGeneration/decl.cpp:            assert(i == method_declarator -> NumFormalParameters() - 1);
astGeneration/decl.cpp:                               parameter -> ellipsis_token_opt);
astGeneration/decl.cpp:        symbol -> SetType(parm_type -> GetArrayType(this, dims));
astGeneration/decl.cpp:        symbol -> SetFlags(access_flags);
astGeneration/decl.cpp:        symbol -> MarkComplete();
astGeneration/decl.cpp:        symbol -> MarkInitialized();
astGeneration/decl.cpp:        parameter -> formal_declarator -> symbol = symbol;
astGeneration/decl.cpp:    AccessFlags access_flags = this_type -> ACC_INTERFACE()
astGeneration/decl.cpp:    if (access_flags.ACC_PRIVATE() || this_type -> ACC_FINAL())
astGeneration/decl.cpp:    if (this_type -> ACC_STRICTFP())
astGeneration/decl.cpp:    if (method_declaration -> type_parameters_opt)
astGeneration/decl.cpp:                       method_declaration -> type_parameters_opt);
astGeneration/decl.cpp:    if (access_flags.ACC_STATIC() && this_type -> IsInner())
astGeneration/decl.cpp:        assert(method_declaration -> modifiers_opt &&
astGeneration/decl.cpp:               method_declaration -> modifiers_opt -> static_token_opt);
astGeneration/decl.cpp:                       method_declaration -> modifiers_opt -> static_token_opt,
astGeneration/decl.cpp:                       lex_stream -> NameString(method_declaration -> method_declarator -> identifier_token),
astGeneration/decl.cpp:                       this_type -> Name(),
astGeneration/decl.cpp:                       this_type -> FileLoc());
astGeneration/decl.cpp:        lex_stream -> IsDeprecated(method_declaration -> LeftToken());
astGeneration/decl.cpp:    bool deprecated_type = this_type -> IsDeprecated();
astGeneration/decl.cpp:        this_type -> MarkDeprecated();
astGeneration/decl.cpp:    ProcessType(method_declaration -> type);
astGeneration/decl.cpp:    TypeSymbol* method_type = method_declaration -> type -> symbol;
astGeneration/decl.cpp:        method_declaration -> method_declarator;
astGeneration/decl.cpp:    if (method_declarator -> NumBrackets())
astGeneration/decl.cpp:                           method_declaration -> type -> LeftToken(),
astGeneration/decl.cpp:                           method_declarator -> RightToken());
astGeneration/decl.cpp:        lex_stream -> NameSymbol(method_declarator -> identifier_token);
astGeneration/decl.cpp:    if (name_symbol == this_type -> Identity())
astGeneration/decl.cpp:                       method_declaration -> type -> LeftToken(),
astGeneration/decl.cpp:                       method_declarator -> identifier_token,
astGeneration/decl.cpp:                       name_symbol -> Name());
astGeneration/decl.cpp:    if (name_symbol -> IsBadStyleForMethod())
astGeneration/decl.cpp:                       method_declarator -> identifier_token,
astGeneration/decl.cpp:                       name_symbol -> Name());
astGeneration/decl.cpp:    // margin for one-liners.
astGeneration/decl.cpp:        new BlockSymbol(method_declarator -> NumFormalParameters());
astGeneration/decl.cpp:    block_symbol -> max_variable_index = (access_flags.ACC_STATIC() ? 0 : 1);
astGeneration/decl.cpp:        this_type -> ResetDeprecated();
astGeneration/decl.cpp:    MethodSymbol* method = this_type -> FindMethodSymbol(name_symbol);
astGeneration/decl.cpp:    if (method && this_type -> FindOverloadMethod(method, method_declarator))
astGeneration/decl.cpp:                       method_declarator, name_symbol -> Name(),
astGeneration/decl.cpp:                       this_type -> Name(), method -> FileLoc());
astGeneration/decl.cpp:    method = this_type -> InsertMethodSymbol(name_symbol);
astGeneration/decl.cpp:        method_type -> num_dimensions + method_declarator -> NumBrackets();
astGeneration/decl.cpp:    method -> SetType(method_type -> GetArrayType(this, dims));
astGeneration/decl.cpp:    method -> SetFlags(access_flags);
astGeneration/decl.cpp:    method -> SetContainingType(this_type);
astGeneration/decl.cpp:    method -> SetBlockSymbol(block_symbol);
astGeneration/decl.cpp:    method -> declaration = method_declaration;
astGeneration/decl.cpp:    method -> SetLocation();
astGeneration/decl.cpp:    for (unsigned i = 0; i < method_declarator -> NumFormalParameters(); i++)
astGeneration/decl.cpp:            method_declarator -> FormalParameter(i) -> formal_declarator;
astGeneration/decl.cpp:        VariableSymbol* symbol = formal_declarator -> symbol;
astGeneration/decl.cpp:        symbol -> SetOwner(method);
astGeneration/decl.cpp:        symbol -> SetLocalVariableIndex(block_symbol -> max_variable_index++);
astGeneration/decl.cpp:        symbol -> MarkComplete();
astGeneration/decl.cpp:        if (control.IsDoubleWordType(symbol -> Type()))
astGeneration/decl.cpp:            block_symbol -> max_variable_index++;
astGeneration/decl.cpp:        symbol -> declarator = formal_declarator;
astGeneration/decl.cpp:        symbol -> SetLocation();
astGeneration/decl.cpp:        method -> AddFormalParameter(symbol);
astGeneration/decl.cpp:    method -> SetSignature(control);
astGeneration/decl.cpp:    for (unsigned k = 0; k < method_declaration -> NumThrows(); k++)
astGeneration/decl.cpp:        AstTypeName* throw_expr = method_declaration -> Throw(k);
astGeneration/decl.cpp:        method -> AddThrows(throw_expr -> symbol);
astGeneration/decl.cpp:    method_declaration -> method_symbol = method;
astGeneration/decl.cpp:    if (method -> ACC_ABSTRACT() && ! this_type -> ACC_ABSTRACT())
astGeneration/decl.cpp:                       method_declaration -> LeftToken(),
astGeneration/decl.cpp:                       method_declarator -> identifier_token,
astGeneration/decl.cpp:                       name_symbol -> Name(),
astGeneration/decl.cpp:                       this_type -> Name());
astGeneration/decl.cpp:        method -> MarkDeprecated();
astGeneration/decl.cpp:    switch (primitive_type -> kind)
astGeneration/decl.cpp:// Search the import-on-demand locations for a type with the given name. This
astGeneration/decl.cpp:// was found is non-canonical. If no type is found, NULL is returned.
astGeneration/decl.cpp:    // pre-filtered duplicate import-on-demands, as well as adding java.lang.*.
astGeneration/decl.cpp:            import_on_demand_packages[i] -> PackageCast();
astGeneration/decl.cpp:            possible_type = import_package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:            else if (possible_type -> SourcePending())
astGeneration/decl.cpp:                control.ProcessHeaders(possible_type -> file_symbol);
astGeneration/decl.cpp:            if (! import_type -> expanded_type_table)
astGeneration/decl.cpp:            TypeShadowSymbol* type_shadow_symbol = import_type ->
astGeneration/decl.cpp:                expanded_type_table -> FindTypeShadowSymbol(name_symbol);
astGeneration/decl.cpp:                // inherited types from interfaces (and hence non-canonical).
astGeneration/decl.cpp:                possible_type = (type_shadow_symbol -> NumConflicts()
astGeneration/decl.cpp:                                 ? type_shadow_symbol -> Conflict(0)
astGeneration/decl.cpp:                                 : type_shadow_symbol -> type_symbol);
astGeneration/decl.cpp:                if (! possible_type -> ACC_PRIVATE() &&
astGeneration/decl.cpp:                    import_type == possible_type -> owner)
astGeneration/decl.cpp:                    import_package = import_type -> ContainingPackage();
astGeneration/decl.cpp:                (possible_type -> ACC_PUBLIC() ||
astGeneration/decl.cpp:                               identifier_token, name_symbol -> Name(),
astGeneration/decl.cpp:                               location -> PackageName(),
astGeneration/decl.cpp:                               import_package -> PackageName());
astGeneration/decl.cpp:                if (type -> ACC_PUBLIC() || import_package == this_package)
astGeneration/decl.cpp:    if (type && ! location && ! type -> ACC_PRIVATE() &&
astGeneration/decl.cpp:        (type -> ACC_PUBLIC() || type -> ContainingPackage() == this_package))
astGeneration/decl.cpp:                       identifier_token, type -> Name(),
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:// process. Note that inaccessible types are skipped - if the caller wishes
astGeneration/decl.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(identifier_token);
astGeneration/decl.cpp:    for ( ; env; env = env -> previous)
astGeneration/decl.cpp:        type = env -> symbol_table.FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:        type = env -> Type();
astGeneration/decl.cpp:        if (! type -> expanded_type_table)
astGeneration/decl.cpp:            type -> expanded_type_table -> FindTypeShadowSymbol(name_symbol);
astGeneration/decl.cpp:        // A static type cannot access a non-static member type of an enclosing
astGeneration/decl.cpp:        if (this_type -> ACC_STATIC() && ! type -> ACC_STATIC() &&
astGeneration/decl.cpp:            ! this_type -> IsSubclass(type -> ContainingType()))
astGeneration/decl.cpp:                           this_type -> ContainingPackageName(),
astGeneration/decl.cpp:                           this_type -> ExternalName(),
astGeneration/decl.cpp:                           type -> ContainingPackageName(),
astGeneration/decl.cpp:                           type -> ExternalName(),
astGeneration/decl.cpp:                           env -> Type() -> ContainingPackageName(),
astGeneration/decl.cpp:                           env -> Type() -> ExternalName());
astGeneration/decl.cpp:        if (type -> owner -> TypeCast() && type -> owner != env -> Type())
astGeneration/decl.cpp:            TypeSymbol* supertype = (TypeSymbol*) type -> owner;
astGeneration/decl.cpp:            for ( ; env; env = env -> previous)
astGeneration/decl.cpp:                // First, check the enclosing type name - this is a caution,
astGeneration/decl.cpp:                if (name_symbol == env -> Type() -> Identity() &&
astGeneration/decl.cpp:                    env -> Type() != type)
astGeneration/decl.cpp:                                   lex_stream -> NameString(identifier_token),
astGeneration/decl.cpp:                                   type -> ContainingPackageName(),
astGeneration/decl.cpp:                                   type -> ExternalName(),
astGeneration/decl.cpp:                                   env -> Type() -> ContainingPackageName(),
astGeneration/decl.cpp:                                   env -> Type() -> ExternalName());
astGeneration/decl.cpp:                if (env -> previous && control.option.pedantic)
astGeneration/decl.cpp:                    SemanticEnvironment* env2 = env -> previous;
astGeneration/decl.cpp:                        env2 -> symbol_table.FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:                        assert(outer_type -> owner -> MethodCast());
astGeneration/decl.cpp:                                       lex_stream -> NameString(identifier_token),
astGeneration/decl.cpp:                                       supertype -> ContainingPackageName(),
astGeneration/decl.cpp:                                       supertype -> ExternalName(),
astGeneration/decl.cpp:                                       ((MethodSymbol*) outer_type -> owner) -> Name());
astGeneration/decl.cpp:                    if (! env2 -> Type() -> expanded_type_table)
astGeneration/decl.cpp:                        ComputeTypesClosure(env2 -> Type(), identifier_token);
astGeneration/decl.cpp:                        env2 -> Type() -> expanded_type_table ->
astGeneration/decl.cpp:                        outer_type -> owner == env2 -> Type())
astGeneration/decl.cpp:                                       lex_stream -> NameString(identifier_token),
astGeneration/decl.cpp:                                       supertype -> ContainingPackageName(),
astGeneration/decl.cpp:                                       supertype -> ExternalName(),
astGeneration/decl.cpp:                                       env2 -> Type() -> ContainingPackageName(),
astGeneration/decl.cpp:                                       env2 -> Type() -> ExternalName());
astGeneration/decl.cpp:    // as a class or interface or imported by a single-type-import declaration.
astGeneration/decl.cpp:        if (name_symbol == type -> Identity())
astGeneration/decl.cpp:    // for an accessible import-on-demand.
astGeneration/decl.cpp:    TypeSymbol* imported_type = (! type || type -> Bad()
astGeneration/decl.cpp:        FileSymbol* file_symbol = type -> file_symbol;
astGeneration/decl.cpp:        if (file_symbol && type -> Identity() != file_symbol -> Identity() &&
astGeneration/decl.cpp:            file_symbol != this -> source_file_symbol)
astGeneration/decl.cpp:                           identifier_token, type -> Name(),
astGeneration/decl.cpp:                           file_symbol -> Name());
astGeneration/decl.cpp:    assert(! name -> base_opt);
astGeneration/decl.cpp:        lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:        for (TypeSymbol* super_type = ThisType() -> super;
astGeneration/decl.cpp:             super_type; super_type = super_type -> super)
astGeneration/decl.cpp:            assert(super_type -> expanded_type_table);
astGeneration/decl.cpp:            TypeShadowSymbol* type_shadow_symbol = super_type ->
astGeneration/decl.cpp:                expanded_type_table -> FindTypeShadowSymbol(name_symbol);
astGeneration/decl.cpp:                return type_shadow_symbol -> type_symbol;
astGeneration/decl.cpp:    return ImportType(name -> identifier_token, name_symbol);
astGeneration/decl.cpp:        lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:    if (! name -> base_opt)
astGeneration/decl.cpp:        type = FindType(name -> identifier_token);
astGeneration/decl.cpp:                    lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/decl.cpp:                                name -> identifier_token);
astGeneration/decl.cpp:        ProcessPackageOrType(name -> base_opt);
astGeneration/decl.cpp:        Symbol* symbol = name -> base_opt -> symbol;
astGeneration/decl.cpp:        type = symbol -> TypeCast();
astGeneration/decl.cpp:            PackageSymbol* package = symbol -> PackageCast();
astGeneration/decl.cpp:            type = package -> FindTypeSymbol(name_symbol);
astGeneration/decl.cpp:                                name -> identifier_token);
astGeneration/decl.cpp:            else if (type -> SourcePending())
astGeneration/decl.cpp:                control.ProcessHeaders(type -> file_symbol);
astGeneration/decl.cpp:        if (control.option.deprecation && type -> IsDeprecated() &&
astGeneration/decl.cpp:                           type -> ContainingPackageName(),
astGeneration/decl.cpp:                           type -> ExternalName());
astGeneration/decl.cpp:    if (type -> Anonymous() && ! type -> Bad())
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:    if (type -> ACC_SYNTHETIC() && ! type -> Bad())
astGeneration/decl.cpp:                       type -> ContainingPackageName(),
astGeneration/decl.cpp:                       type -> ExternalName());
astGeneration/decl.cpp:    return type -> Bad() ? control.no_type : type;
astGeneration/decl.cpp:    if (type_expr -> symbol)
astGeneration/decl.cpp:    AstArrayType* array_type = type_expr -> ArrayTypeCast();
astGeneration/decl.cpp:    AstType* actual_type = array_type ? array_type -> type : type_expr;
astGeneration/decl.cpp:    AstTypeName* name = actual_type -> TypeNameCast();
astGeneration/decl.cpp:    AstPrimitiveType* primitive_type = actual_type -> PrimitiveTypeCast();
astGeneration/decl.cpp:    AstWildcard* wildcard_type = actual_type -> WildcardCast();
astGeneration/decl.cpp:        type_expr -> symbol = control.no_type;
astGeneration/decl.cpp:        if (name -> base_opt)
astGeneration/decl.cpp:            ProcessType(name -> base_opt);
astGeneration/decl.cpp:            type = MustFindNestedType(name -> base_opt -> symbol,
astGeneration/decl.cpp:                                      name -> name);
astGeneration/decl.cpp:        else type = MustFindType(name -> name);
astGeneration/decl.cpp:        if (name -> type_arguments_opt)
astGeneration/decl.cpp:                           name -> type_arguments_opt,
astGeneration/decl.cpp:                           type -> ContainingPackageName(),
astGeneration/decl.cpp:                           type -> ExternalName());
astGeneration/decl.cpp:    if (type -> Bad() && NumErrors() == error_count)
astGeneration/decl.cpp:                           lex_stream -> NameString(type_expr ->
astGeneration/decl.cpp:                           lex_stream -> NameString(type_expr ->
astGeneration/decl.cpp:        type = type -> GetArrayType(this, array_type -> NumBrackets());
astGeneration/decl.cpp:    type_expr -> symbol = type;
astGeneration/decl.cpp:        (AstMethodDeclaration*) init_method -> declaration;
astGeneration/decl.cpp:    assert(declaration -> method_body_opt);
astGeneration/decl.cpp:         i < field_declaration -> NumVariableDeclarators(); i++)
astGeneration/decl.cpp:            field_declaration -> VariableDeclarator(i);
astGeneration/decl.cpp:        VariableSymbol* variable = variable_declarator -> symbol;
astGeneration/decl.cpp:            if (variable_declarator -> variable_initializer_opt)
astGeneration/decl.cpp:                variable_declarator -> pending = true;
astGeneration/decl.cpp:                    if (! variable -> initial_value)
astGeneration/decl.cpp:                        declaration -> method_body_opt ->
astGeneration/decl.cpp:                else if (variable -> ACC_FINAL())
astGeneration/decl.cpp:                    DefinitelyAssignedVariables() ->
astGeneration/decl.cpp:                        AssignElement(variable -> LocalVariableIndex());
astGeneration/decl.cpp:                variable_declarator -> pending = false;
astGeneration/decl.cpp:            variable -> MarkComplete();
astGeneration/decl.cpp:        (AstMethodDeclaration*) init_method -> declaration;
astGeneration/decl.cpp:    LocalBlockStack().Push(declaration -> method_body_opt);
astGeneration/decl.cpp:    LocalSymbolTable().Push(init_method -> block_symbol -> Table());
astGeneration/decl.cpp:    initializer -> block -> is_reachable = true;
astGeneration/decl.cpp:    if (initializer -> block -> explicit_constructor_opt)
astGeneration/decl.cpp:            initializer -> block -> explicit_constructor_opt;
astGeneration/decl.cpp:    ProcessBlock(initializer -> block);
astGeneration/decl.cpp:    DefiniteBlockInitializer(initializer -> block, LocalBlockStack().max_size);
astGeneration/decl.cpp:    declaration -> method_body_opt -> AddStatement(initializer -> block);
astGeneration/decl.cpp:    if (init_method -> block_symbol -> max_variable_index <
astGeneration/decl.cpp:        init_method -> block_symbol -> max_variable_index =
astGeneration/decl.cpp:    if (! initializer -> block -> can_complete_normally)
astGeneration/decl.cpp:    if (this_type -> static_initializer_method)
astGeneration/decl.cpp:        return this_type -> static_initializer_method;
astGeneration/decl.cpp:    StoragePool* ast_pool = compilation_unit -> ast_pool;
astGeneration/decl.cpp:    TokenIndex loc = this_type -> declaration -> identifier_token;
astGeneration/decl.cpp:    block_symbol -> max_variable_index = 0;
astGeneration/decl.cpp:    AstMethodBody* block = ast_pool -> GenMethodBody();
astGeneration/decl.cpp:    block -> left_brace_token = loc;
astGeneration/decl.cpp:    block -> right_brace_token = loc;
astGeneration/decl.cpp:    block -> block_symbol = block_symbol;
astGeneration/decl.cpp:    block -> AllocateStatements(estimate);
astGeneration/decl.cpp:    AstType* return_type = ast_pool -> GenPrimitiveType(Ast::VOID_TYPE, loc);
astGeneration/decl.cpp:    return_type -> symbol = control.void_type;
astGeneration/decl.cpp:    AstMethodDeclaration* declaration = ast_pool -> GenMethodDeclaration();
astGeneration/decl.cpp:        this_type -> InsertMethodSymbol(control.clinit_name_symbol);
astGeneration/decl.cpp:    declaration -> type = return_type;
astGeneration/decl.cpp:    declaration -> method_symbol = init_method;
astGeneration/decl.cpp:    declaration -> method_body_opt = block;
astGeneration/decl.cpp:    init_method -> SetType(control.void_type);
astGeneration/decl.cpp:    init_method -> SetFlags(AccessFlags::ACCESS_PRIVATE |
astGeneration/decl.cpp:    if (this_type -> ACC_STRICTFP())
astGeneration/decl.cpp:        init_method -> SetACC_STRICTFP();
astGeneration/decl.cpp:    init_method -> SetContainingType(this_type);
astGeneration/decl.cpp:    init_method -> SetBlockSymbol(block_symbol);
astGeneration/decl.cpp:    init_method -> SetSignature(control);
astGeneration/decl.cpp:    init_method -> declaration = declaration;
astGeneration/decl.cpp:    this_type -> static_initializer_method = init_method;
astGeneration/decl.cpp:    if (class_body -> NumStaticInitializers() == 0 &&
astGeneration/decl.cpp:        class_body -> NumClassVariables() == 0)
astGeneration/decl.cpp:    unsigned estimate = class_body -> NumStaticInitializers();
astGeneration/decl.cpp:    for (unsigned i = 0; i < class_body -> NumClassVariables(); ++i)
astGeneration/decl.cpp:        estimate += class_body -> ClassVariable(i) -> NumVariableDeclarators();
astGeneration/decl.cpp:    while (j < class_body -> NumClassVariables() &&
astGeneration/decl.cpp:           k < class_body -> NumStaticInitializers())
astGeneration/decl.cpp:        if (class_body -> ClassVariable(j) -> semicolon_token <
astGeneration/decl.cpp:            class_body -> StaticInitializer(k) -> block -> right_brace_token)
astGeneration/decl.cpp:            InitializeVariable(class_body -> ClassVariable(j++), init_method);
astGeneration/decl.cpp:            ProcessInitializer(class_body -> StaticInitializer(k++),
astGeneration/decl.cpp:    while (j < class_body -> NumClassVariables())
astGeneration/decl.cpp:        InitializeVariable(class_body -> ClassVariable(j++), init_method);
astGeneration/decl.cpp:    while (k < class_body -> NumStaticInitializers())
astGeneration/decl.cpp:        ProcessInitializer(class_body -> StaticInitializer(k++),
astGeneration/decl.cpp:    // classes, we have already reported that a non-constant static
astGeneration/decl.cpp:    // field is illegal, so we only need an error here for top-level
astGeneration/decl.cpp:    for (unsigned l = 0; l < FinalFields() -> Length(); l++)
astGeneration/decl.cpp:        if (final_var -> ACC_STATIC() &&
astGeneration/decl.cpp:            ! DefinitelyAssignedVariables() -> da_set[l])
astGeneration/decl.cpp:            if (! this_type -> IsInner())
astGeneration/decl.cpp:                               final_var -> declarator, final_var -> Name());
astGeneration/decl.cpp:            DefinitelyAssignedVariables() -> AssignElement(l);
astGeneration/decl.cpp:    if (this_type -> static_initializer_method)
astGeneration/decl.cpp:        MethodSymbol* init_method = this_type -> static_initializer_method;
astGeneration/decl.cpp:        init_method -> max_block_depth = LocalBlockStack().max_size;
astGeneration/decl.cpp:        init_method -> block_symbol -> CompressSpace(); // space optimization
astGeneration/decl.cpp:    if (class_body -> NumInstanceInitializers() == 0 &&
astGeneration/decl.cpp:        class_body -> NumInstanceVariables() == 0)
astGeneration/decl.cpp:    StoragePool* ast_pool = compilation_unit -> ast_pool;
astGeneration/decl.cpp:    TokenIndex loc = this_type -> declaration -> identifier_token;
astGeneration/decl.cpp:    block_symbol -> max_variable_index = 1;
astGeneration/decl.cpp:    AstMethodBody* block = ast_pool -> GenMethodBody();
astGeneration/decl.cpp:    block -> left_brace_token = loc;
astGeneration/decl.cpp:    block -> right_brace_token = loc;
astGeneration/decl.cpp:    block -> block_symbol = block_symbol;
astGeneration/decl.cpp:    AstType* return_type = ast_pool -> GenPrimitiveType(Ast::VOID_TYPE, loc);
astGeneration/decl.cpp:    return_type -> symbol = control.void_type;
astGeneration/decl.cpp:    AstMethodDeclaration* declaration = ast_pool -> GenMethodDeclaration();
astGeneration/decl.cpp:        this_type -> InsertMethodSymbol(control.block_init_name_symbol);
astGeneration/decl.cpp:    declaration -> type = return_type;
astGeneration/decl.cpp:    declaration -> method_symbol = init_method;
astGeneration/decl.cpp:    declaration -> method_body_opt = block;
astGeneration/decl.cpp:    init_method -> SetType(control.void_type);
astGeneration/decl.cpp:    init_method -> SetFlags(AccessFlags::ACCESS_PRIVATE |
astGeneration/decl.cpp:    if (this_type -> ACC_STRICTFP())
astGeneration/decl.cpp:        init_method -> SetACC_STRICTFP();
astGeneration/decl.cpp:    init_method -> SetContainingType(this_type);
astGeneration/decl.cpp:    init_method -> SetBlockSymbol(block_symbol);
astGeneration/decl.cpp:    init_method -> SetSignature(control);
astGeneration/decl.cpp:    init_method -> declaration = declaration;
astGeneration/decl.cpp:    assert(this_type -> instance_initializer_method == NULL);
astGeneration/decl.cpp:    this_type -> instance_initializer_method = init_method;
astGeneration/decl.cpp:    for (unsigned i = 0; i < FinalFields() -> Length(); i++)
astGeneration/decl.cpp:        if (variable_symbol -> ACC_STATIC())
astGeneration/decl.cpp:            DefinitelyAssignedVariables() -> AssignElement(i);
astGeneration/decl.cpp:            BlankFinals() -> RemoveElement(i);
astGeneration/decl.cpp:            DefinitelyAssignedVariables() -> ReclaimElement(i);
astGeneration/decl.cpp:    unsigned estimate = class_body -> NumInstanceInitializers();
astGeneration/decl.cpp:    for (unsigned i = 0; i < class_body -> NumInstanceVariables(); ++i)
astGeneration/decl.cpp:        estimate += class_body -> InstanceVariable(i) ->
astGeneration/decl.cpp:    block -> AllocateStatements(estimate);
astGeneration/decl.cpp:    while (j < class_body -> NumInstanceVariables() &&
astGeneration/decl.cpp:           k < class_body -> NumInstanceInitializers())
astGeneration/decl.cpp:        if (class_body -> InstanceVariable(j) -> semicolon_token <
astGeneration/decl.cpp:            class_body -> InstanceInitializer(k) -> block -> right_brace_token)
astGeneration/decl.cpp:            InitializeVariable(class_body -> InstanceVariable(j++),
astGeneration/decl.cpp:            ProcessInitializer(class_body -> InstanceInitializer(k++),
astGeneration/decl.cpp:    while (j < class_body -> NumInstanceVariables())
astGeneration/decl.cpp:        InitializeVariable(class_body -> InstanceVariable(j++), init_method);
astGeneration/decl.cpp:    while (k < class_body -> NumInstanceInitializers())
astGeneration/decl.cpp:        ProcessInitializer(class_body -> InstanceInitializer(k++),
astGeneration/decl.cpp:    init_method -> max_block_depth = LocalBlockStack().max_size;
astGeneration/decl.cpp:    init_method -> block_symbol -> CompressSpace(); // space optimization
Binary file decl.o matches
astGeneration/definite.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
astGeneration/definite.cpp:// It is a compile-time error if a local variable is accessed that is not
astGeneration/definite.cpp:// da, and a compile-time error if a blank final is assigned when it is
astGeneration/definite.cpp:// not du.  This code also handles the compile-time error when an assignment
astGeneration/definite.cpp:// state (if different) - this is to allow speculative decisions when
astGeneration/definite.cpp:    if (expr -> IsConstant()) // A constant expression has no effect on DA/DU.
astGeneration/definite.cpp:    else if (expr -> symbol != control.no_type)
astGeneration/definite.cpp:        definite = (this ->* DefiniteExpr[expr -> kind])(expr, def_pair);
astGeneration/definite.cpp:    assert(! definite || expr -> Type() == control.boolean_type);
astGeneration/definite.cpp:    if (name -> resolution_opt)
astGeneration/definite.cpp:        return DefiniteBooleanExpression(name -> resolution_opt, def_pair);
astGeneration/definite.cpp:    if (name -> base_opt)
astGeneration/definite.cpp:        DefiniteName(name -> base_opt, def_pair);
astGeneration/definite.cpp:    VariableSymbol* variable = name -> symbol
astGeneration/definite.cpp:        ? name -> symbol -> VariableCast() : (VariableSymbol*) NULL;
astGeneration/definite.cpp:    if (variable && ! variable -> ACC_SYNTHETIC() && ! name -> base_opt &&
astGeneration/definite.cpp:        (variable -> IsLocal(ThisMethod()) || variable -> IsFinal(ThisType())))
astGeneration/definite.cpp:        int index = variable -> LocalVariableIndex(this);
astGeneration/definite.cpp:        if (! def_pair.da_set[index] && ! name -> IsConstant())
astGeneration/definite.cpp:                           name -> identifier_token, variable -> Name());
astGeneration/definite.cpp:            if (variable -> IsLocal(ThisMethod())) // avoid cascading errors!
astGeneration/definite.cpp:    DefiniteExpression(array_access -> base, def_pair);
astGeneration/definite.cpp:    DefiniteExpression(array_access -> expression, def_pair);
astGeneration/definite.cpp:    if (method_call -> base_opt)
astGeneration/definite.cpp:        DefiniteExpression(method_call -> base_opt, def_pair);
astGeneration/definite.cpp:    for (unsigned i = 0; i < method_call -> arguments -> NumArguments(); i++)
astGeneration/definite.cpp:        DefiniteExpression(method_call -> arguments -> Argument(i), def_pair);
astGeneration/definite.cpp:    if (class_creation -> resolution_opt)
astGeneration/definite.cpp:        class_creation = class_creation -> resolution_opt;
astGeneration/definite.cpp:    if (class_creation -> base_opt)
astGeneration/definite.cpp:        DefiniteExpression(class_creation -> base_opt, def_pair);
astGeneration/definite.cpp:    for (i = 0; i < class_creation -> arguments -> NumArguments(); i++)
astGeneration/definite.cpp:        DefiniteExpression(class_creation -> arguments -> Argument(i),
astGeneration/definite.cpp:    for (i = 0; i < class_creation -> arguments -> NumLocalArguments(); i++)
astGeneration/definite.cpp:        DefiniteExpression(class_creation -> arguments -> LocalArgument(i),
astGeneration/definite.cpp:    for (unsigned i = 0; i < array_creation -> NumDimExprs(); i++)
astGeneration/definite.cpp:        AstDimExpr* dim_expr = array_creation -> DimExpr(i);
astGeneration/definite.cpp:        DefiniteExpression(dim_expr -> expression, def_pair);
astGeneration/definite.cpp:    if (array_creation -> array_initializer_opt)
astGeneration/definite.cpp:        DefiniteArrayInitializer(array_creation -> array_initializer_opt,
astGeneration/definite.cpp:    if (field_access -> resolution_opt)
astGeneration/definite.cpp:        field_access = field_access -> resolution_opt -> FieldAccessCast();
astGeneration/definite.cpp:        VariableSymbol* variable = (field_access -> symbol
astGeneration/definite.cpp:                                    ? field_access -> symbol -> VariableCast()
astGeneration/definite.cpp:        if (variable && variable -> IsFinal(ThisType()))
astGeneration/definite.cpp:            if (variable -> ACC_STATIC() ||
astGeneration/definite.cpp:                field_access -> base -> ThisExpressionCast())
astGeneration/definite.cpp:    while (expr -> ParenthesizedExpressionCast())
astGeneration/definite.cpp:        expr = ((AstParenthesizedExpression*) expr) -> expression;
astGeneration/definite.cpp:    if (! expr -> ArrayAccessCast()) // some kind of name
astGeneration/definite.cpp:        AstName* name = expr -> NameCast();
astGeneration/definite.cpp:            if (name -> resolution_opt)
astGeneration/definite.cpp:                read_method = name -> resolution_opt -> symbol -> MethodCast();
astGeneration/definite.cpp:            AstFieldAccess* field_access = expr -> FieldAccessCast();
astGeneration/definite.cpp:            if (field_access -> resolution_opt)
astGeneration/definite.cpp:                    field_access -> resolution_opt -> symbol -> MethodCast();
astGeneration/definite.cpp:                    ? (VariableSymbol*) read_method -> accessed_member
astGeneration/definite.cpp:                    : expr -> symbol -> VariableCast());
astGeneration/definite.cpp:        while (variable && variable -> accessed_local)
astGeneration/definite.cpp:            variable = variable -> accessed_local;
astGeneration/definite.cpp:    if (variable && variable -> ACC_FINAL())
astGeneration/definite.cpp:        if ((variable -> IsLocal(ThisMethod()) ||
astGeneration/definite.cpp:             variable -> IsFinal(ThisType())) &&
astGeneration/definite.cpp:            ! variable -> ACC_SYNTHETIC() &&
astGeneration/definite.cpp:            (*BlankFinals())[variable -> LocalVariableIndex(this)])
astGeneration/definite.cpp:                           expr -> LeftToken(),
astGeneration/definite.cpp:                           expr -> RightToken(),
astGeneration/definite.cpp:                           variable -> Name());
astGeneration/definite.cpp:                           expr -> LeftToken(),
astGeneration/definite.cpp:                           expr -> RightToken(),
astGeneration/definite.cpp:                           variable -> Name());
astGeneration/definite.cpp:        if (variable -> IsFinal(ThisType()) && ! variable -> ACC_SYNTHETIC())
astGeneration/definite.cpp:            def_pair.du_set.RemoveElement(variable -> LocalVariableIndex(this));
astGeneration/definite.cpp:    return DefinitePLUSPLUSOrMINUSMINUS(postfix_expression -> expression,
astGeneration/definite.cpp:        DefinitePair temp(after_expr -> true_pair);
astGeneration/definite.cpp:        after_expr -> true_pair = after_expr -> false_pair;
astGeneration/definite.cpp:        after_expr -> false_pair = temp;
astGeneration/definite.cpp:// The default pre unary operators are +, -, and ~.
astGeneration/definite.cpp:    return (this ->* DefiniteExpr[expr -> kind])(expr, def_pair);
astGeneration/definite.cpp:    return (this ->* DefinitePreUnaryExpr[prefix_expression -> Tag()])
astGeneration/definite.cpp:        (prefix_expression -> expression, def_pair);
astGeneration/definite.cpp:        DefiniteBooleanExpression(expr -> left_expression, def_pair);
astGeneration/definite.cpp:        def_pair = after_left -> true_pair;
astGeneration/definite.cpp:        DefiniteBooleanExpression(expr -> right_expression, def_pair);
astGeneration/definite.cpp:            after_right -> false_pair *= after_left -> false_pair;
astGeneration/definite.cpp:            after_right -> true_pair = def_pair;
astGeneration/definite.cpp:            after_right -> false_pair *= def_pair;
astGeneration/definite.cpp:        after_right -> false_pair *= *before_right;
astGeneration/definite.cpp:        DefiniteBooleanExpression(expr -> left_expression, def_pair);
astGeneration/definite.cpp:        def_pair = after_left -> false_pair;
astGeneration/definite.cpp:        DefiniteBooleanExpression(expr -> right_expression, def_pair);
astGeneration/definite.cpp:            after_right -> true_pair *= after_left -> true_pair;
astGeneration/definite.cpp:            after_right -> true_pair *= def_pair;
astGeneration/definite.cpp:            after_right -> false_pair = def_pair;
astGeneration/definite.cpp:        after_right -> true_pair *= *before_right;
astGeneration/definite.cpp:    DefiniteExpression(expr -> left_expression, def_pair);
astGeneration/definite.cpp:    DefiniteExpression(expr -> right_expression, def_pair);
astGeneration/definite.cpp:    return (this ->* DefiniteBinaryExpr[binary_expression -> Tag()])
astGeneration/definite.cpp:    DefiniteExpression(expr -> expression, def_pair);
astGeneration/definite.cpp:        DefiniteBooleanExpression(conditional_expression -> test_expression,
astGeneration/definite.cpp:        def_pair = after_condition -> true_pair;
astGeneration/definite.cpp:        DefiniteBooleanExpression(conditional_expression -> true_expression,
astGeneration/definite.cpp:         def_pair = after_condition -> false_pair;
astGeneration/definite.cpp:        DefiniteBooleanExpression(conditional_expression -> false_expression,
astGeneration/definite.cpp:    if (conditional_expression -> Type() == control.boolean_type)
astGeneration/definite.cpp:            after_true -> true_pair *= after_false -> true_pair;
astGeneration/definite.cpp:            after_true -> false_pair *= after_false -> false_pair;
astGeneration/definite.cpp:            after_true -> true_pair *= def_pair;
astGeneration/definite.cpp:            after_true -> false_pair *= def_pair;
astGeneration/definite.cpp:        assignment_expression -> left_hand_side -> CastExpressionCast();
astGeneration/definite.cpp:        ? casted_left_hand_side -> expression
astGeneration/definite.cpp:        : assignment_expression -> left_hand_side;
astGeneration/definite.cpp:    if (left_hand_side -> NameCast())
astGeneration/definite.cpp:        simple_name = ! name -> base_opt;
astGeneration/definite.cpp:        AstFieldAccess* field_access = left_hand_side -> FieldAccessCast();
astGeneration/definite.cpp:            if (field_access -> resolution_opt)
astGeneration/definite.cpp:                left_hand_side = field_access -> resolution_opt;
astGeneration/definite.cpp:            // TODO: This is not well-specified in the JLS; rather we are just
astGeneration/definite.cpp:            if (field_access -> base -> ThisExpressionCast())
astGeneration/definite.cpp:                simple_name = ((AstThisExpression*) field_access -> base) ->
astGeneration/definite.cpp:    VariableSymbol* variable = (left_hand_side -> symbol
astGeneration/definite.cpp:                                ? left_hand_side -> symbol -> VariableCast()
astGeneration/definite.cpp:    while (variable && variable -> accessed_local)
astGeneration/definite.cpp:        variable = variable -> accessed_local;
astGeneration/definite.cpp:        if (variable -> IsLocal(ThisMethod()) ||
astGeneration/definite.cpp:            variable -> IsFinal(ThisType()))
astGeneration/definite.cpp:            index = variable -> LocalVariableIndex(this);
astGeneration/definite.cpp:            if (! assignment_expression -> SimpleAssignment() &&
astGeneration/definite.cpp:                               left_hand_side -> LeftToken(),
astGeneration/definite.cpp:                               left_hand_side -> RightToken(),
astGeneration/definite.cpp:                               variable -> Name());
astGeneration/definite.cpp:        else if (variable -> ACC_FINAL())
astGeneration/definite.cpp:                           left_hand_side -> LeftToken(),
astGeneration/definite.cpp:                           left_hand_side -> RightToken(),
astGeneration/definite.cpp:                           variable -> Name());
astGeneration/definite.cpp:    // The left-hand-side of an assignment expression is either a simple name,
astGeneration/definite.cpp:        AstFieldAccess* field_access = left_hand_side -> FieldAccessCast();
astGeneration/definite.cpp:        DefiniteExpression((field_access ? field_access -> base
astGeneration/definite.cpp:    // JLS2 16.1.7 - The rules for definite assignment of boolean valued
astGeneration/definite.cpp:    DefiniteExpression(assignment_expression -> expression, def_pair);
astGeneration/definite.cpp:        (variable -> IsLocal(ThisMethod()) || variable -> IsFinal(ThisType())))
astGeneration/definite.cpp:        if (variable -> ACC_FINAL())
astGeneration/definite.cpp:                               left_hand_side -> LeftToken(),
astGeneration/definite.cpp:                               left_hand_side -> RightToken(),
astGeneration/definite.cpp:                               variable -> Name());
astGeneration/definite.cpp:            else if (variable -> IsFinal(ThisType()) && ! simple_name)
astGeneration/definite.cpp:                               left_hand_side -> LeftToken(),
astGeneration/definite.cpp:                               left_hand_side -> RightToken(),
astGeneration/definite.cpp:                               variable -> Name(),
astGeneration/definite.cpp:                               (variable -> ACC_STATIC() ? NULL
astGeneration/definite.cpp:                                : variable -> Name()));
astGeneration/definite.cpp:                // executed, so it does not affect loop or try-catch analysis.
astGeneration/definite.cpp:                if (DefiniteFinalAssignments() -> Size() > 0)
astGeneration/definite.cpp:                    DefiniteFinalAssignments() -> Top().Next() =
astGeneration/definite.cpp:                ReachableAssignments() -> AddElement(index);
astGeneration/definite.cpp:    return DefiniteBooleanExpression(expr -> expression, def_pair);
astGeneration/definite.cpp:    //          if (! def_pair.da_set[variable -> LocalVariableIndex(this)])
astGeneration/definite.cpp:    //                             expr -> LeftToken(),
astGeneration/definite.cpp:    //                             expr -> RightToken(),
astGeneration/definite.cpp:    //                             variable -> Name());
astGeneration/definite.cpp:    //              def_pair.da_set.AddElement(variable -> LocalVariableIndex(this));
astGeneration/definite.cpp:    return DefiniteBooleanExpression((expr -> resolution_opt
astGeneration/definite.cpp:                                      ? expr -> resolution_opt
astGeneration/definite.cpp:                                      : expr -> base), def_pair);
astGeneration/definite.cpp:    return DefiniteBooleanExpression(expr -> expression, def_pair);
astGeneration/definite.cpp:         i < array_initializer -> NumVariableInitializers(); i++)
astGeneration/definite.cpp:        AstArrayInitializer* sub_array_initializer = array_initializer ->
astGeneration/definite.cpp:            VariableInitializer(i) -> ArrayInitializerCast();
astGeneration/definite.cpp:                (AstExpression*) array_initializer -> VariableInitializer(i);
astGeneration/definite.cpp:    assert(variable_declarator -> variable_initializer_opt);
astGeneration/definite.cpp:        variable_declarator -> variable_initializer_opt -> ExpressionCast();
astGeneration/definite.cpp:        DefiniteArrayInitializer((AstArrayInitializer*) variable_declarator ->
astGeneration/definite.cpp:    // Even when initialized by a non-constant, variables declared in a
astGeneration/definite.cpp:        DefiniteBlocks() -> TopBlock() -> Tag() == AstBlock::SWITCH &&
astGeneration/definite.cpp:        (! init || ! init -> IsConstant()))
astGeneration/definite.cpp:        BlankFinals() -> AddElement(variable_declarator -> symbol ->
astGeneration/definite.cpp:    (this ->* DefiniteStmt[ast -> kind])(ast);
astGeneration/definite.cpp:    for (unsigned i = 0; i < block_body -> NumStatements(); i++)
astGeneration/definite.cpp:        AstStatement* statement = block_body -> Statement(i);
astGeneration/definite.cpp:        if (statement -> is_reachable)
astGeneration/definite.cpp:    DefiniteBlocks() -> Push(block_body);
astGeneration/definite.cpp:        block_body -> NumLocallyDefinedVariables() > 0)
astGeneration/definite.cpp:                << lex_stream -> Line(block_body -> RightToken())
astGeneration/definite.cpp:        for (i = 0; i < block_body -> NumLocallyDefinedVariables(); i++)
astGeneration/definite.cpp:                    << block_body -> LocallyDefinedVariable(i) -> Name()
astGeneration/definite.cpp:    for (i = 0; i < block_body -> block_symbol -> NumVariableSymbols(); i++)
astGeneration/definite.cpp:            block_body -> block_symbol -> VariableSym(i);
astGeneration/definite.cpp:        int index = variable -> LocalVariableIndex(this);
astGeneration/definite.cpp:        BlankFinals() -> RemoveElement(index);
astGeneration/definite.cpp:        ReachableAssignments() -> RemoveElement(index);
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> ReclaimElement(index);
astGeneration/definite.cpp:        DefiniteBlocks() ->
astGeneration/definite.cpp:            ContinuePair(DefiniteBlocks() -> Size() - 2).ReclaimElement(index);
astGeneration/definite.cpp:    if (block_body -> label_opt)
astGeneration/definite.cpp:        *DefinitelyAssignedVariables() *= DefiniteBlocks() -> TopBreakPair();
astGeneration/definite.cpp:    DefiniteBlocks() -> Pop();
astGeneration/definite.cpp:    TypeSymbol* local_type = local_decl -> declaration -> class_body ->
astGeneration/definite.cpp:        semantic_environment -> Type();
astGeneration/definite.cpp:    assert(local_type -> LocalClassProcessingCompleted());
astGeneration/definite.cpp:    for (unsigned i = 0; i < local_type -> NumConstructorParameters(); i++)
astGeneration/definite.cpp:            local_type -> ConstructorParameter(i) -> accessed_local;
astGeneration/definite.cpp:        if (var -> owner == ThisMethod() &&
astGeneration/definite.cpp:            (! DefinitelyAssignedVariables() ->
astGeneration/definite.cpp:             da_set[var -> LocalVariableIndex(this)]))
astGeneration/definite.cpp:                           local_decl, var -> Name());
astGeneration/definite.cpp:    for (unsigned i = 0; i < local_decl -> NumVariableDeclarators(); i++)
astGeneration/definite.cpp:            local_decl -> VariableDeclarator(i);
astGeneration/definite.cpp:        VariableSymbol* variable_symbol = variable_declarator -> symbol;
astGeneration/definite.cpp:        int index = variable_symbol -> LocalVariableIndex(this);
astGeneration/definite.cpp:            Coutput << "(3.5) Local Variable \"" << variable_symbol -> Name()
astGeneration/definite.cpp:                    << lex_stream -> Line(variable_declarator -> LeftToken())
astGeneration/definite.cpp:            DefiniteBlocks() -> TopBlock() ->
astGeneration/definite.cpp:        if (variable_declarator -> variable_initializer_opt)
astGeneration/definite.cpp:            DefinitelyAssignedVariables() -> AssignElement(index);
astGeneration/definite.cpp:            DefinitelyAssignedVariables() -> ReclaimElement(index);
astGeneration/definite.cpp:            if (variable_symbol -> ACC_FINAL())
astGeneration/definite.cpp:                BlankFinals() -> AddElement(index);
astGeneration/definite.cpp:    DefiniteExpression(expression_statement -> expression,
astGeneration/definite.cpp:    DefiniteExpression(synchronized_statement -> expression,
astGeneration/definite.cpp:    DefiniteBlock(synchronized_statement -> block);
astGeneration/definite.cpp:        DefiniteBooleanExpression(if_statement -> expression,
astGeneration/definite.cpp:        *DefinitelyAssignedVariables() = after_expr -> true_pair;
astGeneration/definite.cpp:    // if-statement (both the true and false statement) are enclosed in a
astGeneration/definite.cpp:    DefiniteBlock(if_statement -> true_statement);
astGeneration/definite.cpp:    if (! if_statement -> false_statement_opt) // no else part ?
astGeneration/definite.cpp:                                           ? after_expr -> false_pair
astGeneration/definite.cpp:                                          ? after_expr -> false_pair
astGeneration/definite.cpp:        DefiniteBlock(if_statement -> false_statement_opt);
astGeneration/definite.cpp:    starting_set -= DefinitelyAssignedVariables() -> du_set;
astGeneration/definite.cpp:    for (unsigned i = 0; i < DefiniteFinalAssignments() -> Top().Length(); i++)
astGeneration/definite.cpp:        AstExpression* name = DefiniteFinalAssignments() -> Top()[i];
astGeneration/definite.cpp:        VariableSymbol* variable = (VariableSymbol*) name -> symbol;
astGeneration/definite.cpp:        if (starting_set[variable -> LocalVariableIndex(this)])
astGeneration/definite.cpp:                           name -> LeftToken(),
astGeneration/definite.cpp:                           name -> RightToken(),
astGeneration/definite.cpp:                           variable -> Name());
astGeneration/definite.cpp:    DefiniteFinalAssignments() -> Pop();
astGeneration/definite.cpp:    DefiniteFinalAssignments() -> Push();
astGeneration/definite.cpp:    BitSet starting_set(DefinitelyAssignedVariables() -> du_set);
astGeneration/definite.cpp:        DefiniteBooleanExpression(while_statement -> expression,
astGeneration/definite.cpp:    DefinitePair before_statement(Universe() -> Size());
astGeneration/definite.cpp:        *DefinitelyAssignedVariables() = after_expr -> true_pair;
astGeneration/definite.cpp:    if (while_statement -> statement -> is_reachable)
astGeneration/definite.cpp:        DefiniteBlock(while_statement -> statement);
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() *= DefiniteBlocks() -> TopContinuePair();
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() = DefiniteBlocks() -> TopBreakPair() *
astGeneration/definite.cpp:        (after_expr ? after_expr -> false_pair : before_statement);
astGeneration/definite.cpp:    // for-statement in its own block, so that any variables defined in the
astGeneration/definite.cpp:    // for-init-statements have scope limited to the for loop. Thus, we do
astGeneration/definite.cpp:    // for-init section in this method.
astGeneration/definite.cpp:    for (i = 0; i < for_statement -> NumForInitStatements(); i++)
astGeneration/definite.cpp:        DefiniteStatement(for_statement -> ForInitStatement(i));
astGeneration/definite.cpp:    DefiniteFinalAssignments() -> Push();
astGeneration/definite.cpp:    BitSet starting_set(DefinitelyAssignedVariables() -> du_set);
astGeneration/definite.cpp:    DefinitePair before_statement(Universe() -> Size());
astGeneration/definite.cpp:    if (for_statement -> end_expression_opt)
astGeneration/definite.cpp:            DefiniteBooleanExpression(for_statement -> end_expression_opt,
astGeneration/definite.cpp:        *DefinitelyAssignedVariables() = after_end_expression -> true_pair;
astGeneration/definite.cpp:    if (for_statement -> statement -> is_reachable)
astGeneration/definite.cpp:        DefiniteBlock(for_statement -> statement);
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() *= DefiniteBlocks() -> TopContinuePair();
astGeneration/definite.cpp:    for (i = 0; i < for_statement -> NumForUpdateStatements(); i++)
astGeneration/definite.cpp:        DefiniteExpressionStatement(for_statement -> ForUpdateStatement(i));
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() = DefiniteBlocks() -> TopBreakPair() *
astGeneration/definite.cpp:        (for_statement -> end_expression_opt
astGeneration/definite.cpp:         ? (after_end_expression ? after_end_expression -> false_pair
astGeneration/definite.cpp:    // for-statement in its own block, so that the loop variable defined in
astGeneration/definite.cpp:    // for-init section in this method.
astGeneration/definite.cpp:        for_statement -> formal_parameter -> formal_declarator;
astGeneration/definite.cpp:    VariableSymbol* variable_symbol = variable_declarator -> symbol;
astGeneration/definite.cpp:        int index = variable_symbol -> LocalVariableIndex(this);
astGeneration/definite.cpp:            Coutput << "(3.6) Foreach Variable \"" << variable_symbol -> Name()
astGeneration/definite.cpp:                    << lex_stream -> Line(variable_declarator -> LeftToken())
astGeneration/definite.cpp:            DefiniteBlocks() -> TopBlock() ->
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> AssignElement(index);
astGeneration/definite.cpp:    DefiniteExpression(for_statement -> expression,
astGeneration/definite.cpp:    BitSet starting_set(DefinitelyAssignedVariables() -> du_set);
astGeneration/definite.cpp:    DefiniteFinalAssignments() -> Push();
astGeneration/definite.cpp:    if (for_statement -> statement -> is_reachable)
astGeneration/definite.cpp:        DefiniteBlock(for_statement -> statement);
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() *= DefiniteBlocks() -> TopContinuePair();
astGeneration/definite.cpp:        DefiniteBlocks() -> TopBreakPair() * before_statement;        
astGeneration/definite.cpp:    DefiniteFinalAssignments() -> Push();
astGeneration/definite.cpp:    BitSet starting_set(DefinitelyAssignedVariables() -> du_set);
astGeneration/definite.cpp:    DefiniteBlock(do_statement -> statement);
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() *= DefiniteBlocks() -> TopContinuePair();
astGeneration/definite.cpp:        DefiniteBooleanExpression(do_statement -> expression,
astGeneration/definite.cpp:    DefinitePair after_loop(Universe() -> Size());
astGeneration/definite.cpp:        *DefinitelyAssignedVariables() = after_expr -> true_pair;
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() = DefiniteBlocks() -> TopBreakPair() *
astGeneration/definite.cpp:        (after_expr ? after_expr -> false_pair : after_loop);
astGeneration/definite.cpp:    AstBlock* block_body = switch_statement -> switch_block;
astGeneration/definite.cpp:    DefiniteBlocks() -> Push(block_body);
astGeneration/definite.cpp:    DefiniteExpression(switch_statement -> expression,
astGeneration/definite.cpp:    for (i = 0; i < block_body -> NumStatements(); i++)
astGeneration/definite.cpp:            (AstSwitchBlockStatement*) block_body -> Statement(i);
astGeneration/definite.cpp:    if (! switch_statement -> DefaultCase())
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() *= DefiniteBlocks() -> TopBreakPair();
astGeneration/definite.cpp:    for (i = 0; i < block_body -> block_symbol -> NumVariableSymbols(); i++)
astGeneration/definite.cpp:            block_body -> block_symbol -> VariableSym(i);
astGeneration/definite.cpp:        int index = variable -> LocalVariableIndex(this);
astGeneration/definite.cpp:        BlankFinals() -> RemoveElement(index);
astGeneration/definite.cpp:        ReachableAssignments() -> RemoveElement(index);
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> ReclaimElement(index);
astGeneration/definite.cpp:    DefiniteBlocks() -> Pop();
astGeneration/definite.cpp:    if (AbruptFinallyStack().Top() < break_statement -> nesting_level)
astGeneration/definite.cpp:        DefiniteBlocks() -> BreakPair(break_statement -> nesting_level) *=
astGeneration/definite.cpp:    if (AbruptFinallyStack().Top() < continue_statement -> nesting_level)
astGeneration/definite.cpp:        DefiniteBlocks() -> ContinuePair(continue_statement ->
astGeneration/definite.cpp:    if (return_statement -> expression_opt)
astGeneration/definite.cpp:        DefiniteExpression(return_statement -> expression_opt,
astGeneration/definite.cpp:        DefiniteBlocks() -> ReturnPair() *= *DefinitelyAssignedVariables();
astGeneration/definite.cpp:    DefiniteExpression(throw_statement -> expression,
astGeneration/definite.cpp:    if (try_statement -> finally_clause_opt &&
astGeneration/definite.cpp:        (! try_statement -> finally_clause_opt -> block ->
astGeneration/definite.cpp:        AbruptFinallyStack().Push(try_statement -> finally_clause_opt ->
astGeneration/definite.cpp:                                  block -> nesting_level);
astGeneration/definite.cpp:    ReachableAssignments() -> SetEmpty();
astGeneration/definite.cpp:    DefiniteBlock(try_statement -> block);
astGeneration/definite.cpp:    BitSet before_catch_finals(starting_pair.du_set - *ReachableAssignments()),
astGeneration/definite.cpp:           possibly_finals_union(DefinitelyAssignedVariables() -> du_set);
astGeneration/definite.cpp:    BitSet after_blocks(DefinitelyAssignedVariables() -> da_set);
astGeneration/definite.cpp:    for (unsigned i = 0; i < try_statement -> NumCatchClauses(); i++)
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> da_set = starting_pair.da_set;
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> du_set = before_catch_finals;
astGeneration/definite.cpp:        AstCatchClause* clause = try_statement -> CatchClause(i);
astGeneration/definite.cpp:        VariableSymbol* variable = clause -> parameter_symbol;
astGeneration/definite.cpp:        int index = variable -> LocalVariableIndex(this);
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> AddElement(index);
astGeneration/definite.cpp:            Coutput << "(7) Variable \"" << variable -> Name() << " #"
astGeneration/definite.cpp:                    << lex_stream -> Line(clause -> formal_parameter -> LeftToken())
astGeneration/definite.cpp:        DefiniteBlock(clause -> block);
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> ReclaimElement(index);
astGeneration/definite.cpp:        VariableSymbol* variable = clause -> parameter_symbol;
astGeneration/definite.cpp:            Coutput << "(8) Variable \"" << variable -> Name() << " #"
astGeneration/definite.cpp:                    << lex_stream -> Line(clause -> formal_parameter -> RightToken())
astGeneration/definite.cpp:        possibly_finals_union *= DefinitelyAssignedVariables() -> du_set;
astGeneration/definite.cpp:        after_blocks *= DefinitelyAssignedVariables() -> da_set;
astGeneration/definite.cpp:    if (try_statement -> finally_clause_opt)
astGeneration/definite.cpp:        if (! try_statement -> finally_clause_opt -> block ->
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> da_set = starting_pair.da_set;
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> du_set =
astGeneration/definite.cpp:            starting_pair.du_set - *ReachableAssignments();
astGeneration/definite.cpp:        DefiniteBlock(try_statement -> finally_clause_opt -> block);
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> da_set += after_blocks;
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> da_set = after_blocks;
astGeneration/definite.cpp:        DefinitelyAssignedVariables() -> du_set = possibly_finals_union;
astGeneration/definite.cpp:        DefiniteBooleanExpression(assert_statement -> condition,
astGeneration/definite.cpp:        *DefinitelyAssignedVariables() = after_condition -> false_pair;
astGeneration/definite.cpp:        before_assert.du_set *= after_condition -> true_pair.du_set;
astGeneration/definite.cpp:    else before_assert.du_set *= DefinitelyAssignedVariables() -> du_set;
astGeneration/definite.cpp:    if (assert_statement -> message_opt)
astGeneration/definite.cpp:        DefiniteExpression(assert_statement -> message_opt,
astGeneration/definite.cpp:    for (unsigned i = 0; i < this_call -> arguments -> NumArguments(); i++)
astGeneration/definite.cpp:        DefiniteExpression(this_call -> arguments -> Argument(i),
astGeneration/definite.cpp:    if (super_call -> base_opt)
astGeneration/definite.cpp:        DefiniteExpression(super_call -> base_opt,
astGeneration/definite.cpp:    for (unsigned i = 0; i < super_call -> arguments -> NumArguments(); i++)
astGeneration/definite.cpp:        DefiniteExpression(super_call -> arguments -> Argument(i),
astGeneration/definite.cpp:    AstBlock* block_body = method_declaration -> method_body_opt;
astGeneration/definite.cpp:                << method_declaration -> method_symbol -> Name() << "\" in "
astGeneration/definite.cpp:                << ThisType() -> ContainingPackageName()
astGeneration/definite.cpp:                << "/" << ThisType() -> ExternalName() << endl;
astGeneration/definite.cpp:    int size = block_body -> block_symbol -> max_variable_index +
astGeneration/definite.cpp:        FinalFields() -> Length();
astGeneration/definite.cpp:    Universe() -> Resize(size, BitSet::UNIVERSE);
astGeneration/definite.cpp:    int stack_size = method_declaration -> method_symbol -> max_block_depth;
astGeneration/definite.cpp:    DefinitelyAssignedVariables() -> Resize(size);
astGeneration/definite.cpp:    BlankFinals() -> Resize(size, BitSet::EMPTY);
astGeneration/definite.cpp:    ReachableAssignments() -> Resize(size, BitSet::EMPTY);
astGeneration/definite.cpp:    DefiniteBlocks() -> Push(block_body);
astGeneration/definite.cpp:        method_declaration -> method_declarator;
astGeneration/definite.cpp:    for (i = 0; i < method_declarator -> NumFormalParameters(); i++)
astGeneration/definite.cpp:            method_declarator -> FormalParameter(i) -> formal_declarator;
astGeneration/definite.cpp:        DefinitelyAssignedVariables() ->
astGeneration/definite.cpp:            AssignElement(formal_declarator -> symbol ->
astGeneration/definite.cpp:            VariableSymbol* variable = formal_declarator -> symbol;
astGeneration/definite.cpp:            Coutput << "(10) Variable \"" << variable -> Name() << " #"
astGeneration/definite.cpp:                    << variable -> LocalVariableIndex(this)
astGeneration/definite.cpp:                    << lex_stream -> Line(formal_declarator -> LeftToken())
astGeneration/definite.cpp:        block_body -> NumLocallyDefinedVariables() > 0)
astGeneration/definite.cpp:                << lex_stream -> Line(block_body -> RightToken())
astGeneration/definite.cpp:        for (i = 0; i < block_body -> NumLocallyDefinedVariables(); i++)
astGeneration/definite.cpp:                    << block_body -> LocallyDefinedVariable(i) -> Name()
astGeneration/definite.cpp:    DefiniteBlocks() -> Pop();
astGeneration/definite.cpp:    size = FinalFields() -> Length();
astGeneration/definite.cpp:    Universe() -> Resize(size);
astGeneration/definite.cpp:    DefinitelyAssignedVariables() -> Resize(size);
astGeneration/definite.cpp:    BlankFinals() -> Resize(size);
astGeneration/definite.cpp:    ReachableAssignments() -> Resize(size);
astGeneration/definite.cpp:                << constructor_declaration -> constructor_symbol -> Name()
astGeneration/definite.cpp:                << ThisType() -> ContainingPackageName() << "/"
astGeneration/definite.cpp:                << ThisType() -> ExternalName() << endl;
astGeneration/definite.cpp:    AstMethodBody* block_body = constructor_declaration -> constructor_body;
astGeneration/definite.cpp:    int size = block_body -> block_symbol -> max_variable_index +
astGeneration/definite.cpp:        FinalFields() -> Length();
astGeneration/definite.cpp:    Universe() -> Resize(size, BitSet::UNIVERSE);
astGeneration/definite.cpp:        constructor_declaration -> constructor_symbol -> max_block_depth;
astGeneration/definite.cpp:    DefinitelyAssignedVariables() -> Resize(size);
astGeneration/definite.cpp:    BlankFinals() -> Resize(size, BitSet::EMPTY);
astGeneration/definite.cpp:    ReachableAssignments() -> Resize(size, BitSet::EMPTY);
astGeneration/definite.cpp:    DefiniteBlocks() -> Push(block_body);
astGeneration/definite.cpp:        constructor_declaration -> constructor_declarator;
astGeneration/definite.cpp:    for (i = 0; i < constructor_declarator -> NumFormalParameters(); i++)
astGeneration/definite.cpp:            constructor_declarator -> FormalParameter(i) -> formal_declarator;
astGeneration/definite.cpp:        DefinitelyAssignedVariables() ->
astGeneration/definite.cpp:            AddElement(formal_declarator -> symbol -> LocalVariableIndex(this));
astGeneration/definite.cpp:            VariableSymbol* variable = formal_declarator -> symbol;
astGeneration/definite.cpp:            Coutput << "(13) Variable \"" << variable -> Name() << " #"
astGeneration/definite.cpp:                    << variable -> LocalVariableIndex(this)
astGeneration/definite.cpp:                    << lex_stream -> Line(formal_declarator -> LeftToken())
astGeneration/definite.cpp:    if (block_body -> explicit_constructor_opt)
astGeneration/definite.cpp:        if (block_body -> explicit_constructor_opt -> ThisCallCast())
astGeneration/definite.cpp:            DefiniteThisCall((AstThisCall*) block_body ->
astGeneration/definite.cpp:        else DefiniteSuperCall((AstSuperCall*) block_body ->
astGeneration/definite.cpp:        block_body -> NumLocallyDefinedVariables() > 0)
astGeneration/definite.cpp:                << lex_stream -> Line(block_body -> RightToken())
astGeneration/definite.cpp:        for (unsigned j = 0; j < block_body -> NumLocallyDefinedVariables(); j++)
astGeneration/definite.cpp:                    << block_body -> LocallyDefinedVariable(j) -> Name()
astGeneration/definite.cpp:    *DefinitelyAssignedVariables() *= DefiniteBlocks() -> ReturnPair();
astGeneration/definite.cpp:    DefiniteBlocks() -> Pop();
astGeneration/definite.cpp:    size = FinalFields() -> Length();
astGeneration/definite.cpp:    Universe() -> Resize(size);
astGeneration/definite.cpp:    DefinitelyAssignedVariables() -> Resize(size);
astGeneration/definite.cpp:    BlankFinals() -> Resize(size);
astGeneration/definite.cpp:    ReachableAssignments() -> Resize(size);
astGeneration/definite.cpp:                << ThisType() -> ContainingPackageName() << "/"
astGeneration/definite.cpp:                << ThisType() -> ExternalName() << endl;
astGeneration/definite.cpp:    int size = block_body -> block_symbol -> max_variable_index +
astGeneration/definite.cpp:        FinalFields() -> Length();
astGeneration/definite.cpp:    Universe() -> Resize(size, BitSet::UNIVERSE);
astGeneration/definite.cpp:    DefinitelyAssignedVariables() -> Resize(size);
astGeneration/definite.cpp:    BlankFinals() -> Resize(size, BitSet::EMPTY);
astGeneration/definite.cpp:    ReachableAssignments() -> Resize(size, BitSet::EMPTY);
astGeneration/definite.cpp:    DefiniteBlocks() -> Push(block_body);
astGeneration/definite.cpp:        block_body -> NumLocallyDefinedVariables() > 0)
astGeneration/definite.cpp:                << lex_stream -> Line(block_body -> RightToken())
astGeneration/definite.cpp:        for (i = 0; i < block_body -> NumLocallyDefinedVariables(); i++)
astGeneration/definite.cpp:                    << block_body -> LocallyDefinedVariable(i) -> Name()
astGeneration/definite.cpp:    DefiniteBlocks() -> Pop();
astGeneration/definite.cpp:    size = FinalFields() -> Length();
astGeneration/definite.cpp:    Universe() -> Resize(size);
astGeneration/definite.cpp:    DefinitelyAssignedVariables() -> Resize(size);
astGeneration/definite.cpp:    BlankFinals() -> Resize(size);
astGeneration/definite.cpp:    ReachableAssignments() -> Resize(size);
astGeneration/definite.cpp:    if (variable_declarator -> symbol -> ACC_FINAL())
astGeneration/definite.cpp:        DefinitelyAssignedVariables() ->
astGeneration/definite.cpp:            AssignElement(variable_declarator -> symbol ->
astGeneration/definite.cpp:        new Tuple<VariableSymbol*> (this_type -> NumVariableSymbols());
astGeneration/definite.cpp:    for (unsigned i = 0; i < this_type -> NumVariableSymbols(); i++)
astGeneration/definite.cpp:        VariableSymbol* variable_symbol = this_type -> VariableSym(i);
astGeneration/definite.cpp:        if (variable_symbol -> ACC_FINAL() &&
astGeneration/definite.cpp:            ! variable_symbol -> ACC_SYNTHETIC())
astGeneration/definite.cpp:            variable_symbol -> SetLocalVariableIndex(size++);
astGeneration/definite.cpp:            FinalFields() -> Next() = variable_symbol;
astGeneration/definite.cpp:        if (! final_var -> declarator -> variable_initializer_opt)
astGeneration/definite.cpp:            BlankFinals() -> AddElement(j);
Binary file definite.o matches
astGeneration/depend.cpp:    for (int head = 0, tail = type_list.Length() - 1;
astGeneration/depend.cpp:         head < tail; head++, tail--)
astGeneration/depend.cpp:             k < sem -> compilation_unit -> NumTypeDeclarations(); k++)
astGeneration/depend.cpp:                sem -> compilation_unit -> TypeDeclaration(k);
astGeneration/depend.cpp:            if (declared -> EmptyDeclarationCast())
astGeneration/depend.cpp:                declared -> class_body -> semantic_environment;
astGeneration/depend.cpp:                TypeSymbol* type = env -> Type();
astGeneration/depend.cpp:                if (type -> index == OMEGA)
astGeneration/depend.cpp:        if (type -> index == OMEGA)
astGeneration/depend.cpp:    type -> index = indx;
astGeneration/depend.cpp:    type -> subtypes_closure = new SymbolSet;
astGeneration/depend.cpp:    type -> subtypes_closure -> Union(*(type -> subtypes));
astGeneration/depend.cpp:    for (subtype = (TypeSymbol*) type -> subtypes -> FirstElement();
astGeneration/depend.cpp:         subtype = (TypeSymbol*) type -> subtypes -> NextElement())
astGeneration/depend.cpp:        // Only worry about top-level types.
astGeneration/depend.cpp:        if (subtype -> outermost_type != subtype)
astGeneration/depend.cpp:        if (subtype -> index == OMEGA)
astGeneration/depend.cpp:        type -> index = Min(type -> index, subtype -> index);
astGeneration/depend.cpp:        type -> subtypes_closure -> Union(*(subtype -> subtypes_closure));
astGeneration/depend.cpp:    if (type -> index == indx)
astGeneration/depend.cpp:            scc_subtype -> index = CYCLE_INFINITY;
astGeneration/depend.cpp:            *(scc_subtype -> subtypes_closure) = *(type -> subtypes_closure);
astGeneration/depend.cpp:    for (unsigned k = 0; k < class_body -> NumConstructors(); k++)
astGeneration/depend.cpp:            class_body -> Constructor(k);
astGeneration/depend.cpp:        if (constructor_declaration -> index == OMEGA)
astGeneration/depend.cpp:    constructor_declaration -> index = indx;
astGeneration/depend.cpp:        constructor_declaration -> constructor_body;
astGeneration/depend.cpp:    if (constructor_block -> explicit_constructor_opt)
astGeneration/depend.cpp:            constructor_block -> explicit_constructor_opt -> ThisCallCast();
astGeneration/depend.cpp:            (MethodSymbol*) (this_call ? this_call -> symbol : NULL);
astGeneration/depend.cpp:                (AstConstructorDeclaration*) called_constructor -> declaration;
astGeneration/depend.cpp:            if (called_constructor_declaration -> index == OMEGA)
astGeneration/depend.cpp:            constructor_declaration -> index =
astGeneration/depend.cpp:                Min(constructor_declaration -> index,
astGeneration/depend.cpp:                    called_constructor_declaration -> index);
astGeneration/depend.cpp:    if (constructor_declaration -> index == indx)
astGeneration/depend.cpp:            constructor_declaration -> index = CYCLE_INFINITY;
astGeneration/depend.cpp:                called_constructor_declaration -> index = CYCLE_INFINITY;
astGeneration/depend.cpp:                    (AstMethodBody*) called_constructor_declaration ->
astGeneration/depend.cpp:                    called_constructor_declaration -> constructor_declarator;
astGeneration/depend.cpp:                Semantic* sem = called_constructor_declaration ->
astGeneration/depend.cpp:                    constructor_symbol -> containing_type ->
astGeneration/depend.cpp:                    semantic_environment -> sem;
astGeneration/depend.cpp:                sem -> ReportSemError(SemanticError::CIRCULAR_THIS_CALL,
astGeneration/depend.cpp:                                      constructor_block -> explicit_constructor_opt,
astGeneration/depend.cpp:                                      sem -> lex_stream -> NameString(constructor_declarator -> identifier_token));
astGeneration/depend.cpp:        for (unsigned j = 0; j < file_symbol -> types.Length(); j++)
astGeneration/depend.cpp:            TypeSymbol* type = file_symbol -> types[j];
astGeneration/depend.cpp:            if (type -> incremental_index == OMEGA)
astGeneration/depend.cpp:        if (type -> incremental_index == OMEGA)
astGeneration/depend.cpp:    type -> incremental_index = indx;
astGeneration/depend.cpp:    // if dependents is reflexive make it non-reflexive - saves time !!!
astGeneration/depend.cpp:    type -> dependents -> RemoveElement(type);
astGeneration/depend.cpp:    type -> dependents_closure = new SymbolSet;
astGeneration/depend.cpp:    type -> dependents_closure -> AddElement(type);
astGeneration/depend.cpp:    for (dependent = (TypeSymbol*) type -> dependents -> FirstElement();
astGeneration/depend.cpp:         dependent = (TypeSymbol*) type -> dependents -> NextElement())
astGeneration/depend.cpp:        if (dependent -> incremental_index == OMEGA)
astGeneration/depend.cpp:        type -> incremental_index = Min(type -> incremental_index,
astGeneration/depend.cpp:                                        dependent -> incremental_index);
astGeneration/depend.cpp:        type -> dependents_closure ->
astGeneration/depend.cpp:            Union(*(dependent -> dependents_closure));
astGeneration/depend.cpp:    if (type -> incremental_index == indx)
astGeneration/depend.cpp:            scc_dependent -> incremental_index = CYCLE_INFINITY;
astGeneration/depend.cpp:            *(scc_dependent -> dependents_closure) =
astGeneration/depend.cpp:                *(type -> dependents_closure);
astGeneration/depend.cpp:        char* name = file_symbol -> FileName();
astGeneration/depend.cpp:        int length = file_symbol -> FileNameLength() -
astGeneration/depend.cpp:            (file_symbol -> IsJava() ? FileSymbol::java_suffix_length
astGeneration/depend.cpp:    if (control -> option.directory == NULL)
astGeneration/depend.cpp:        name = file_symbol -> FileName();
astGeneration/depend.cpp:        length = file_symbol -> FileNameLength() -
astGeneration/depend.cpp:            (file_symbol -> IsJava() ? FileSymbol::java_suffix_length
astGeneration/depend.cpp:        name = file_symbol -> Utf8Name();
astGeneration/depend.cpp:        DirectorySymbol* dir_symbol = file_symbol -> OutputDirectory();
astGeneration/depend.cpp:        char* dir_name = dir_symbol -> DirectoryName();
astGeneration/depend.cpp:    for (unsigned i = 0; i < file_symbol -> types.Length(); i++)
astGeneration/depend.cpp:        TypeSymbol* type = file_symbol -> types[i];
astGeneration/depend.cpp:        for (parent = (TypeSymbol*) type -> parents_closure -> FirstElement();
astGeneration/depend.cpp:             parent = (TypeSymbol*) type -> parents_closure -> NextElement())
astGeneration/depend.cpp:            FileSymbol* symbol = parent -> file_symbol;
astGeneration/depend.cpp:            if (symbol && (! symbol -> IsZip()))
astGeneration/depend.cpp:    if (control -> option.directory)
astGeneration/depend.cpp:        type -> parents_closure = new SymbolSet;
astGeneration/depend.cpp:        FileSymbol* file_symbol = type -> file_symbol;
astGeneration/depend.cpp:        if (file_symbol && (! file_symbol -> IsZip()))
astGeneration/depend.cpp:        for (dependent = (TypeSymbol*) parent -> dependents_closure -> FirstElement();
astGeneration/depend.cpp:             dependent = (TypeSymbol*) parent -> dependents_closure -> NextElement())
astGeneration/depend.cpp:            dependent -> parents_closure -> AddElement(parent);
astGeneration/depend.cpp:        delete type -> parents_closure;
astGeneration/depend.cpp:        type -> parents_closure = NULL;
astGeneration/depend.cpp:    pending -> AddElement(type);
astGeneration/depend.cpp:    for (super_type = (TypeSymbol*) type -> supertypes_closure -> FirstElement();
astGeneration/depend.cpp:         super_type = (TypeSymbol*) type -> supertypes_closure -> NextElement())
astGeneration/depend.cpp:            if (! pending -> IsElement(super_type))
astGeneration/depend.cpp:        if (! pending -> IsElement(type))
astGeneration/depend.cpp:    pending -> SetEmpty();
astGeneration/depend.cpp:    assert(! base_type -> IsArray() && ! base_type -> Primitive());
astGeneration/depend.cpp:    if (parent_type -> IsArray())
astGeneration/depend.cpp:        parent_type = parent_type -> base_type;
astGeneration/depend.cpp:    if (base_type -> Bad() || parent_type -> Bad() ||
astGeneration/depend.cpp:        parent_type == control.null_type || parent_type -> Primitive())
astGeneration/depend.cpp:    base_type = base_type -> outermost_type;
astGeneration/depend.cpp:    parent_type = parent_type -> outermost_type;
astGeneration/depend.cpp:    parent_type -> dependents -> AddElement(base_type);
astGeneration/depend.cpp:        base_type -> static_parents -> AddElement(parent_type);
astGeneration/depend.cpp:    else base_type -> parents -> AddElement(parent_type);
astGeneration/depend.cpp:    assert(parent_type -> ContainingPackage() != control.UnnamedPackage() ||
astGeneration/depend.cpp:           base_type -> ContainingPackage() == control.UnnamedPackage());
astGeneration/depend.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
astGeneration/depend.h:    enum { OMEGA = -1, CYCLE_INFINITY = INT_MAX };
astGeneration/depend.h:        void Pop() { if (info.Length() > 0) info.Reset(info.Length() - 1); }
astGeneration/depend.h:            return (T *) (info.Length() > 0 ? info[info.Length() - 1] : NULL);
Binary file depend.o matches
orchestration/diagnose.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
orchestration/diagnose.cpp:    lex_stream -> Reset();
orchestration/diagnose.cpp:    TokenObject curtok = lex_stream -> Gettoken();
orchestration/diagnose.cpp:    tok = lex_stream -> Kind(curtok);
orchestration/diagnose.cpp:        prev_pos = -1;
orchestration/diagnose.cpp:        prev_stack_top = -1;
orchestration/diagnose.cpp:        next_pos = -1;
orchestration/diagnose.cpp:        next_stack_top = -1;
orchestration/diagnose.cpp:        temp_stack_top = state_stack_top - 1;
orchestration/diagnose.cpp:/* Eventually, a SHIFT, SHIFT-REDUCE, ACCEPT or ERROR action is  */
orchestration/diagnose.cpp:                temp_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:/* At this point, we have a shift, shift-reduce, accept or error */
orchestration/diagnose.cpp:        while (act > ERROR_ACTION ||       /* SHIFT-REDUCE action */
orchestration/diagnose.cpp:            /* If we have a shift-reduce, process it as well as  */
orchestration/diagnose.cpp:            /* the goto-reduce actions that follow it.           */
orchestration/diagnose.cpp:                act -= ERROR_ACTION;
orchestration/diagnose.cpp:                    next_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:            curtok = lex_stream -> Gettoken();
orchestration/diagnose.cpp:            tok = lex_stream -> Kind(curtok);
orchestration/diagnose.cpp:                /* ... Process all goto-reduce actions following */
orchestration/diagnose.cpp:                    temp_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:                lhs_symbol = candidate.symbol - NT_OFFSET;
orchestration/diagnose.cpp:                    state_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:                curtok = lex_stream -> Gettoken();
orchestration/diagnose.cpp:                tok = lex_stream -> Kind(curtok);
orchestration/diagnose.cpp:    TokenObject prevtok = lex_stream -> Previous(error_token);
orchestration/diagnose.cpp:/* file, we issue the end-of-file error and quit. Otherwise, ... */
orchestration/diagnose.cpp:    if (lex_stream -> Kind(error_token) == EOFT_SYMBOL)
orchestration/diagnose.cpp:    while (lex_stream -> Kind(buffer[BUFF_UBOUND]) != EOFT_SYMBOL)
orchestration/diagnose.cpp:        candidate = SecondaryPhase(buffer[MAX_DISTANCE - MIN_DISTANCE + 2]);
orchestration/diagnose.cpp:    for (i = BUFF_UBOUND; lex_stream -> Kind(buffer[i]) == EOFT_SYMBOL; i--)
orchestration/diagnose.cpp:    error.Report(0, DELETION_CODE, terminal_index[lex_stream -> Kind(prevtok)],
orchestration/diagnose.cpp:    for (k = i; k > 0; k--)
orchestration/diagnose.cpp:        buffer[k - 1] = lex_stream -> Previous(buffer[k]);
orchestration/diagnose.cpp:        buffer[k] = lex_stream -> Next(buffer[k - 1]);
orchestration/diagnose.cpp:    repair.distance = repair.distance - repair.buffer_position + 1;
orchestration/diagnose.cpp:         repair.distance--;
orchestration/diagnose.cpp:        if (! lex_stream -> Kind(buffer[repair.buffer_position - 1]))
orchestration/diagnose.cpp:    for (p1 = lex_stream -> NameString(buffer[buffer_position]); *p1; p1++)
orchestration/diagnose.cpp:    for (p2 = lex_stream -> NameString(buffer[buffer_position + 1]); *p2; p2++)
orchestration/diagnose.cpp:    p1 = lex_stream -> NameString(buffer[buffer_position]);
orchestration/diagnose.cpp:    p2 = lex_stream -> NameString(buffer[buffer_position + 1]);
orchestration/diagnose.cpp:                   lex_stream -> Kind(buffer[repair.buffer_position+1]),
orchestration/diagnose.cpp:    if (lex_stream -> Kind(buffer[repair.buffer_position]) == EOLT_SYMBOL &&
orchestration/diagnose.cpp:        lex_stream -> AfterEol(buffer[repair.buffer_position+1]))
orchestration/diagnose.cpp:    temp_stack_top = stack_top - 1;
orchestration/diagnose.cpp:    tok = lex_stream -> Kind(buffer[repair.buffer_position]);
orchestration/diagnose.cpp:    lex_stream -> Reset(buffer[repair.buffer_position + 1]);
orchestration/diagnose.cpp:            temp_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:            lex_stream -> AfterEol(buffer[repair.buffer_position]))
orchestration/diagnose.cpp:            lex_stream -> AfterEol(buffer[repair.buffer_position+1]))
orchestration/diagnose.cpp:    TokenObject prevtok = buffer[repair.buffer_position - 1],
orchestration/diagnose.cpp:                         Loc(curtok), lex_stream -> Next(curtok));
orchestration/diagnose.cpp:                                -scope_index[i],
orchestration/diagnose.cpp:                            -scope_index[scope_stack_top],
orchestration/diagnose.cpp:            lex_stream -> Reset(buffer[repair.buffer_position]);
orchestration/diagnose.cpp:            lex_stream -> Reset(buffer[repair.buffer_position + 1]);
orchestration/diagnose.cpp:            lex_stream -> Reset(buffer[repair.buffer_position + 2]);
orchestration/diagnose.cpp:                      lex_stream -> Kind(buffer[repair.buffer_position + 1]);
orchestration/diagnose.cpp:            lex_stream -> Reset(buffer[repair.buffer_position + 2]);
orchestration/diagnose.cpp:/* parser is simulated until a shift (or shift-reduce) action    */
orchestration/diagnose.cpp:    temp_stack_top = stack_top - 1;
orchestration/diagnose.cpp:/* candidate until a SHIFT or SHIFT-REDUCE is computed. ERROR    */
orchestration/diagnose.cpp:    lex_stream -> Reset(buffer[buffer_position]);
orchestration/diagnose.cpp:        /* Process all goto-reduce actions following reduction,  */
orchestration/diagnose.cpp:            temp_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:/* candidate and we are ready to shift or shift-reduce it. First,   */
orchestration/diagnose.cpp:                        /* next move is shift or shift-reduce.      */
orchestration/diagnose.cpp:    tok = lex_stream -> Kind(buffer[buffer_position]);
orchestration/diagnose.cpp:    lex_stream -> Reset(buffer[buffer_position + 1]);
orchestration/diagnose.cpp:    if (act > ERROR_ACTION)   /* shift-reduce on candidate? */
orchestration/diagnose.cpp:        act -= ERROR_ACTION;
orchestration/diagnose.cpp:        /* Process all goto-reduce actions following reduction,  */
orchestration/diagnose.cpp:            temp_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:                           ? non_terminal_index[highest_symbol - NT_OFFSET]
orchestration/diagnose.cpp:/* It returns the highest level non-terminal B such that         */
orchestration/diagnose.cpp:    highest_symbol = sym - NT_OFFSET;
orchestration/diagnose.cpp:    tok = lex_stream -> Kind(buffer[buffer_position]);
orchestration/diagnose.cpp:    lex_stream -> Reset(buffer[buffer_position + 1]);
orchestration/diagnose.cpp:        /* Process all goto-reduce actions following reduction,  */
orchestration/diagnose.cpp:            temp_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:    int index = Spell::Index(lex_stream -> NameString(tok), keyword);
orchestration/diagnose.cpp:        temp_stack_top = stack_top - 1;
orchestration/diagnose.cpp:        lex_stream -> Reset(buffer[repair.buffer_position]);
orchestration/diagnose.cpp:            /* ... Process all goto-reduce actions following */
orchestration/diagnose.cpp:                temp_stack_top -= (rhs[act]-1);
orchestration/diagnose.cpp:                 in_symbol(temp_stack[j]) == scope_rhs[k]; j--)
orchestration/diagnose.cpp:                     j--)
orchestration/diagnose.cpp:                /* the left-hand side of the scope is used as    */
orchestration/diagnose.cpp:                /* after parsing the left-hand symbol.           */
orchestration/diagnose.cpp:                    /* by the left-hand symbol, and recursively  */
orchestration/diagnose.cpp:                    if ((distance - repair.buffer_position + 1) <
orchestration/diagnose.cpp:                            top -= (rhs[act]-1);
orchestration/diagnose.cpp:                    if (lex_stream -> Kind(buffer[repair.buffer_position]) ==
orchestration/diagnose.cpp:    for (top = stack_top - 1; top >= 0; top--)
orchestration/diagnose.cpp:                       lex_stream -> Kind(buffer[buffer_position]),
orchestration/diagnose.cpp:        if (((j - buffer_position + 1) > MIN_DISTANCE) &&
orchestration/diagnose.cpp:    if ((repair.distance - buffer_position) > MIN_DISTANCE &&
orchestration/diagnose.cpp://    if ((manual_distance - repair.buffer_position) > MIN_DISTANCE &&
orchestration/diagnose.cpp:        buffer[1] = lex_stream -> Previous(buffer[2]);
orchestration/diagnose.cpp:        buffer[0] = lex_stream -> Previous(buffer[1]);
orchestration/diagnose.cpp:            buffer[k] = lex_stream -> Next(buffer[k - 1]);
orchestration/diagnose.cpp:        for (next_last_index = MAX_DISTANCE - 1;
orchestration/diagnose.cpp:             lex_stream -> Kind(buffer[next_last_index]) == EOFT_SYMBOL;
orchestration/diagnose.cpp:             next_last_index--);
orchestration/diagnose.cpp:    buffer[2] = lex_stream -> Previous(buffer[3]);
orchestration/diagnose.cpp:    buffer[1] = lex_stream -> Previous(buffer[2]);
orchestration/diagnose.cpp:    buffer[0] = lex_stream -> Previous(buffer[1]);
orchestration/diagnose.cpp:        buffer[k] = lex_stream -> Next(buffer[k - 1]);
orchestration/diagnose.cpp:    for (last_index = MAX_DISTANCE - 1;
orchestration/diagnose.cpp:             lex_stream -> Kind(buffer[last_index]) == EOFT_SYMBOL;
orchestration/diagnose.cpp:         last_index--);
orchestration/diagnose.cpp:/* recovery either deletes fewer symbols or parse-checks further */
orchestration/diagnose.cpp:           (misplaced.distance - misplaced.num_deletions) >=
orchestration/diagnose.cpp:           (repair.distance - repair.num_deletions))
orchestration/diagnose.cpp:        buffer[1] = lex_stream -> Previous(buffer[2]);
orchestration/diagnose.cpp:        buffer[0] = lex_stream -> Previous(buffer[1]);
orchestration/diagnose.cpp:            buffer[k] = lex_stream -> Next(buffer[k - 1]);
orchestration/diagnose.cpp:            k = scope_repair.buffer_position - 1;
orchestration/diagnose.cpp:            if ((j - k) > MIN_DISTANCE &&
orchestration/diagnose.cpp:                (j - k) > (repair.distance - repair.num_deletions))
orchestration/diagnose.cpp:        lex_stream -> Kind(buffer[last_index]) == EOFT_SYMBOL)
orchestration/diagnose.cpp:             top >= 0 && repair.code == 0; top--)
orchestration/diagnose.cpp:             candidate.symbol = lex_stream -> Kind(buffer[2]);
orchestration/diagnose.cpp:             lex_stream -> Reset(lex_stream -> Next(buffer[2]));
orchestration/diagnose.cpp:                       lex_stream -> Kind(buffer[repair.buffer_position]);
orchestration/diagnose.cpp:             lex_stream -> Reset(lex_stream ->
orchestration/diagnose.cpp:             lex_stream -> Reset(buffer[repair.buffer_position]);
orchestration/diagnose.cpp:    for (int top = stack_top - 1; top >= 0; top--)
orchestration/diagnose.cpp:        int j = ParseCheck(stck, top, lex_stream -> Kind(buffer[2]), 3);
orchestration/diagnose.cpp:            (j - stack_deletions) >
orchestration/diagnose.cpp:            (repair.distance - repair.num_deletions))
orchestration/diagnose.cpp:         top >= 0 && repair.num_deletions >= stack_deletions; top--)
orchestration/diagnose.cpp:             i <= (last_index - MIN_DISTANCE + 1) &&
orchestration/diagnose.cpp:             (repair.num_deletions >= (stack_deletions + i - 1)); i++)
orchestration/diagnose.cpp:            j = ParseCheck(stck, top, lex_stream -> Kind(buffer[i]), i + 1);
orchestration/diagnose.cpp:            if ((j - i + 1) > MIN_DISTANCE)
orchestration/diagnose.cpp:                k = stack_deletions + i - 1;
orchestration/diagnose.cpp:                    (j - k) > (repair.distance - repair.num_deletions) ||
orchestration/diagnose.cpp:                     (j - k) == (repair.distance -
orchestration/diagnose.cpp:                if ((j - i + 1) > MIN_DISTANCE)
orchestration/diagnose.cpp:                    k = stack_deletions + i - 1;
orchestration/diagnose.cpp:                       (j - k) > (repair.distance -
orchestration/diagnose.cpp:                                -scope_index[i],
orchestration/diagnose.cpp:                            -scope_index[scope_stack_top],
orchestration/diagnose.cpp:                         buffer[repair.buffer_position - 1]);
orchestration/diagnose.cpp:     histack[top] = errors.Length() - 1;
orchestration/diagnose.cpp:         top--;
orchestration/diagnose.cpp:             /* The array is most-likely almost sorted. Therefore,    */
orchestration/diagnose.cpp:                 /* Recall that its right-span location is reached    */
orchestration/diagnose.cpp:             if ((i - lower) < (upper - i))
orchestration/diagnose.cpp:                 upper = i - 1;
orchestration/diagnose.cpp:                 histack[top] = i - 1;
orchestration/diagnose.cpp:        lex_stream -> RereadInput();
orchestration/diagnose.cpp:    left_line_no = lex_stream -> Line(left_token);
orchestration/diagnose.cpp:    left_column_no = lex_stream -> Column(left_token);
orchestration/diagnose.cpp:    right_line_no = lex_stream -> Line(right_token);
orchestration/diagnose.cpp:    right_column_no = lex_stream -> RightColumn(right_token);
orchestration/diagnose.cpp:    return lex_stream -> FileName();
orchestration/diagnose.cpp:        for (i = ParseError::scope_suffix[- (int)name_index];
orchestration/diagnose.cpp:    lex_stream -> OutputSource(this, s);
orchestration/diagnose.cpp:                << lex_stream -> FileName() << "\":";
orchestration/diagnose.cpp:    lex_stream -> RereadInput();
orchestration/diagnose.cpp:    if (! lex_stream -> InputBuffer())
orchestration/diagnose.cpp:        char* file_name = lex_stream -> FileName();
orchestration/diagnose.cpp:        int length = lex_stream -> FileNameLength();
orchestration/diagnose.cpp:        control.system_semantic ->
orchestration/diagnose.cpp:    int stack_top = -1;
orchestration/diagnose.cpp:              stack_top--)
orchestration/diagnose.cpp:                     j = error_stack[stack_top - 1];
orchestration/diagnose.cpp:    for ( ; stack_top > 0; stack_top--)
orchestration/diagnose.cpp:            j = error_stack[stack_top - 1];
orchestration/diagnose.cpp:        lex_stream -> DestroyInput();
orchestration/diagnose.cpp:    JikesAPI::getInstance() -> reportError(&errors[k]);
orchestration/diagnose.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
orchestration/diagnose.h:    enum { NIL = -1 };
Binary file diagnose.o matches
declarations/platform/double.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
declarations/platform/double.cpp:        a  = -a; // even works for MIN_INT!
declarations/platform/double.cpp:        l = -a;
declarations/platform/double.cpp:        int exponent = FRACT_SIZE - 1, sticky = 0;
declarations/platform/double.cpp:    if (d.Exponent() < -BIAS - 30)
declarations/platform/double.cpp:            // A regular, normalized number - do work on the parts
declarations/platform/double.cpp:            *this = Normalize(d.Sign(), d.Exponent() - 2, fraction);
declarations/platform/double.cpp:            aadj1 = -1;
declarations/platform/double.cpp:            // special case - mantissa is power of 2
declarations/platform/double.cpp:            aadj1 = -aadj;
declarations/platform/double.cpp:        aadj1 = dsign ? aadj : -aadj;
declarations/platform/double.cpp:        value.word -= (FRACT_SIZE + 1) * MIN_FRACT;
declarations/platform/double.cpp:        if (Exponent() >= BIAS - FRACT_SIZE)
declarations/platform/double.cpp:            if (tmp.value.word == POS_INF - 1)
declarations/platform/double.cpp:            value.word = POS_INF - 1;
declarations/platform/double.cpp:        // correctly round *this + adj in some half-way cases.
declarations/platform/double.cpp:        if (y <= FRACT_SIZE - BIAS || aadj > 1)
declarations/platform/double.cpp:                aadj1 = -aadj1;
declarations/platform/double.cpp:        aadj -= aadj.IntValue();
declarations/platform/double.cpp:                    shift -= 4;
declarations/platform/double.cpp:                    shift -= 4;
declarations/platform/double.cpp:                    exponent = exponent * 10 + c - U_0;
declarations/platform/double.cpp:                                *this = - *this;
declarations/platform/double.cpp:                exponent = - exponent;
declarations/platform/double.cpp:            y = 10 * y + c - U_0;
declarations/platform/double.cpp:            if (c -= U_0)
declarations/platform/double.cpp:                L = c - U_0;
declarations/platform/double.cpp:                    L = 10 * L + c - U_0;
declarations/platform/double.cpp:                if (s - s1 > 8 || L > 19999)
declarations/platform/double.cpp:                    e = -e;
declarations/platform/double.cpp:        k = nd - MAX_DIGITS;
declarations/platform/double.cpp:        i = MAX_DIGITS - nd0;
declarations/platform/double.cpp:            nf -= k;
declarations/platform/double.cpp:            nf -= k;
declarations/platform/double.cpp:        roundup = s0[MAX_DIGITS - 1 + j] != U_4;
declarations/platform/double.cpp:    e1 = e -= nf;
declarations/platform/double.cpp:    // decimal point, followed by nd-nd0 digits.  The number we're
declarations/platform/double.cpp:                *this = -*this;
declarations/platform/double.cpp:                    *this = -*this;
declarations/platform/double.cpp:            i = 7 - nd;
declarations/platform/double.cpp:                e -= i;
declarations/platform/double.cpp:                    *this = -*this;
declarations/platform/double.cpp:        else if (e >= -10 )
declarations/platform/double.cpp:            *this /= tens[-e];
declarations/platform/double.cpp:                *this = -*this;
declarations/platform/double.cpp:    e1 += nd - k;
declarations/platform/double.cpp:            value.word -= (FRACT_SIZE + 1) * MIN_FRACT;
declarations/platform/double.cpp:            if (z > BIAS - FRACT_SIZE)
declarations/platform/double.cpp:            if (z > BIAS - FRACT_SIZE - 1)
declarations/platform/double.cpp:                value.word = POS_INF - 1;
declarations/platform/double.cpp:        e1 = -e1;
declarations/platform/double.cpp:    // Now the hard part -- adjusting *this to the correct value.
declarations/platform/double.cpp:            bb2 = bb5 = -e;
declarations/platform/double.cpp:            bd2 -= bbe;
declarations/platform/double.cpp:        i = j + bbbits - 1; // logb(*this)
declarations/platform/double.cpp:        if (i < 1 - BIAS) // denormal
declarations/platform/double.cpp:            j = FRACT_SIZE + 2 - bbbits;
declarations/platform/double.cpp:            bb2 -= i;
declarations/platform/double.cpp:            bd2 -= i;
declarations/platform/double.cpp:            bs2 -= i;
declarations/platform/double.cpp:        BigInt delta = bb - bd;
declarations/platform/double.cpp:        // Error is less than half an ulp -- check for
declarations/platform/double.cpp:            if (dsign || FractBits() || Exponent() <= 1 - BIAS
declarations/platform/double.cpp:                // boundary case -- decrement exponent
declarations/platform/double.cpp:                value.word--;
declarations/platform/double.cpp:        // exactly half-way between
declarations/platform/double.cpp:                value.word += dsign ? 1 : -1;
declarations/platform/double.cpp:        // more than 1/2 ulp off - try again
declarations/platform/double.cpp:        // has an ICE caused by register over-allocation if it is inline.
declarations/platform/double.cpp:        *this = -*this;
declarations/platform/double.cpp:        result <<= (exponent - FRACT_SIZE);
declarations/platform/double.cpp:        result >>= (FRACT_SIZE - exponent);
declarations/platform/double.cpp:    return sign ? -result : result;
declarations/platform/double.cpp:        result <<= (exponent - FRACT_SIZE);
declarations/platform/double.cpp:        result >>= (FRACT_SIZE - exponent);
declarations/platform/double.cpp:    return sign ? (LongInt) -result : result;
declarations/platform/double.cpp:        if (round && (sticky || (fraction & 1)) && exponent > -BIAS)
declarations/platform/double.cpp:            exponent--;
declarations/platform/double.cpp:    if (exponent <= -BIAS)
declarations/platform/double.cpp:        if (exponent < -BIAS - FRACT_SIZE)
declarations/platform/double.cpp:        while (exponent <= -BIAS)
declarations/platform/double.cpp:        exponent = -BIAS;
declarations/platform/double.cpp:    if (exponent == -BIAS)
declarations/platform/double.cpp:            exponent--;
declarations/platform/double.cpp:    L = (i4) f.ExpBits() - FRACT_SIZE * MIN_FRACT;
declarations/platform/double.cpp:        L = -L >> FRACT_SIZE;
declarations/platform/double.cpp:    k = b.hi0bits() - a.hi0bits() + 32 * (a.wds - b.wds);
declarations/platform/double.cpp:        fb.value.word -= k * MIN_FRACT;
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:        x = -x;
declarations/platform/double.cpp:        y = -y;
declarations/platform/double.cpp:        round = y << (32 + expy - expx);
declarations/platform/double.cpp:        y >>= expx - expy;
declarations/platform/double.cpp:        round = x << (32 + expx - expy);
declarations/platform/double.cpp:        x >>= expy - expx;
declarations/platform/double.cpp:    // Do the arithmetic. The excess magnitude of 32-bit arithmetic means
declarations/platform/double.cpp:    // pre-alignment avoids any question of INT_MIN negation problems.
declarations/platform/double.cpp:        x = -x;
declarations/platform/double.cpp:    return Normalize(signx, expx - 6, (u4) x);
declarations/platform/double.cpp:IEEEfloat IEEEfloat::operator- () const
declarations/platform/double.cpp:    return IEEEfloat(-value.float_value);
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:    // will be 46-48 bits (unsigned); shift it back to 28 bits for Normalize,
declarations/platform/double.cpp:    return Normalize(sign, exponent - 3, x);
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:    exponent = SplitInto(x) - op.SplitInto(y);
declarations/platform/double.cpp:        exponent--;
declarations/platform/double.cpp:            x -= y;
declarations/platform/double.cpp:    return Normalize(sign, exponent - 8, result);
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:    // This algorithm is from fdlibm.c - see above notice
declarations/platform/double.cpp:    exponent = SplitInto(x) - expy;
declarations/platform/double.cpp:    while (exponent--)
declarations/platform/double.cpp:        z = x - y;
declarations/platform/double.cpp:    z = x - y;
declarations/platform/double.cpp:    if (exponent == -IEEEfloat::Bias())
declarations/platform/double.cpp:            *this = Normalize(sign, 1 - IEEEfloat::Bias(),
declarations/platform/double.cpp:        a  = -a; // even works for MIN_INT!
declarations/platform/double.cpp:        l  = -a; // even works for MIN_LONG!
declarations/platform/double.cpp:                    shift -= 4;
declarations/platform/double.cpp:                    shift -= 4;
declarations/platform/double.cpp:                    exponent = exponent * 10 + c - U_0;
declarations/platform/double.cpp:                                *this = - *this;
declarations/platform/double.cpp:                exponent = - exponent;
declarations/platform/double.cpp:            y = 10 * y + c - U_0;
declarations/platform/double.cpp:            z = 10 * z + c - U_0;
declarations/platform/double.cpp:            if (c -= U_0)
declarations/platform/double.cpp:                L = c - U_0;
declarations/platform/double.cpp:                    L = 10 * L + c - U_0;
declarations/platform/double.cpp:                if (s - s1 > 8 || L > 19999)
declarations/platform/double.cpp:                    e = -e;
declarations/platform/double.cpp:        k = nd - MAX_DIGITS;
declarations/platform/double.cpp:        i = MAX_DIGITS - nd0;
declarations/platform/double.cpp:            nf -= k;
declarations/platform/double.cpp:            nf -= k;
declarations/platform/double.cpp:        roundup = s0[MAX_DIGITS - 1 + j] != U_4;
declarations/platform/double.cpp:    e1 = e -= nf;
declarations/platform/double.cpp:    // decimal point, followed by nd-nd0 digits.  The number we're
declarations/platform/double.cpp:        *this = *this * tens[k - 9] + z;
declarations/platform/double.cpp:                *this = -*this;
declarations/platform/double.cpp:                    *this = -*this;
declarations/platform/double.cpp:            i = 15 - nd;
declarations/platform/double.cpp:                e -= i;
declarations/platform/double.cpp:                    *this = -*this;
declarations/platform/double.cpp:        else if (e >= -22 )
declarations/platform/double.cpp:            *this /= tens[-e];
declarations/platform/double.cpp:                *this = -*this;
declarations/platform/double.cpp:    e1 += nd - k;
declarations/platform/double.cpp:            setHighWord(HighWord() - (FRACT_SIZE + 1) * MIN_FRACT);
declarations/platform/double.cpp:            if (z > BIAS - FRACT_SIZE)
declarations/platform/double.cpp:            if (z > BIAS - FRACT_SIZE - 1)
declarations/platform/double.cpp:                setHighAndLowWords(POS_INF_HI - 1, ZERO_LO - 1);
declarations/platform/double.cpp:        e1 = -e1;
declarations/platform/double.cpp:    // Now the hard part -- adjusting *this to the correct value.
declarations/platform/double.cpp:            bb2 = bb5 = -e;
declarations/platform/double.cpp:            bd2 -= bbe;
declarations/platform/double.cpp:        i = j + bbbits - 1; // logb(*this)
declarations/platform/double.cpp:        if (i < 1 - BIAS) // denormal
declarations/platform/double.cpp:            j = FRACT_SIZE + 2 - bbbits;
declarations/platform/double.cpp:            bb2 -= i;
declarations/platform/double.cpp:            bd2 -= i;
declarations/platform/double.cpp:            bs2 -= i;
declarations/platform/double.cpp:        BigInt delta = bb - bd;
declarations/platform/double.cpp:        // Error is less than half an ulp -- check for
declarations/platform/double.cpp:                || Exponent() <= 1 - BIAS || delta.IsZero())
declarations/platform/double.cpp:                // boundary case -- decrement exponent
declarations/platform/double.cpp:                BaseLong::operator --();
declarations/platform/double.cpp:        // exactly half-way between
declarations/platform/double.cpp:                BaseLong::operator +=(dsign ? 1 : -1);
declarations/platform/double.cpp:        // more than 1/2 ulp off - try again
declarations/platform/double.cpp:                aadj1 = -1;
declarations/platform/double.cpp:                // special case - mantissa is power of 2
declarations/platform/double.cpp:                aadj1 = -aadj;
declarations/platform/double.cpp:            //            aadj1 = dsign ? aadj : -aadj;
declarations/platform/double.cpp:                aadj1 = -aadj;
declarations/platform/double.cpp:            setHighWord(HighWord() - (FRACT_SIZE + 1) * MIN_FRACT);
declarations/platform/double.cpp:            if (Exponent() >= BIAS - FRACT_SIZE)
declarations/platform/double.cpp:                if (tmp.HighWord() == POS_INF_HI - 1 &&
declarations/platform/double.cpp:                    tmp.LowWord() == ZERO_LO - 1)
declarations/platform/double.cpp:                setHighAndLowWords(POS_INF_HI - 1, ZERO_LO - 1);
declarations/platform/double.cpp:            // correctly round *this + adj in some half-way cases.
declarations/platform/double.cpp:            if (y <= FRACT_SIZE - BIAS || aadj > 1)
declarations/platform/double.cpp:                    aadj1 = -aadj1;
declarations/platform/double.cpp:            aadj -= aadj.IntValue();
declarations/platform/double.cpp:        *this = -*this;
declarations/platform/double.cpp:    i4 result = (i4) (Fraction() >> (FRACT_SIZE - exponent)).LowWord();
declarations/platform/double.cpp:    return sign ? -result : result;
declarations/platform/double.cpp:        result <<= (exponent - FRACT_SIZE);
declarations/platform/double.cpp:        result >>= (FRACT_SIZE - exponent);
declarations/platform/double.cpp:    return sign ? (LongInt) -result : result;
declarations/platform/double.cpp:            exponent > -(int) BIAS)
declarations/platform/double.cpp:            exponent--;
declarations/platform/double.cpp:    if (exponent <= -BIAS)
declarations/platform/double.cpp:        if (exponent < -BIAS - FRACT_SIZE)
declarations/platform/double.cpp:        while (exponent <= -BIAS)
declarations/platform/double.cpp:        exponent = -BIAS;
declarations/platform/double.cpp:    if (exponent == -(int) BIAS)
declarations/platform/double.cpp:            exponent--;
declarations/platform/double.cpp:    L = (i4) d.ExpBits() - FRACT_SIZE * MIN_FRACT;
declarations/platform/double.cpp:        L = -L >> FRACT_SIZE_HI;
declarations/platform/double.cpp:            L -= FRACT_SIZE_HI;
declarations/platform/double.cpp:            d.setHighAndLowWords(0, L >= 31 ? 1 : 1 << (31 - L));
declarations/platform/double.cpp:    k = b.hi0bits() - a.hi0bits() + 32 * (a.wds - b.wds);
declarations/platform/double.cpp:        db.setHighWord(db.HighWord() - k * MIN_FRACT);
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:        x = -x;
declarations/platform/double.cpp:        y = -y;
declarations/platform/double.cpp:        round = y << (64 + expy - expx);
declarations/platform/double.cpp:        y >>= expx - expy;
declarations/platform/double.cpp:        round = x << (64 + expx - expy);
declarations/platform/double.cpp:        x >>= expy - expx;
declarations/platform/double.cpp:    // Do the arithmetic. The excess magnitude of 64-bit arithmetic means
declarations/platform/double.cpp:    // pre-alignment avoids any question of LONG_MIN negation problems.
declarations/platform/double.cpp:        x = -x;
declarations/platform/double.cpp:    return Normalize(signx, expx - 8, (ULongInt) x);
declarations/platform/double.cpp:IEEEdouble IEEEdouble::operator- () const
declarations/platform/double.cpp:    return IEEEdouble(-value.double_value);
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:    return Normalize(sign, exponent - 8, x);
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:    exponent = SplitInto(x) - op.SplitInto(y);
declarations/platform/double.cpp:        exponent--;
declarations/platform/double.cpp:            x -= y;
declarations/platform/double.cpp:    return Normalize(sign, exponent - 11, result);
declarations/platform/double.cpp:    // Now for the real work - do manipulations on copies
declarations/platform/double.cpp:    // This algorithm is from fdlibm.c - see above notice
declarations/platform/double.cpp:    exponent = SplitInto(x) - expy;
declarations/platform/double.cpp:    while (exponent--)
declarations/platform/double.cpp:        z = x - y;
declarations/platform/double.cpp:    z = x - y;
declarations/platform/double.cpp:        e = k + fe - IEEEfloat::FractSize();
declarations/platform/double.cpp:        bits = IEEEfloat::FractSize() - k + 1;
declarations/platform/double.cpp:        e = k + fe - IEEEfloat::FractSize() + 1;
declarations/platform/double.cpp:        bits = 32 - hi0bits(z);
declarations/platform/double.cpp:            data[0] = y | z << (32 - k);
declarations/platform/double.cpp:        e = k + de - IEEEdouble::FractSize();
declarations/platform/double.cpp:        bits = IEEEdouble::FractSize() - k + 1;
declarations/platform/double.cpp:        e = k + de - IEEEdouble::FractSize() + 1;
declarations/platform/double.cpp:        bits = 32 * wds - hi0bits(data[wds - 1]);
declarations/platform/double.cpp:            multadd(10, *s++ - U_0);
declarations/platform/double.cpp:        multadd(10, *s++ - U_0);
declarations/platform/double.cpp:BigInt BigInt::operator -(const BigInt &op) const
declarations/platform/double.cpp:    i = a -> compareTo(op);
declarations/platform/double.cpp:    c.resize(a -> k);
declarations/platform/double.cpp:    wa = a -> wds;
declarations/platform/double.cpp:    xa = a -> data;
declarations/platform/double.cpp:    wb = b -> wds;
declarations/platform/double.cpp:    xb = b -> data;
declarations/platform/double.cpp:        y = ULongInt(*xa++) - *xb++ - borrow;
declarations/platform/double.cpp:        y = ULongInt(*xa++) - borrow;
declarations/platform/double.cpp:    while (!*--xc)
declarations/platform/double.cpp:        wa--;
declarations/platform/double.cpp:    int k; // c -> k
declarations/platform/double.cpp:    if (a -> wds < b -> wds)
declarations/platform/double.cpp:    k = a -> k;
declarations/platform/double.cpp:    wa = a -> wds;
declarations/platform/double.cpp:    wb = b -> wds;
declarations/platform/double.cpp:    if (wc > a -> maxwds)
declarations/platform/double.cpp:    c.neg = a -> neg ^ b -> neg;
declarations/platform/double.cpp:    xa = a -> data;
declarations/platform/double.cpp:    xb = b -> data;
declarations/platform/double.cpp:    for (xc0 = c.data, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
declarations/platform/double.cpp:        k1 = 32 - op;
declarations/platform/double.cpp:    result.wds = n1 - 1;
declarations/platform/double.cpp:            p5 = bigfives[i] = new BigInt(*bigfives[i-1] * *bigfives[i-1]);
declarations/platform/double.cpp:    if (i -= j)
declarations/platform/double.cpp:        if (*--xa != *--xb)
declarations/platform/double.cpp:            return *xa < *xb ? -1 : 1;
declarations/platform/double.cpp:    sxe = sx + --n;
declarations/platform/double.cpp:            y = ULongInt(*bx) - ys.LowWord() - borrow;
declarations/platform/double.cpp:            while (--bxe > bx && !*bxe)
declarations/platform/double.cpp:                --n;
declarations/platform/double.cpp:            y = ULongInt(*bx) - ys.LowWord() - borrow;
declarations/platform/double.cpp:            while (--bxe > bx && !*bxe)
declarations/platform/double.cpp:                --n;
declarations/platform/double.cpp:    y = *--xa;
declarations/platform/double.cpp:        return IEEEfloat(0x3f800000 | y >> (8 - k));
declarations/platform/double.cpp:    z = xa > data ? *--xa : 0;
declarations/platform/double.cpp:    if (k -= 8)
declarations/platform/double.cpp:        return IEEEfloat(0x3f800000 | y << k | z >> (32 - k));
declarations/platform/double.cpp:    y = *--xa;
declarations/platform/double.cpp:        hi = 0x3ff00000 | y >> (11 - k);
declarations/platform/double.cpp:        w = xa > data ? *--xa : 0;
declarations/platform/double.cpp:        lo = y << (32 - 11 + k) | w >> (11 - k);
declarations/platform/double.cpp:    z = xa > data ? *--xa : 0;
declarations/platform/double.cpp:    if (k -= 11)
declarations/platform/double.cpp:        hi = 0x3ff00000 | y << k | z >> (32 - k);
declarations/platform/double.cpp:        y = xa > data ? *--xa : 0;
declarations/platform/double.cpp:        lo = z << k | y >> (32 - k);
declarations/platform/double.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/platform/double.h:    // compiler-supported IEEE operations.  If not, then this class
declarations/platform/double.h:        MAX_DIGITS = BIAS + FRACT_SIZE + 1 - MAX_DEC_EXP
declarations/platform/double.h:        NEG_ZERO = 0x80000000, // -0.0
declarations/platform/double.h:        NEG_INF = 0xFF800000, // -Inf
declarations/platform/double.h:        return ((value.word & EXP_BITS) >> FRACT_SIZE) - BIAS;
declarations/platform/double.h:    // fields, rather than generating a non-const every time.  However,
declarations/platform/double.h:    // Floating-point operations
declarations/platform/double.h:    inline IEEEfloat operator++() { return *this += 1; } // pre-increment
declarations/platform/double.h:    inline IEEEfloat operator++(int) // post-increment
declarations/platform/double.h:    IEEEfloat operator-() const;        // unary minus
declarations/platform/double.h:    inline IEEEfloat operator-(const IEEEfloat op) const // binary subtraction
declarations/platform/double.h:        return *this + (-op);
declarations/platform/double.h:    inline IEEEfloat& operator-=(const IEEEfloat op) // subtract and assign
declarations/platform/double.h:        return *this = *this - op;
declarations/platform/double.h:    inline IEEEfloat operator--() { return *this -= 1; } // pre-decrement
declarations/platform/double.h:    inline IEEEfloat operator--(int) // post-decrement
declarations/platform/double.h:        *this -= 1;
declarations/platform/double.h:    // Comparison operators.  Recall that NaN does not compare, and 0.0 == -0.0
declarations/platform/double.h:    bool operator<(const IEEEfloat) const; // less-than
declarations/platform/double.h:    bool operator>(const IEEEfloat) const; // greater-than
declarations/platform/double.h:    bool operator<=(const IEEEfloat) const; // less-than or equal
declarations/platform/double.h:    bool operator>=(const IEEEfloat) const; // greater-than or equal
declarations/platform/double.h:    //  * -0.0f and 0.0f are different, with positive 0 comparing as greater
declarations/platform/double.h:            : (IsZero() && op.IsZero()) ? op.Sign() - Sign()
declarations/platform/double.h:            : (*this < op) ? -1 : *this > op;
declarations/platform/double.h:    // compiler-supported IEEE operations.  If not, then this class
declarations/platform/double.h:        FRACT_SIZE_HI = FRACT_SIZE - 32, // mantissa bits in high word
declarations/platform/double.h:        MAX_DIGITS = BIAS + FRACT_SIZE + 1 - MAX_DEC_EXP
declarations/platform/double.h:        NEG_ZERO_HI = 0x80000000, // -0.0
declarations/platform/double.h:        NEG_INF_HI = 0xFFF00000, // -Inf
declarations/platform/double.h:        return ((HighWord() & EXP_BITS) >> (FRACT_SIZE_HI)) - BIAS;
declarations/platform/double.h:        return ((high & ABS_BITS) | ((low | -(i4) low) >> 31)) > EXP_BITS;
declarations/platform/double.h:    // fields, rather than generating a non-const every time, as in
declarations/platform/double.h:    // Floating-point operations
declarations/platform/double.h:    inline IEEEdouble operator++() { return *this += 1; } // pre-increment
declarations/platform/double.h:    inline IEEEdouble operator++(int) // post-increment
declarations/platform/double.h:    IEEEdouble operator-() const;         // unary minus
declarations/platform/double.h:    inline IEEEdouble operator-(const IEEEdouble op) const // binary subtract
declarations/platform/double.h:        return *this + (-op);
declarations/platform/double.h:    inline IEEEdouble& operator-=(const IEEEdouble op) // subtract and assign
declarations/platform/double.h:        return *this = *this - op;
declarations/platform/double.h:    inline IEEEdouble operator--() { return *this -= 1; } // pre-decrement
declarations/platform/double.h:    inline IEEEdouble operator--(int) // post-decrement
declarations/platform/double.h:        *this -= 1;
declarations/platform/double.h:    // Comparison operators.  Recall that NaN does not compare, and 0.0 == -0.0
declarations/platform/double.h:    bool operator<(const IEEEdouble) const; // less-than
declarations/platform/double.h:    bool operator>(const IEEEdouble) const; // greater-than
declarations/platform/double.h:    bool operator<=(const IEEEdouble) const; // less-than or equal
declarations/platform/double.h:    bool operator>=(const IEEEdouble) const; // greater-than or equal
declarations/platform/double.h:    //  * -0.0 and 0.0 are different, with positive 0 comparing as greater
declarations/platform/double.h:            : (IsZero() && op.IsZero()) ? op.Sign() - Sign()
declarations/platform/double.h:            : (*this < op) ? -1 : *this > op;
declarations/platform/double.h:    // return count of high-order 0's in x
declarations/platform/double.h:    // return count of low-order 0's in y, shift y so that
declarations/platform/double.h:    inline int hi0bits() const { assert(data); return hi0bits(data[wds - 1]); }
declarations/platform/double.h:    inline BigInt& operator++() { return *this += 1; } // pre-increment
declarations/platform/double.h:    BigInt operator-(const BigInt& op) const;
declarations/platform/double.h:    this -> k = k;
Binary file double.o matches
orchestration/dump.cpp:                FindColumn(comments[com].location - 1) + 1);
orchestration/dump.cpp:                    FindColumn(comments[com].location - 1) + 1);
Binary file dump.o matches
orchestration/error.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
orchestration/error.cpp:        if (lex_stream -> NumBadTokens() > 0)
orchestration/error.cpp:            lex_stream -> PrintMessages();
orchestration/error.cpp:        else if (lex_stream -> NumWarnTokens() > 0)
orchestration/error.cpp:            lex_stream -> PrintMessages();
orchestration/error.cpp:            compilation_unit -> BadCompilationUnitCast())
orchestration/error.cpp:    if (error && error -> error.Length() > 0 &&
orchestration/error.cpp:        error -> PrintMessages() > return_code)
orchestration/error.cpp:    // Not thread-safe, but jikes isn't threaded.
orchestration/error.cpp:    left_line_no = lex_stream -> Line(left_token);
orchestration/error.cpp:    left_column_no = lex_stream -> Column(left_token);
orchestration/error.cpp:    right_line_no = lex_stream -> Line(right_token);
orchestration/error.cpp:    right_column_no = lex_stream -> RightColumn(right_token);
orchestration/error.cpp:    return lex_stream -> FileName();
orchestration/error.cpp:    lex_stream -> OutputSource(this, s);
orchestration/error.cpp:      lex_stream(file_symbol -> lex_stream),
orchestration/error.cpp:    // Some warning severities are dependent on command-line options, and
orchestration/error.cpp:    // Don't report non-mandatory errors if we're in -nowarn mode.
orchestration/error.cpp:        lex_stream -> RereadInput();
orchestration/error.cpp:    // group can be named for command-line use.
orchestration/error.cpp:// 'name' is used on the command-line, and with 'reason' in
orchestration/error.cpp:// Jikes' -help output.
orchestration/error.cpp:// HOWTO: Add a +Pno-<something> flag to selectively enable/disable a warning.
orchestration/error.cpp:    group = new MessageGroup("modifier-order",
orchestration/error.cpp:    group -> AddMessage(RECOMMENDED_MODIFIER_ORDER);
orchestration/error.cpp:    group -> AddMessage(RECOMMENDED_ANNOTATION_ORDER);
orchestration/error.cpp:    group = new MessageGroup("redundant-modifiers",
orchestration/error.cpp:    group -> AddMessage(REDUNDANT_MODIFIER);
orchestration/error.cpp:    group -> AddMessage(BAD_SERIAL_VERSION_UID);
orchestration/error.cpp:    group -> AddMessage(EJ_SERIALIZABLE_INNER_CLASS);
orchestration/error.cpp:    group -> AddMessage(MISSING_SERIAL_VERSION_UID);
orchestration/error.cpp:    group -> AddMessage(UNNEEDED_SERIAL_VERSION_UID);
orchestration/error.cpp:    group -> AddMessage(HIDDEN_FIELD);
orchestration/error.cpp:    group -> AddMessage(LOCAL_SHADOWS_FIELD);
orchestration/error.cpp:    group -> AddMessage(SWITCH_FALLTHROUGH);
orchestration/error.cpp:    group = new MessageGroup("naming-convention",
orchestration/error.cpp:    group -> AddMessage(UNCONVENTIONAL_CLASS_NAME);
orchestration/error.cpp:    group -> AddMessage(UNCONVENTIONAL_CONSTANT_FIELD_NAME);
orchestration/error.cpp:    group -> AddMessage(UNCONVENTIONAL_FIELD_NAME);
orchestration/error.cpp:    group -> AddMessage(UNCONVENTIONAL_METHOD_NAME);
orchestration/error.cpp:    group -> AddMessage(UNCONVENTIONAL_VARIABLE_NAME);
orchestration/error.cpp:    group = new MessageGroup("effective-java",
orchestration/error.cpp:    group -> AddMessage(EJ_AVOID_OVERLOADING_EQUALS);
orchestration/error.cpp:    group -> AddMessage(EJ_EMPTY_CATCH_BLOCK);
orchestration/error.cpp:    group -> AddMessage(EJ_EMPTY_FINALLY_BLOCK);
orchestration/error.cpp:    group -> AddMessage(EJ_EQUALS_WITHOUT_HASH_CODE);
orchestration/error.cpp:    group -> AddMessage(EJ_HASH_CODE_WITHOUT_EQUALS);
orchestration/error.cpp:    group -> AddMessage(EJ_INTERFACE_DOES_NOT_DEFINE_TYPE);
orchestration/error.cpp:    group -> AddMessage(EJ_MISSING_PRIVATE_CONSTRUCTOR);
orchestration/error.cpp:    group -> AddMessage(EJ_OVERLY_GENERAL_THROWS_CLAUSE);
orchestration/error.cpp:    group -> AddMessage(EJ_PUBLIC_STATIC_FINAL_ARRAY_FIELD);
orchestration/error.cpp:    group -> AddMessage(EJ_RETURN_OF_NULL_ARRAY);
orchestration/error.cpp:    group = new MessageGroup("unused-type-imports",
orchestration/error.cpp:                             "unused single-type import statements",
orchestration/error.cpp:    group -> AddMessage(UNUSED_TYPE_IMPORT);
orchestration/error.cpp:    group = new MessageGroup("unused-package-imports",
orchestration/error.cpp:    group -> AddMessage(UNUSED_PACKAGE_IMPORT);
orchestration/error.cpp:// command-line. Called by the code that handles the -help option.
orchestration/error.cpp:        printf("+P[no-]%-*s", SPACE_FOR_NAME, group -> name);
orchestration/error.cpp:        if (strlen(group -> name) >= SPACE_FOR_NAME)
orchestration/error.cpp:        printf("warn about %s\n", group -> reason);
orchestration/error.cpp:        if (group -> level == NAMED_WEAK_ON ||
orchestration/error.cpp:            group -> level == NAMED_STRONG_ON)
orchestration/error.cpp:        assert(group -> level > DISABLED); // Is this a named warning?
orchestration/error.cpp:        for (unsigned c = 0; c < group -> codes.Length(); ++c)
orchestration/error.cpp:            SemanticErrorKind kind = group -> codes[c];
orchestration/error.cpp:                warning[kind] = group -> level;
orchestration/error.cpp:// Processes a command-line option enabling or disabling a warning.
orchestration/error.cpp:// Command-line options are of the form +P<name> or +Pno-<name> to
orchestration/error.cpp:// synonyms like -Xswitchcheck also use this method).
orchestration/error.cpp:    // Is this +P<name> or +Pno-<name>?
orchestration/error.cpp:    if (strncmp(image, "no-", 3) == 0)
orchestration/error.cpp:    // +P[no-]all turns everything on/off.
orchestration/error.cpp:        if (override || strcmp(group -> name, image) == 0)
orchestration/error.cpp:            for (unsigned c = 0; c < group -> codes.Length(); ++c)
orchestration/error.cpp:                SemanticErrorKind kind = group -> codes[c];
orchestration/error.cpp:                switch(group -> level)
orchestration/error.cpp:     histack[top] = error.Length() - 1;
orchestration/error.cpp:         top--;
orchestration/error.cpp:             // The array is most-likely almost sorted. Therefore,
orchestration/error.cpp:                 // Recall that its right-span location is reached
orchestration/error.cpp:             if ((i - lower) < (upper - i))
orchestration/error.cpp:                 upper = i - 1;
orchestration/error.cpp:                 histack[top] = i - 1;
orchestration/error.cpp:                    << (lex_stream -> file_symbol -> semantic ==
orchestration/error.cpp:                    << (lex_stream -> file_symbol -> semantic ==
orchestration/error.cpp:        if (lex_stream -> file_symbol -> semantic !=
orchestration/error.cpp:            Coutput << " compiling \"" << lex_stream -> FileName() << '\"';
orchestration/error.cpp:    if (lex_stream -> file_symbol -> semantic != control.system_semantic)
orchestration/error.cpp:        lex_stream -> RereadInput();
orchestration/error.cpp:        if (! lex_stream -> InputBuffer())
orchestration/error.cpp:            char *file_name = lex_stream -> FileName();
orchestration/error.cpp:            int length = lex_stream -> FileNameLength();
orchestration/error.cpp:            control.system_semantic ->
orchestration/error.cpp:    if (lex_stream -> file_symbol -> semantic == control.system_semantic ||
orchestration/error.cpp:        lex_stream -> InputBuffer())
orchestration/error.cpp:        lex_stream -> DestroyInput();
orchestration/error.cpp:    return insert[index - 1];
orchestration/error.cpp:        s << "                " << path_symbol -> Name() << endl;
orchestration/error.cpp:    int index = insert_char - '0';
orchestration/error.cpp:    int index = insert_char - '0';
orchestration/error.cpp:// If the given insert is non-NULL, writes " or this.<insert-text>" to the
orchestration/error.cpp:    int index = insert_char - '0';
orchestration/error.cpp:                s << err.getInsert(verb - '0');
orchestration/error.cpp:                s << lex_stream -> FileName();
orchestration/error.cpp:    JikesAPI::getInstance() -> reportError(&error[k]);
orchestration/error.cpp://       lex_stream -> FileName() as an insert.
orchestration/error.cpp://   %Qn Writes an optional this-qualified name. The name is written if
orchestration/error.cpp://       insert<n> is non-NULL, otherwise nothing is written. The text written
orchestration/error.cpp://       is of the form " or this.<insert-text>".
orchestration/error.cpp:        "A non-standard version of the type \"%T1\" "
orchestration/error.cpp:        "in your choice of -target. Either use \"-target 1.4\" or greater, or "
orchestration/error.cpp:        "use \"--noassert\" (or \"+a\") at the command line.";
orchestration/error.cpp:        "The shift count of %1 is >= the %2-bit width of the type.";
orchestration/error.cpp:        "because file names are case-insensitive in this system.";
orchestration/error.cpp:        "An overly-general throws clause obscures which exceptions may "
orchestration/error.cpp:        "Return a zero-length array instead of null. This avoids the need "
orchestration/error.cpp:        "for special-case code in the caller. "
orchestration/error.cpp:        "The default serialized form of an inner class is ill-defined; "
orchestration/error.cpp:        "in \"%T4\" has a different return type than the non-inherited "
orchestration/error.cpp:        "The left-hand side of an assignment must be a variable.";
orchestration/error.cpp:        "The type of the left sub-expression, \"%T1\", cannot possibly "
orchestration/error.cpp:        "The type of the right sub-expression, \"%T3\", is not "
orchestration/error.cpp:        "The type of the left sub-expression, \"%T1\", is not "
orchestration/error.cpp:        "compatible with the type of the right sub-expression, \"%T3\".";
orchestration/error.cpp:        "In the conditional, the type of the true sub-expression, "
orchestration/error.cpp:        "sub-expression, \"%T3\".";
orchestration/error.cpp:        "A byte value must be an integer value in the range -128..127.";
orchestration/error.cpp:        "A short value must be an integer value in the range -32768..32767.";
orchestration/error.cpp:        "range -2147483648..2147483647 or a hexadecimal or octal literal "
orchestration/error.cpp:        "-9223372036854775808L..9223372036854775807L or a hexadecimal or "
orchestration/error.cpp:    // JDK 1.5 (JLS3) feature-related errors.
orchestration/error.cpp:        "Hexadecimal floating point values are only supported for `-source "
orchestration/error.cpp:        "for `-source 1.5' or greater.";
orchestration/error.cpp:        "Variable-arity methods (also known as varargs) are only supported "
orchestration/error.cpp:        "for `-source 1.5' or greater."
orchestration/error.cpp:        "Static imports are only supported for `-source 1.5' or greater."
orchestration/error.cpp:        "Annotation modifiers are only supported for `-source 1.5' or "
orchestration/error.cpp:        "Annotation types are only supported for `-source 1.5' or greater."
orchestration/error.cpp:        "Enumeration types are only supported for `-source 1.5' or greater."
orchestration/error.cpp:        "use the \"enum\" keyword added in `-source 1.5'.";
orchestration/error.cpp:        "\"-source 1.5\" or greater. Compilation will continue using the raw "
orchestration/error.cpp:        "\"-source 1.5\" or greater. Compilation will continue, but will "
orchestration/error.cpp:        "Covariant return types require the use of \"-source 1.5\" or "
orchestration/error.cpp:        "Wildcard type parameters are not yet supported in \"-source 1.5\".";
orchestration/error.cpp:        "Explicit type arguments are not yet supported in \"-source 1.5\".";
orchestration/error.cpp:    // More type-related errors.
orchestration/error.cpp:        "not implemented in the non-abstract class \"%T4\".";
orchestration/error.cpp:        "\"%1\" is either a misplaced package name or a non-existent entity. "
orchestration/error.cpp:        "The declaration of the non-abstract and non-native method, \"%1\", "
orchestration/error.cpp:        "This catch block is unreachable because there is no non-null "
orchestration/error.cpp:        "represent a compile-time constant, but is enclosed in an inner "
orchestration/error.cpp:        "Invalid reference in inner class \"%T1\" to a non-final "
orchestration/error.cpp:        "non-static member type \"%T3\" of the enclosing type \"%T5\".";
declarations/jikes/error.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/jikes/error.h:// WARNING: It is not thread-safe - calling Array() in multiple threads may
declarations/jikes/error.h:    // The returned value is not thread-safe, and is only guaranteed valid
declarations/jikes/error.h:        // JDK 1.5 (JLS3) feature-related errors.
declarations/jikes/error.h:        // More type-related errors.
declarations/jikes/error.h:    void ExitingClone() { clone_count--; }
Binary file error.o matches
astGeneration/expr.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
astGeneration/expr.cpp:        semantic -> ReportSemError(SemanticError::CONSTANT_OVERFLOW, expr,
astGeneration/expr.cpp:                                   expr -> Type() -> Name());
astGeneration/expr.cpp:                x < zero && y < zero && x >= (min - y) ||
astGeneration/expr.cpp:                x > zero && y > zero && x <= (max - y);
astGeneration/expr.cpp:    CheckIntegerAddition(semantic, expr, x, T(-y));
astGeneration/expr.cpp:    const T minus_one = T(-1);
astGeneration/expr.cpp:                x < zero && y < zero && T(-x) <= max/-y ||
astGeneration/expr.cpp:    const T minus_one = T(-1);
astGeneration/expr.cpp:    if (! expr -> IsConstant() ||
astGeneration/expr.cpp:        ! control.IsSimpleIntegerValueType(expr -> Type()))
astGeneration/expr.cpp:    IntLiteralValue* literal = DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:        (type == control.char_type && (literal -> value >= 0) &&
astGeneration/expr.cpp:         (literal -> value <= 65535)) ||
astGeneration/expr.cpp:        (type == control.byte_type && (literal -> value >= -128) &&
astGeneration/expr.cpp:         (literal -> value <= 127)) ||
astGeneration/expr.cpp:        (type == control.short_type && (literal -> value >= -32768) &&
astGeneration/expr.cpp:         (literal -> value <= 32767));
astGeneration/expr.cpp:    return expr -> IsConstant() && expr -> Type() == control.boolean_type &&
astGeneration/expr.cpp:        DYNAMIC_CAST<IntLiteralValue*> (expr -> value) -> value;
astGeneration/expr.cpp:    return expr -> IsConstant() && expr -> Type() == control.boolean_type &&
astGeneration/expr.cpp:        ! DYNAMIC_CAST<IntLiteralValue*> (expr -> value) -> value;
astGeneration/expr.cpp://      if (! CanMethodInvocationConvert(target_method -> containing_type,
astGeneration/expr.cpp://                                       source_method -> containing_type))
astGeneration/expr.cpp:    for (int k = target_method -> NumFormalParameters() - 1; k >= 0; k--)
astGeneration/expr.cpp:        if (! CanMethodInvocationConvert(target_method -> FormalParameter(k) ->
astGeneration/expr.cpp:                                         source_method -> FormalParameter(k) ->
astGeneration/expr.cpp:                           maximally_specific_method[i] -> method_symbol))
astGeneration/expr.cpp:        if (MoreSpecific(maximally_specific_method[i] -> method_symbol, method))
astGeneration/expr.cpp:    unsigned num_arguments = args -> NumArguments();
astGeneration/expr.cpp:    int length = name -> NameLength();
astGeneration/expr.cpp:        TypeSymbol* arg_type = args -> Argument(i) -> Type();
astGeneration/expr.cpp:        length += arg_type -> ContainingPackage() -> PackageNameLength() +
astGeneration/expr.cpp:            arg_type -> ExternalNameLength() + 3;
astGeneration/expr.cpp:    for (s2 = name -> Name(); *s2; s2++)
astGeneration/expr.cpp:            TypeSymbol* arg_type = args -> Argument(i) -> Type();
astGeneration/expr.cpp:            PackageSymbol* package = arg_type -> ContainingPackage();
astGeneration/expr.cpp:            wchar_t* package_name = package -> PackageName();
astGeneration/expr.cpp:            if (package -> PackageNameLength() > 0 &&
astGeneration/expr.cpp:            for (s2 = arg_type -> ExternalName(); *s2; s2++)
astGeneration/expr.cpp:        s -= 2; // remove the last ',' and ' '
astGeneration/expr.cpp:// the same parameter count; an accessible field by the same name (for no-arg
astGeneration/expr.cpp:    AstExpression* base = method_call -> base_opt;
astGeneration/expr.cpp:    TokenIndex id_token = method_call -> identifier_token;
astGeneration/expr.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(id_token);
astGeneration/expr.cpp:    for (env = top_env -> previous; ! base && env; env = env -> previous)
astGeneration/expr.cpp:                           method_call, others[0] -> method_symbol -> Header(),
astGeneration/expr.cpp:                           others[0] -> method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           others[0] -> method_symbol -> containing_type -> ExternalName());
astGeneration/expr.cpp:         env = (base ? (SemanticEnvironment*) NULL : env -> previous))
astGeneration/expr.cpp:            type = env -> Type();
astGeneration/expr.cpp:        if (! type -> expanded_method_table)
astGeneration/expr.cpp:        for (method_shadow = type -> expanded_method_table ->
astGeneration/expr.cpp:             method_shadow; method_shadow = method_shadow -> next_method)
astGeneration/expr.cpp:            MethodSymbol* method = method_shadow -> method_symbol;
astGeneration/expr.cpp:            if (! method -> IsTyped())
astGeneration/expr.cpp:                method -> ProcessMethodSignature(this, id_token);
astGeneration/expr.cpp:                method_shadow -> NumConflicts() > 0)
astGeneration/expr.cpp:                int diff = method_call -> arguments -> NumArguments() -
astGeneration/expr.cpp:                    method -> NumFormalParameters();
astGeneration/expr.cpp:                    diff = - diff;
astGeneration/expr.cpp:            wchar_t* header = Header(name_symbol, method_call -> arguments);
astGeneration/expr.cpp:                           best_match -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           best_match -> containing_type -> ExternalName(),
astGeneration/expr.cpp:                           best_match -> Header());
astGeneration/expr.cpp:    // For a no-arg method, search for an accessible field of the same name.
astGeneration/expr.cpp:    if (method_call -> arguments -> NumArguments() == 0)
astGeneration/expr.cpp:             env = (base ? (SemanticEnvironment*) NULL : env -> previous))
astGeneration/expr.cpp:                type = env -> Type();
astGeneration/expr.cpp:            if (! type -> expanded_field_table)
astGeneration/expr.cpp:            VariableShadowSymbol* variable_shadow = type ->
astGeneration/expr.cpp:                expanded_field_table -> FindVariableShadowSymbol(name_symbol);
astGeneration/expr.cpp:                VariableSymbol* variable = variable_shadow -> variable_symbol;
astGeneration/expr.cpp:                        variable -> owner -> TypeCast();
astGeneration/expr.cpp:                                   method_call, variable -> Name(),
astGeneration/expr.cpp:                                   enclosing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                   enclosing_type -> ExternalName());
astGeneration/expr.cpp:         super_type; super_type = super_type -> super)
astGeneration/expr.cpp:        for (method_shadow = super_type -> expanded_method_table ->
astGeneration/expr.cpp:             method_shadow; method_shadow = method_shadow -> next_method)
astGeneration/expr.cpp:            MethodSymbol* method = method_shadow -> method_symbol;
astGeneration/expr.cpp:            if (! method -> IsTyped())
astGeneration/expr.cpp:                method -> ProcessMethodSignature(this, id_token);
astGeneration/expr.cpp:            if (method_call -> arguments -> NumArguments() ==
astGeneration/expr.cpp:                method -> NumFormalParameters())
astGeneration/expr.cpp:                     i < method_call -> arguments -> NumArguments(); i++)
astGeneration/expr.cpp:                        method_call -> arguments -> Argument(i);
astGeneration/expr.cpp:                    if (! CanMethodInvocationConvert(method -> FormalParameter(i) -> Type(),
astGeneration/expr.cpp:                                                     expr -> Type()))
astGeneration/expr.cpp:                if (i == method_call -> arguments -> NumArguments())
astGeneration/expr.cpp:                    if (base && method -> ACC_PROTECTED() &&
astGeneration/expr.cpp:                        base -> Type() -> ACC_INTERFACE())
astGeneration/expr.cpp:                        assert(method -> containing_type == control.Object());
astGeneration/expr.cpp:                                       method_call, method -> Header());
astGeneration/expr.cpp:                    else if (method -> ACC_PROTECTED() &&
astGeneration/expr.cpp:                             ! method -> ACC_STATIC() &&
astGeneration/expr.cpp:                             ThisType() -> HasProtectedAccessTo(method -> containing_type))
astGeneration/expr.cpp:                                       method_call, method -> Header(),
astGeneration/expr.cpp:                                       method -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                       method -> containing_type -> ExternalName(),
astGeneration/expr.cpp:                                       ThisType() -> ContainingPackageName(),
astGeneration/expr.cpp:                                       ThisType() -> ExternalName());
astGeneration/expr.cpp:                                       method_call, method -> Header(),
astGeneration/expr.cpp:                                       method -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                       method -> containing_type -> ExternalName(),
astGeneration/expr.cpp:                                       method -> AccessString());
astGeneration/expr.cpp:         env = (base ? (SemanticEnvironment*) NULL : env -> previous))
astGeneration/expr.cpp:            type = env -> Type();
astGeneration/expr.cpp:                           method_call, name_symbol -> Name(),
astGeneration/expr.cpp:                           type -> ContainingPackageName(),
astGeneration/expr.cpp:                           type -> ExternalName(), best_match -> Name());
astGeneration/expr.cpp:                       name_symbol -> Name());
astGeneration/expr.cpp:        wchar_t* header = Header(name_symbol, method_call -> arguments);
astGeneration/expr.cpp:                       header, type -> ContainingPackageName(),
astGeneration/expr.cpp:                       type -> ExternalName());
astGeneration/expr.cpp:        ast -> ClassCreationExpressionCast();
astGeneration/expr.cpp:    AstSuperCall* super_call = ast -> SuperCallCast();
astGeneration/expr.cpp:        args = class_creation -> arguments;
astGeneration/expr.cpp:        left_tok = class_creation -> new_token;
astGeneration/expr.cpp:        if (class_creation -> class_body_opt)
astGeneration/expr.cpp:        args = super_call -> arguments;
astGeneration/expr.cpp:        left_tok = super_call -> super_token;
astGeneration/expr.cpp:        AstThisCall* this_call = ast -> ThisCallCast();
astGeneration/expr.cpp:        args = this_call -> arguments;
astGeneration/expr.cpp:        left_tok = this_call -> this_token;
astGeneration/expr.cpp:    unsigned num_arguments = args -> NumArguments();
astGeneration/expr.cpp:    TokenIndex right_tok = args -> right_parenthesis_token;
astGeneration/expr.cpp:    for (ctor = type -> FindMethodSymbol(control.init_name_symbol);
astGeneration/expr.cpp:         ctor; ctor = ctor -> next_method)
astGeneration/expr.cpp:            int diff = num_arguments - ctor -> NumFormalParameters();
astGeneration/expr.cpp:                diff = - diff;
astGeneration/expr.cpp:        wchar_t* header = Header(type -> Identity(), args);
astGeneration/expr.cpp:                       header, type -> ContainingPackageName(),
astGeneration/expr.cpp:                       type -> ExternalName(), best_match -> Header());
astGeneration/expr.cpp:    for (ctor = type -> FindMethodSymbol(control.init_name_symbol);
astGeneration/expr.cpp:         ctor; ctor = ctor -> next_method)
astGeneration/expr.cpp:        if (num_arguments == ctor -> NumFormalParameters())
astGeneration/expr.cpp:                AstExpression* expr = args -> Argument(i);
astGeneration/expr.cpp:                if (! CanMethodInvocationConvert(ctor -> FormalParameter(i) -> Type(),
astGeneration/expr.cpp:                                                 expr -> Type()))
astGeneration/expr.cpp:                               ctor -> Header(),
astGeneration/expr.cpp:                               type -> ContainingPackageName(),
astGeneration/expr.cpp:                               type -> ExternalName(), ctor -> AccessString());
astGeneration/expr.cpp:    for (method = type -> FindMethodSymbol(type -> Identity());
astGeneration/expr.cpp:         method; method = method -> next_method)
astGeneration/expr.cpp:        if (! method -> IsTyped())
astGeneration/expr.cpp:            method -> ProcessMethodSignature(this, right_tok);
astGeneration/expr.cpp:        if (num_arguments == method -> NumFormalParameters())
astGeneration/expr.cpp:                if (! CanMethodInvocationConvert(method -> FormalParameter(i) -> Type(),
astGeneration/expr.cpp:                                                 args -> Argument(i) -> Type()))
astGeneration/expr.cpp:        if (method -> declaration)
astGeneration/expr.cpp:                (AstMethodDeclaration*) method -> declaration;
astGeneration/expr.cpp:            FileLocation loc((method -> containing_type ->
astGeneration/expr.cpp:                              semantic_environment -> sem -> lex_stream),
astGeneration/expr.cpp:                             (method_declaration -> method_declarator ->
astGeneration/expr.cpp:                           left_tok, right_tok, type -> Name(),
astGeneration/expr.cpp:                           left_tok, right_tok, type -> Name(),
astGeneration/expr.cpp:                           method -> containing_type -> file_location -> location);
astGeneration/expr.cpp:    wchar_t* header = Header(type -> Identity(), args);
astGeneration/expr.cpp:                   type -> ContainingPackageName(), type -> ExternalName());
astGeneration/expr.cpp:    if (containing_type -> Anonymous())
astGeneration/expr.cpp:        return containing_type -> declaration -> default_constructor ->
astGeneration/expr.cpp:        ast -> ClassCreationExpressionCast();
astGeneration/expr.cpp:    AstSuperCall* super_call = ast -> SuperCallCast();
astGeneration/expr.cpp:        args = class_creation -> arguments;
astGeneration/expr.cpp:        if (class_creation -> class_body_opt)
astGeneration/expr.cpp:        args = super_call -> arguments;
astGeneration/expr.cpp:        AstThisCall* this_call = ast -> ThisCallCast();
astGeneration/expr.cpp:        args = this_call -> arguments;
astGeneration/expr.cpp:    unsigned num_arguments = args -> NumArguments();
astGeneration/expr.cpp:    assert(containing_type -> ConstructorMembersProcessed());
astGeneration/expr.cpp:    for (ctor = containing_type -> FindMethodSymbol(control.init_name_symbol);
astGeneration/expr.cpp:         ctor; ctor = ctor -> next_method)
astGeneration/expr.cpp:        if (! ctor -> IsTyped())
astGeneration/expr.cpp:            ctor -> ProcessMethodSignature(this, right_tok);
astGeneration/expr.cpp:        if (num_arguments == ctor -> NumFormalParameters() &&
astGeneration/expr.cpp:                if (! CanMethodInvocationConvert(ctor -> FormalParameter(i) -> Type(),
astGeneration/expr.cpp:                                                 args -> Argument(i) -> Type()))
astGeneration/expr.cpp:        if (! containing_type -> Bad() || NumErrors() == 0)
astGeneration/expr.cpp:                       left_tok, right_tok, containing_type -> Name(),
astGeneration/expr.cpp:                       constructor_set[0] -> Header(),
astGeneration/expr.cpp:                       constructor_set[1] -> Header());
astGeneration/expr.cpp:    if (ctor -> ACC_SYNTHETIC())
astGeneration/expr.cpp:                       left_tok, right_tok, ctor -> Header(),
astGeneration/expr.cpp:                       containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       containing_type -> ExternalName());
astGeneration/expr.cpp:    ctor -> ProcessMethodThrows(this, right_tok);
astGeneration/expr.cpp:    if (control.option.deprecation && ctor -> IsDeprecated() &&
astGeneration/expr.cpp:                       left_tok, right_tok, ctor -> Header(),
astGeneration/expr.cpp:                       ctor -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       ctor -> containing_type -> ExternalName());
astGeneration/expr.cpp:    AstFieldAccess* field_access = expr -> FieldAccessCast();
astGeneration/expr.cpp:    AstName* field_name = expr -> NameCast();
astGeneration/expr.cpp:        field_name ? field_name -> base_opt : field_access -> base;
astGeneration/expr.cpp:    TokenIndex identifier_token = expr -> RightToken();
astGeneration/expr.cpp:    const wchar_t* name = lex_stream -> NameString(identifier_token);
astGeneration/expr.cpp:         k < type -> expanded_field_table -> symbol_pool.Length(); k++)
astGeneration/expr.cpp:            type -> expanded_field_table -> symbol_pool[k];
astGeneration/expr.cpp:        VariableSymbol* variable = variable_shadow -> variable_symbol;
astGeneration/expr.cpp:        if (! variable -> IsTyped())
astGeneration/expr.cpp:            variable -> ProcessVariableSignature(this, identifier_token);
astGeneration/expr.cpp:             ! variable && i < variable_shadow -> NumConflicts(); i++)
astGeneration/expr.cpp:            variable = variable_shadow -> Conflict(i);
astGeneration/expr.cpp:            if (! variable -> IsTyped())
astGeneration/expr.cpp:                variable -> ProcessVariableSignature(this,
astGeneration/expr.cpp:            int new_index = Spell::Index(name, variable -> Name());
astGeneration/expr.cpp:    AstExpression* base = method_call -> base_opt;
astGeneration/expr.cpp:    TokenIndex identifier_token = method_call -> identifier_token;
astGeneration/expr.cpp:         k < type -> expanded_method_table -> symbol_pool.Length(); k++)
astGeneration/expr.cpp:            type -> expanded_method_table -> symbol_pool[k];
astGeneration/expr.cpp:        MethodSymbol* method = method_shadow -> method_symbol;
astGeneration/expr.cpp:        if (! method -> IsTyped())
astGeneration/expr.cpp:            method -> ProcessMethodSignature(this, identifier_token);
astGeneration/expr.cpp:        if ((method_call -> arguments -> NumArguments() ==
astGeneration/expr.cpp:             method -> NumFormalParameters()) &&
astGeneration/expr.cpp:             method_shadow -> NumConflicts() > 0))
astGeneration/expr.cpp:            for (i = 0; i < method_call -> arguments -> NumArguments(); i++)
astGeneration/expr.cpp:                AstExpression* expr = method_call -> arguments -> Argument(i);
astGeneration/expr.cpp:                if (! CanMethodInvocationConvert(method -> FormalParameter(i) -> Type(),
astGeneration/expr.cpp:                                                 expr -> Type()))
astGeneration/expr.cpp:            if (i == method_call -> arguments -> NumArguments())
astGeneration/expr.cpp:                int new_index = Spell::Index(name_symbol -> Name(),
astGeneration/expr.cpp:                                             method -> Name());
astGeneration/expr.cpp:    int length = name_symbol -> NameLength();
astGeneration/expr.cpp:    int num_args = method_call -> arguments -> NumArguments();
astGeneration/expr.cpp:    AstExpression* base = method_call -> base_opt;
astGeneration/expr.cpp:    TokenIndex id_token = method_call -> identifier_token;
astGeneration/expr.cpp:        name_symbol = lex_stream -> NameSymbol(id_token);
astGeneration/expr.cpp:    if (! type -> expanded_method_table)
astGeneration/expr.cpp:    for (MethodShadowSymbol* method_shadow = type -> expanded_method_table ->
astGeneration/expr.cpp:         method_shadow; method_shadow = method_shadow -> next_method)
astGeneration/expr.cpp:        MethodSymbol* method = method_shadow -> method_symbol;
astGeneration/expr.cpp:        if (! method -> IsTyped())
astGeneration/expr.cpp:            method -> ProcessMethodSignature(this, id_token);
astGeneration/expr.cpp:        if ((method_call -> arguments -> NumArguments() ==
astGeneration/expr.cpp:             method -> NumFormalParameters()) &&
astGeneration/expr.cpp:             method_shadow -> NumConflicts() > 0))
astGeneration/expr.cpp:            for (i = 0; i < method_call -> arguments -> NumArguments(); i++)
astGeneration/expr.cpp:                AstExpression* expr = method_call -> arguments -> Argument(i);
astGeneration/expr.cpp:                if (! CanMethodInvocationConvert(method -> FormalParameter(i) -> Type(),
astGeneration/expr.cpp:                                                 expr -> Type()))
astGeneration/expr.cpp:            if (i == method_call -> arguments -> NumArguments())
astGeneration/expr.cpp:                       method_call, name_symbol -> Name(),
astGeneration/expr.cpp:                       method_set[0] -> method_symbol -> Header(),
astGeneration/expr.cpp:                       method_set[0] -> method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       method_set[0] -> method_symbol -> containing_type -> ExternalName(),
astGeneration/expr.cpp:                       method_set[1] -> method_symbol -> Header(),
astGeneration/expr.cpp:                       method_set[1] -> method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       method_set[1] -> method_symbol -> containing_type -> ExternalName());
astGeneration/expr.cpp:    MethodSymbol* method = method_set[0] -> method_symbol;
astGeneration/expr.cpp:    if (method -> ACC_SYNTHETIC())
astGeneration/expr.cpp:                       method_call, method -> Header(),
astGeneration/expr.cpp:                       method -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       method -> containing_type -> ExternalName());
astGeneration/expr.cpp:    method -> ProcessMethodThrows(this, id_token);
astGeneration/expr.cpp:    if (control.option.deprecation && method -> IsDeprecated() &&
astGeneration/expr.cpp:                       method -> Header(),
astGeneration/expr.cpp:                       method -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       method -> containing_type -> ExternalName());
astGeneration/expr.cpp:    assert(! method_call -> base_opt);
astGeneration/expr.cpp:    TokenIndex id_token = method_call -> identifier_token;
astGeneration/expr.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(id_token);
astGeneration/expr.cpp:    for (SemanticEnvironment* env = envstack; env; env = env -> previous)
astGeneration/expr.cpp:        TypeSymbol* type = env -> Type();
astGeneration/expr.cpp:        if (! type -> expanded_method_table)
astGeneration/expr.cpp:        MethodShadowSymbol* method_shadow = type -> expanded_method_table ->
astGeneration/expr.cpp:                  method_shadow = method_shadow -> next_method)
astGeneration/expr.cpp:                MethodSymbol* method = method_shadow -> method_symbol;
astGeneration/expr.cpp:                if (! method -> IsTyped())
astGeneration/expr.cpp:                    method -> ProcessMethodSignature(this, id_token);
astGeneration/expr.cpp:                // Since type -> IsOwner(this_type()), i.e., type encloses
astGeneration/expr.cpp:                if (method_call -> arguments -> NumArguments() ==
astGeneration/expr.cpp:                    method -> NumFormalParameters())
astGeneration/expr.cpp:                    for (i = 0; i < method_call -> arguments -> NumArguments(); i++)
astGeneration/expr.cpp:                        AstExpression* expr = method_call -> arguments -> Argument(i);
astGeneration/expr.cpp:                        if (! CanMethodInvocationConvert(method -> FormalParameter(i) -> Type(),
astGeneration/expr.cpp:                                                         expr -> Type()))
astGeneration/expr.cpp:                    if (i == method_call -> arguments -> NumArguments())
astGeneration/expr.cpp:    MethodSymbol* method_symbol =  methods_found[0] -> method_symbol;
astGeneration/expr.cpp:                       method_call, method_symbol -> Name(),
astGeneration/expr.cpp:                       methods_found[0] -> method_symbol -> Header(),
astGeneration/expr.cpp:                       method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       method_symbol -> containing_type -> ExternalName(),
astGeneration/expr.cpp:                       methods_found[i] -> method_symbol -> Header(),
astGeneration/expr.cpp:                       methods_found[i] -> method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       methods_found[i] -> method_symbol -> containing_type -> ExternalName());
astGeneration/expr.cpp:    if (method_symbol -> containing_type != where_found -> Type())
astGeneration/expr.cpp:        if (method_symbol -> ACC_SYNTHETIC())
astGeneration/expr.cpp:                           method_call, method_symbol -> Header(),
astGeneration/expr.cpp:                           method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           method_symbol -> containing_type -> ExternalName());
astGeneration/expr.cpp:            SemanticEnvironment* previous_env = where_found -> previous;
astGeneration/expr.cpp:                where_found -> Type() != found_other -> Type())
astGeneration/expr.cpp:                    if (others[i] -> method_symbol != method_symbol &&
astGeneration/expr.cpp:                        (others[i] -> method_symbol -> containing_type ==
astGeneration/expr.cpp:                         found_other -> Type()))
astGeneration/expr.cpp:                                       method_symbol -> Name(),
astGeneration/expr.cpp:                                       method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                       method_symbol -> containing_type -> ExternalName(),
astGeneration/expr.cpp:                                       found_other -> Type() -> ContainingPackageName(),
astGeneration/expr.cpp:                                       found_other -> Type() -> ExternalName());
astGeneration/expr.cpp:    method_symbol -> ProcessMethodThrows(this,
astGeneration/expr.cpp:                                         method_call -> identifier_token);
astGeneration/expr.cpp:    if (control.option.deprecation && method_symbol -> IsDeprecated() &&
astGeneration/expr.cpp:                       method_call, method_symbol -> Header(),
astGeneration/expr.cpp:                       method_symbol -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       method_symbol -> containing_type -> ExternalName());
astGeneration/expr.cpp:    AstFieldAccess* field_access = expr -> FieldAccessCast();
astGeneration/expr.cpp:    AstName* name = expr -> NameCast();
astGeneration/expr.cpp:    AstExpression* base = name ? name -> base_opt : field_access -> base;
astGeneration/expr.cpp:        name_symbol = lex_stream -> NameSymbol(expr -> RightToken());
astGeneration/expr.cpp:    if (! type -> expanded_field_table)
astGeneration/expr.cpp:        ComputeFieldsClosure(type, expr -> RightToken());
astGeneration/expr.cpp:        type -> expanded_field_table -> FindVariableShadowSymbol(name_symbol);
astGeneration/expr.cpp:        variable = variable_shadow -> variable_symbol;
astGeneration/expr.cpp:        if (! variable -> IsTyped())
astGeneration/expr.cpp:            variable -> ProcessVariableSignature(this, expr -> RightToken());
astGeneration/expr.cpp:        for (unsigned i = 0; i < variable_shadow -> NumConflicts(); i++)
astGeneration/expr.cpp:            variable = variable_shadow -> Conflict(i);
astGeneration/expr.cpp:            if (! variable -> IsTyped())
astGeneration/expr.cpp:                variable -> ProcessVariableSignature(this,
astGeneration/expr.cpp:                                                     expr -> RightToken());
astGeneration/expr.cpp:                       name_symbol -> Name(),
astGeneration/expr.cpp:                       variable_set[0] -> ContainingType() -> ContainingPackageName(),
astGeneration/expr.cpp:                       variable_set[0] -> ContainingType() -> ExternalName(),
astGeneration/expr.cpp:                       variable_set[1] -> ContainingType() -> ContainingPackageName(),
astGeneration/expr.cpp:                       variable_set[1] -> ContainingType() -> ExternalName());
astGeneration/expr.cpp:    if (variable -> ACC_SYNTHETIC())
astGeneration/expr.cpp:                       variable -> Name(),
astGeneration/expr.cpp:                       variable -> ContainingType() -> ContainingPackageName(),
astGeneration/expr.cpp:                       variable -> ContainingType() -> ExternalName());
astGeneration/expr.cpp:    if (control.option.deprecation && variable -> IsDeprecated() &&
astGeneration/expr.cpp:                       variable -> Name(),
astGeneration/expr.cpp:                       variable -> ContainingType() -> ContainingPackageName(),
astGeneration/expr.cpp:                       variable -> ContainingType() -> ExternalName());
astGeneration/expr.cpp:// AstFieldAccess or AstSimpleName. This checks in order: an accessible no-arg
astGeneration/expr.cpp:    TokenIndex id_token = access -> RightToken();
astGeneration/expr.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(id_token);
astGeneration/expr.cpp:    if (! type -> expanded_field_table)
astGeneration/expr.cpp:    if (! type -> expanded_method_table)
astGeneration/expr.cpp:    // Search for an accessible no-arg method of the same name.
astGeneration/expr.cpp:    for (method_shadow = type -> expanded_method_table ->
astGeneration/expr.cpp:         method_shadow; method_shadow = method_shadow -> next_method)
astGeneration/expr.cpp:        MethodSymbol* method = method_shadow -> method_symbol;
astGeneration/expr.cpp:        if (! method -> IsTyped())
astGeneration/expr.cpp:            method -> ProcessMethodSignature(this, id_token);
astGeneration/expr.cpp:        if (method -> NumFormalParameters() == 0 &&
astGeneration/expr.cpp:                           id_token, name_symbol -> Name(),
astGeneration/expr.cpp:                           method -> containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           method -> containing_type -> ExternalName());
astGeneration/expr.cpp:         super_type; super_type = super_type -> super)
astGeneration/expr.cpp:        variable_shadow = super_type -> expanded_field_table ->
astGeneration/expr.cpp:            VariableSymbol* variable = variable_shadow -> variable_symbol;
astGeneration/expr.cpp:            TypeSymbol* containing_type = variable -> owner -> TypeCast();
astGeneration/expr.cpp:            if (variable -> ACC_PROTECTED() &&
astGeneration/expr.cpp:                ! variable -> ACC_STATIC() &&
astGeneration/expr.cpp:                ThisType() -> HasProtectedAccessTo(containing_type))
astGeneration/expr.cpp:                               id_token, name_symbol -> Name(),
astGeneration/expr.cpp:                               containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               containing_type -> ExternalName(),
astGeneration/expr.cpp:                               ThisType() -> ContainingPackageName(),
astGeneration/expr.cpp:                               ThisType() -> ExternalName());
astGeneration/expr.cpp:                               id_token, name_symbol -> Name(),
astGeneration/expr.cpp:                               containing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               containing_type -> ExternalName(),
astGeneration/expr.cpp:                               variable -> AccessString());
astGeneration/expr.cpp:    AstName* ast_name = access -> NameCast();
astGeneration/expr.cpp:    TypeSymbol* inaccessible_type = (! ast_name || ast_name -> base_opt)
astGeneration/expr.cpp:                       id_token, name_symbol -> Name(),
astGeneration/expr.cpp:                       type -> ContainingPackageName(),
astGeneration/expr.cpp:                       type -> ExternalName(),
astGeneration/expr.cpp:                       variable -> Name());
astGeneration/expr.cpp:                       id_token, name_symbol -> Name());
astGeneration/expr.cpp:    else if (access -> symbol && access -> symbol -> PackageCast())
astGeneration/expr.cpp:                       access, name_symbol -> Name());
astGeneration/expr.cpp:                       id_token, name_symbol -> Name(),
astGeneration/expr.cpp:                       type -> ContainingPackageName(),
astGeneration/expr.cpp:                       type -> ExternalName());
astGeneration/expr.cpp:    for (SemanticEnvironment* env = envstack; env; env = env -> previous)
astGeneration/expr.cpp:            env -> symbol_table.FindVariableSymbol(name_symbol);
astGeneration/expr.cpp:        TypeSymbol* type = env -> Type();
astGeneration/expr.cpp:        if (! type -> expanded_field_table)
astGeneration/expr.cpp:        VariableShadowSymbol* variable_shadow = type ->
astGeneration/expr.cpp:            expanded_field_table -> FindVariableShadowSymbol(name_symbol);
astGeneration/expr.cpp:            // Since type -> IsOwner(this_type()), i.e., type encloses
astGeneration/expr.cpp:            variables_found.Next() = variable_shadow -> variable_symbol;
astGeneration/expr.cpp:            for (unsigned i = 0; i < variable_shadow -> NumConflicts(); i++)
astGeneration/expr.cpp:                variables_found.Next() = variable_shadow -> Conflict(i);
astGeneration/expr.cpp:    NameSymbol* name_symbol = lex_stream -> NameSymbol(identifier_token);
astGeneration/expr.cpp:        if (variable_symbol -> IsLocal()) // a local variable
astGeneration/expr.cpp:                TypeSymbol* type = envstack -> Type();
astGeneration/expr.cpp:                if (! variable_symbol -> ACC_FINAL())
astGeneration/expr.cpp:                        variable_symbol -> owner -> MethodCast();
astGeneration/expr.cpp:                    // if (method -> Identity() != control.init_symbol &&
astGeneration/expr.cpp:                    //     method -> Identity() != control.block_init_symbol &&
astGeneration/expr.cpp:                    //     method -> Identity() != control.clinit_symbol)
astGeneration/expr.cpp:                                   type -> ContainingPackageName(),
astGeneration/expr.cpp:                                   type -> ExternalName(),
astGeneration/expr.cpp:                                   lex_stream -> NameString(identifier_token),
astGeneration/expr.cpp:                                   method -> ExternalName());
astGeneration/expr.cpp:                else if (! variable_symbol -> initial_value)
astGeneration/expr.cpp:                                                        envstack -> Type());
astGeneration/expr.cpp:                        variable_symbol -> ContainingType();
astGeneration/expr.cpp:                    where_found = shadow_owner -> semantic_environment;
astGeneration/expr.cpp:        else if (variable_symbol -> owner != where_found -> Type())
astGeneration/expr.cpp:            TypeSymbol* type = (TypeSymbol*) variable_symbol -> owner;
astGeneration/expr.cpp:            if (variable_symbol -> ACC_SYNTHETIC())
astGeneration/expr.cpp:                               variable_symbol -> Name(),
astGeneration/expr.cpp:                               type -> ContainingPackageName(),
astGeneration/expr.cpp:                               type -> ExternalName());
astGeneration/expr.cpp:                SemanticEnvironment* previous_env = where_found -> previous;
astGeneration/expr.cpp:                    where_found -> Type() != found_other -> Type())
astGeneration/expr.cpp:                                others[i] -> owner -> MethodCast();
astGeneration/expr.cpp:                                               lex_stream -> NameString(identifier_token),
astGeneration/expr.cpp:                                               type -> ContainingPackageName(),
astGeneration/expr.cpp:                                               type -> ExternalName(),
astGeneration/expr.cpp:                                               method -> Name());
astGeneration/expr.cpp:                            else if (others[i] -> owner == found_other -> Type())
astGeneration/expr.cpp:                                               lex_stream -> NameString(identifier_token),
astGeneration/expr.cpp:                                               type -> ContainingPackageName(),
astGeneration/expr.cpp:                                               type -> ExternalName(),
astGeneration/expr.cpp:                                               found_other -> Type() -> ContainingPackageName(),
astGeneration/expr.cpp:                                               found_other -> Type() -> ExternalName());
astGeneration/expr.cpp:                       variable_symbol -> Name(),
astGeneration/expr.cpp:                       variable_symbol -> ContainingType() -> ContainingPackageName(),
astGeneration/expr.cpp:                       variable_symbol -> ContainingType() -> ExternalName(),
astGeneration/expr.cpp:                       variables_found[i] -> ContainingType() -> ContainingPackageName(),
astGeneration/expr.cpp:                       variables_found[i] -> ContainingType() -> ExternalName());
astGeneration/expr.cpp:        if (control.option.deprecation && variable_symbol -> IsDeprecated() &&
astGeneration/expr.cpp:                           variable_symbol -> Name(),
astGeneration/expr.cpp:                           variable_symbol -> ContainingType() -> ContainingPackageName(),
astGeneration/expr.cpp:                           variable_symbol -> ContainingType() -> ExternalName());
astGeneration/expr.cpp:        if (! variable_symbol -> IsTyped())
astGeneration/expr.cpp:            variable_symbol -> ProcessVariableSignature(this, identifier_token);
astGeneration/expr.cpp:    while (local -> accessed_local)
astGeneration/expr.cpp:        local = local -> accessed_local;
astGeneration/expr.cpp:    assert(local -> IsLocal());
astGeneration/expr.cpp:    TypeSymbol* containing_type = local -> ContainingType();
astGeneration/expr.cpp:    while (type && type -> ContainingType() != containing_type)
astGeneration/expr.cpp:        if (! type -> EnclosingType())
astGeneration/expr.cpp:            assert(type -> Anonymous());
astGeneration/expr.cpp:        type = type -> ContainingType();
astGeneration/expr.cpp:    assert(type && type -> IsLocal());
astGeneration/expr.cpp:    return type -> FindOrInsertLocalShadow(local);
astGeneration/expr.cpp:    TypeSymbol* base_type = base -> Type();
astGeneration/expr.cpp:           base_type -> HasEnclosingInstance(environment_type, exact));
astGeneration/expr.cpp:    VariableSymbol* this0 = base_type -> EnclosingInstance();
astGeneration/expr.cpp:        // available through additional constructor parameters) - JLS 8.8.5.1
astGeneration/expr.cpp:        assert(base_type -> Anonymous() && base_type -> IsLocal());
astGeneration/expr.cpp:    TokenIndex tok = base -> RightToken();
astGeneration/expr.cpp:        compilation_unit -> ast_pool -> GenFieldAccess();
astGeneration/expr.cpp:    field_access -> base = base;
astGeneration/expr.cpp:    field_access -> identifier_token = tok;
astGeneration/expr.cpp:    field_access -> symbol = this0;
astGeneration/expr.cpp:    if (exact ? (this0 -> Type() == environment_type)
astGeneration/expr.cpp:        : (this0 -> Type() -> IsSubclass(environment_type)))
astGeneration/expr.cpp:    AstName* variable = source -> NameCast();
astGeneration/expr.cpp:    AstMethodInvocation* method = source -> MethodInvocationCast();
astGeneration/expr.cpp:    AstSuperCall* super_call = source -> SuperCallCast();
astGeneration/expr.cpp:    AstThisExpression* this_expr = source -> ThisExpressionCast();
astGeneration/expr.cpp:    AstSuperExpression* super_expr = source -> SuperExpressionCast();
astGeneration/expr.cpp:        source -> ClassCreationExpressionCast();
astGeneration/expr.cpp:        assert(! variable -> base_opt);
astGeneration/expr.cpp:        left_tok = right_tok = variable -> identifier_token;
astGeneration/expr.cpp:        if (this_type -> IsSubclass(environment_type))
astGeneration/expr.cpp:        assert(! method -> base_opt);
astGeneration/expr.cpp:        left_tok = right_tok = method -> identifier_token;
astGeneration/expr.cpp:        if (this_type -> IsSubclass(environment_type))
astGeneration/expr.cpp:        left_tok = right_tok = class_creation -> new_token;
astGeneration/expr.cpp:        left_tok = right_tok = super_call -> super_token;
astGeneration/expr.cpp:        assert(this_expr -> base_opt);
astGeneration/expr.cpp:        left_tok = this_expr -> LeftToken();
astGeneration/expr.cpp:        right_tok = this_expr -> this_token;
astGeneration/expr.cpp:        assert(super_expr -> base_opt);
astGeneration/expr.cpp:        left_tok = super_expr -> LeftToken();
astGeneration/expr.cpp:        right_tok = super_expr -> super_token;
astGeneration/expr.cpp:    if (! this_type -> HasEnclosingInstance(environment_type, exact))
astGeneration/expr.cpp:                        this_type -> IsSubclass(environment_type)
astGeneration/expr.cpp:                       environment_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       environment_type -> ExternalName());
astGeneration/expr.cpp:        resolution = compilation_unit -> ast_pool -> GenName(left_tok);
astGeneration/expr.cpp:        resolution -> symbol = control.no_type;
astGeneration/expr.cpp:            resolution = compilation_unit -> ast_pool -> GenName(left_tok);
astGeneration/expr.cpp:            resolution -> symbol = variable;
astGeneration/expr.cpp:                compilation_unit -> ast_pool -> GenThisExpression(left_tok);
astGeneration/expr.cpp:            resolution -> symbol = this_type;
astGeneration/expr.cpp:        TypeSymbol* resolved_type = resolution -> Type();
astGeneration/expr.cpp:            (! resolved_type -> IsSubclass(environment_type) || exact))
astGeneration/expr.cpp:                               environment_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               environment_type -> ExternalName());
astGeneration/expr.cpp:                resolution -> symbol = control.no_type;
astGeneration/expr.cpp:        environment_type = environment_type -> super;
astGeneration/expr.cpp:    assert(! name -> base_opt);
astGeneration/expr.cpp:    VariableSymbol* variable = (VariableSymbol*) name -> symbol;
astGeneration/expr.cpp:    assert(variable -> owner -> TypeCast());
astGeneration/expr.cpp:    if (variable -> ACC_STATIC())
astGeneration/expr.cpp:        access_expression = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:            GenName(name -> identifier_token);
astGeneration/expr.cpp:        access_expression -> symbol = environment_type;
astGeneration/expr.cpp:        AstThisExpression* this_expr = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:            GenThisExpression(name -> identifier_token);
astGeneration/expr.cpp:        this_expr -> resolution_opt =
astGeneration/expr.cpp:        this_expr -> symbol = this_expr -> resolution_opt -> symbol;
astGeneration/expr.cpp:    if (access_expression -> symbol != control.no_type)
astGeneration/expr.cpp:        TypeSymbol* containing_type = variable -> ContainingType();
astGeneration/expr.cpp:        if (variable -> ACC_PRIVATE() ||
astGeneration/expr.cpp:            (variable -> ACC_PROTECTED() &&
astGeneration/expr.cpp:            assert((variable -> ACC_PRIVATE() &&
astGeneration/expr.cpp:                   (variable -> ACC_PROTECTED() &&
astGeneration/expr.cpp:                    environment_type -> IsSubclass(containing_type)));
astGeneration/expr.cpp:            TokenIndex loc = name -> identifier_token;
astGeneration/expr.cpp:                compilation_unit -> ast_pool -> GenArguments(loc, loc);
astGeneration/expr.cpp:            if (! variable -> ACC_STATIC())
astGeneration/expr.cpp:                args -> AllocateArguments(1);
astGeneration/expr.cpp:                args -> AddArgument(access_expression);
astGeneration/expr.cpp:                compilation_unit -> ast_pool -> GenMethodInvocation(loc);
astGeneration/expr.cpp:            accessor -> base_opt = access_expression;
astGeneration/expr.cpp:            accessor -> arguments = args;
astGeneration/expr.cpp:            accessor -> symbol =
astGeneration/expr.cpp:                environment_type -> GetReadAccessMethod(variable);
astGeneration/expr.cpp:            name -> resolution_opt = accessor;
astGeneration/expr.cpp:                compilation_unit -> ast_pool -> GenFieldAccess();
astGeneration/expr.cpp:            field_access -> base = access_expression;
astGeneration/expr.cpp:            field_access -> identifier_token = name -> identifier_token;
astGeneration/expr.cpp:            field_access -> symbol = variable;
astGeneration/expr.cpp:            name -> resolution_opt = field_access;
astGeneration/expr.cpp:    assert(environment_type -> IsOwner(ThisType()));
astGeneration/expr.cpp:    assert(! method_call -> base_opt);
astGeneration/expr.cpp:    MethodSymbol* method = (MethodSymbol*) method_call -> symbol;
astGeneration/expr.cpp:    if (method -> ACC_STATIC())
astGeneration/expr.cpp:        access_expression = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:            GenName(method_call -> identifier_token);
astGeneration/expr.cpp:        access_expression -> symbol = environment_type;
astGeneration/expr.cpp:        AstThisExpression* this_expr = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:            GenThisExpression(method_call -> identifier_token);
astGeneration/expr.cpp:        this_expr -> resolution_opt =
astGeneration/expr.cpp:        this_expr -> symbol = this_expr -> resolution_opt -> symbol;
astGeneration/expr.cpp:    if (access_expression -> symbol != control.no_type)
astGeneration/expr.cpp:        method_call -> base_opt = access_expression;
astGeneration/expr.cpp:        TypeSymbol* containing_type = method -> containing_type;
astGeneration/expr.cpp:        if (method -> ACC_PRIVATE() ||
astGeneration/expr.cpp:            (method -> ACC_PROTECTED() &&
astGeneration/expr.cpp:            assert((method -> ACC_PRIVATE() &&
astGeneration/expr.cpp:                   (method -> ACC_PROTECTED() &&
astGeneration/expr.cpp:                    environment_type -> IsSubclass(containing_type)));
astGeneration/expr.cpp:            AstArguments* args = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:                GenArguments(method_call -> arguments -> left_parenthesis_token,
astGeneration/expr.cpp:                             method_call -> arguments -> right_parenthesis_token);
astGeneration/expr.cpp:            unsigned num_args = method_call -> arguments -> NumArguments();
astGeneration/expr.cpp:            if (! method -> ACC_STATIC())
astGeneration/expr.cpp:                args -> AllocateArguments(num_args + 1);
astGeneration/expr.cpp:                args -> AddArgument(access_expression);
astGeneration/expr.cpp:            else args -> AllocateArguments(num_args);
astGeneration/expr.cpp:                args -> AddArgument(method_call -> arguments -> Argument(i));
astGeneration/expr.cpp:            AstMethodInvocation* accessor = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:                GenMethodInvocation(method_call -> identifier_token);
astGeneration/expr.cpp:            accessor -> base_opt = access_expression;
astGeneration/expr.cpp:            accessor -> arguments = args;
astGeneration/expr.cpp:            accessor -> symbol =
astGeneration/expr.cpp:                environment_type -> GetReadAccessMethod(method);
astGeneration/expr.cpp:            method_call -> symbol = method;
astGeneration/expr.cpp:            method_call -> resolution_opt = accessor;
astGeneration/expr.cpp:    VariableSymbol* variable_symbol = name -> symbol -> VariableCast();
astGeneration/expr.cpp:    assert(variable_symbol && ! name -> base_opt);
astGeneration/expr.cpp:        if (! (variable_symbol -> IsLocal() ||
astGeneration/expr.cpp:               variable_symbol -> ACC_STATIC()))
astGeneration/expr.cpp:                           name -> identifier_token,
astGeneration/expr.cpp:                           lex_stream -> NameString(name -> identifier_token));
astGeneration/expr.cpp:        else if (variable_symbol -> owner -> TypeCast() &&
astGeneration/expr.cpp:                 ! variable_symbol -> IsDeclarationComplete() &&
astGeneration/expr.cpp:                           name -> identifier_token,
astGeneration/expr.cpp:                           lex_stream -> NameString(name -> identifier_token));
astGeneration/expr.cpp:    else if (! variable_symbol -> ACC_STATIC()) // an instance variable?
astGeneration/expr.cpp:        TypeSymbol* containing_type = variable_symbol -> owner -> TypeCast();
astGeneration/expr.cpp:        if (containing_type && ! variable_symbol -> accessed_local)
astGeneration/expr.cpp:                ! variable_symbol -> IsDeclarationComplete() &&
astGeneration/expr.cpp:                               name -> identifier_token,
astGeneration/expr.cpp:                               lex_stream -> NameString(name -> identifier_token));
astGeneration/expr.cpp:                               name -> identifier_token,
astGeneration/expr.cpp:                               lex_stream -> NameString(name -> identifier_token),
astGeneration/expr.cpp:                               containing_type -> Name());
astGeneration/expr.cpp:    if (expr -> symbol == control.String() && ! expr -> IsConstant())
astGeneration/expr.cpp:    TypeSymbol* type = name -> Type();
astGeneration/expr.cpp:    if (! type || name -> symbol -> TypeCast())
astGeneration/expr.cpp:        name -> symbol = control.no_type;
astGeneration/expr.cpp:    if (type -> IsArray())
astGeneration/expr.cpp:        type = type -> base_type;
astGeneration/expr.cpp:    // non-private types in the current package, are accessible. For a member
astGeneration/expr.cpp:    if (type -> ACC_PUBLIC() ||
astGeneration/expr.cpp:        (type -> ContainingPackage() == this_package &&
astGeneration/expr.cpp:         ! type -> ACC_PRIVATE()))
astGeneration/expr.cpp:        assert(this_type -> ContainingPackage() == this_package);
astGeneration/expr.cpp:        if (this_type -> outermost_type == type -> outermost_type ||
astGeneration/expr.cpp:            (type -> ACC_PROTECTED() &&
astGeneration/expr.cpp:             this_type -> HasProtectedAccessTo(type)))
astGeneration/expr.cpp:    TypeSymbol* containing_type = constructor -> containing_type;
astGeneration/expr.cpp:    if (this_type -> outermost_type != containing_type -> outermost_type &&
astGeneration/expr.cpp:        constructor -> ACC_PRIVATE())
astGeneration/expr.cpp:    if (containing_type -> ContainingPackage() != this_package &&
astGeneration/expr.cpp:        ! constructor -> ACC_PUBLIC())
astGeneration/expr.cpp:        return constructor -> ACC_PROTECTED() && explicit_ctor;
astGeneration/expr.cpp:    VariableSymbol* variable_symbol = symbol -> VariableCast();
astGeneration/expr.cpp:    MethodSymbol* method_symbol = symbol -> MethodCast();
astGeneration/expr.cpp:                                   ? variable_symbol -> ContainingType()
astGeneration/expr.cpp:                                   : method_symbol -> containing_type);
astGeneration/expr.cpp:    if (this_type -> outermost_type != containing_type -> outermost_type)
astGeneration/expr.cpp:        if (flags -> ACC_PRIVATE())
astGeneration/expr.cpp:        else if (flags -> ACC_PROTECTED())
astGeneration/expr.cpp:            if (base && base -> Type() -> ACC_INTERFACE())
astGeneration/expr.cpp:            if (containing_type -> ContainingPackage() == this_package ||
astGeneration/expr.cpp:                (base && base -> SuperExpressionCast()))
astGeneration/expr.cpp:            if (this_type -> HasProtectedAccessTo(containing_type))
astGeneration/expr.cpp:                if (flags -> ACC_STATIC())
astGeneration/expr.cpp:                         this_type -> semantic_environment;
astGeneration/expr.cpp:                     env; env = env -> previous)
astGeneration/expr.cpp:                    if (base_type -> IsSubclass(env -> Type()))
astGeneration/expr.cpp:        else if (! flags -> ACC_PUBLIC() &&
astGeneration/expr.cpp:                 containing_type -> ContainingPackage() != this_package)
astGeneration/expr.cpp:    return ThisType() -> IsSubclass(containing_type) ||
astGeneration/expr.cpp:        this_package == containing_type -> ContainingPackage();
astGeneration/expr.cpp:    AstFieldAccess* field_access = expr -> FieldAccessCast();
astGeneration/expr.cpp:    AstName* name = expr -> NameCast();
astGeneration/expr.cpp:    AstExpression* base = name ? name -> base_opt : field_access -> base;
astGeneration/expr.cpp:    TokenIndex id_token = expr -> RightToken();
astGeneration/expr.cpp:    bool base_is_type = base -> symbol -> TypeCast() && base -> NameCast();
astGeneration/expr.cpp:    if (type -> Bad())
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    else if (type == control.null_type || type -> Primitive())
astGeneration/expr.cpp:                       type -> Name());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:            assert(variable -> IsTyped());
astGeneration/expr.cpp:            if (base_is_type && ! variable -> ACC_STATIC())
astGeneration/expr.cpp:                               id_token, lex_stream -> NameString(id_token));
astGeneration/expr.cpp:                expr -> symbol = control.no_type;
astGeneration/expr.cpp:            if (variable -> ACC_STATIC() && ! base_is_type)
astGeneration/expr.cpp:                               id_token, lex_stream -> NameString(id_token));
astGeneration/expr.cpp:            // expression here - JLS 15.28. If it is of any other form, we
astGeneration/expr.cpp:            // bytecode, but do not treat the expression as a constant - JLS2
astGeneration/expr.cpp:            if (variable -> ACC_FINAL())
astGeneration/expr.cpp:                if (! variable -> IsInitialized())
astGeneration/expr.cpp:                    assert(variable -> IsInitialized());
astGeneration/expr.cpp:                    expr -> value = variable -> initial_value;
astGeneration/expr.cpp:            TypeSymbol* containing_type = variable -> ContainingType();
astGeneration/expr.cpp:            if (! variable -> ACC_STATIC() && base -> SuperExpressionCast())
astGeneration/expr.cpp:                if (super_expr -> base_opt)
astGeneration/expr.cpp:                    target_type = super_expr -> base_opt -> symbol;
astGeneration/expr.cpp:                (variable -> ACC_PRIVATE() ||
astGeneration/expr.cpp:                 (variable -> ACC_PROTECTED() &&
astGeneration/expr.cpp:                if (expr -> IsConstant())
astGeneration/expr.cpp:                    expr -> symbol = variable;
astGeneration/expr.cpp:                    if (variable -> ACC_PROTECTED())
astGeneration/expr.cpp:                                 this_type -> semantic_environment;
astGeneration/expr.cpp:                             env; env = env -> previous)
astGeneration/expr.cpp:                            if (env -> Type() -> IsSubclass(target_type))
astGeneration/expr.cpp:                                environment_type = env -> Type();
astGeneration/expr.cpp:                        compilation_unit -> ast_pool -> GenArguments(id_token,
astGeneration/expr.cpp:                    if (! variable -> ACC_STATIC())
astGeneration/expr.cpp:                        args -> AllocateArguments(1);
astGeneration/expr.cpp:                        args -> AddArgument(base);
astGeneration/expr.cpp:                    AstMethodInvocation* accessor = compilation_unit ->
astGeneration/expr.cpp:                        ast_pool -> GenMethodInvocation(id_token);
astGeneration/expr.cpp:                    accessor -> base_opt = base;
astGeneration/expr.cpp:                    accessor -> arguments = args;
astGeneration/expr.cpp:                    accessor -> symbol = environment_type ->
astGeneration/expr.cpp:                        GetReadAccessMethod(variable, base -> Type());
astGeneration/expr.cpp:                        name -> resolution_opt = accessor;
astGeneration/expr.cpp:                        field_access -> resolution_opt = accessor;
astGeneration/expr.cpp:                    expr -> symbol = accessor -> symbol;
astGeneration/expr.cpp:                expr -> symbol = variable;
astGeneration/expr.cpp:                    expr -> symbol = inner_type;
astGeneration/expr.cpp:                                   lex_stream -> NameString(id_token));
astGeneration/expr.cpp:                    expr -> symbol = control.no_type;
astGeneration/expr.cpp:                expr -> symbol = control.no_type;
astGeneration/expr.cpp:    if (! name -> base_opt)
astGeneration/expr.cpp:            FindVariableInEnvironment(where_found, name -> identifier_token);
astGeneration/expr.cpp:            assert(variable_symbol -> IsTyped());
astGeneration/expr.cpp:            if (variable_symbol -> ACC_FINAL() &&
astGeneration/expr.cpp:                ! variable_symbol -> IsInitialized())
astGeneration/expr.cpp:            name -> value = variable_symbol -> initial_value;
astGeneration/expr.cpp:            name -> symbol = variable_symbol;
astGeneration/expr.cpp:                variable_symbol -> owner -> TypeCast())
astGeneration/expr.cpp:                CreateAccessToScopedVariable(name, where_found -> Type());
astGeneration/expr.cpp:        // single-type-import declaration (7.5.1) or by a class or interface
astGeneration/expr.cpp:        // type-import-on-demand declaration (7.5.2) of the compilation unit
astGeneration/expr.cpp:        // type-import-on-demand declaration of the compilation unit
astGeneration/expr.cpp:        // containing the Identifier, then a compile-time error results.
astGeneration/expr.cpp:        else if ((type = FindType(name -> identifier_token)))
astGeneration/expr.cpp:            name -> symbol = type;
astGeneration/expr.cpp:            if (control.option.deprecation && type -> IsDeprecated() &&
astGeneration/expr.cpp:                               name -> identifier_token,
astGeneration/expr.cpp:                               type -> ContainingPackageName(),
astGeneration/expr.cpp:                               type -> ExternalName());
astGeneration/expr.cpp:                lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/expr.cpp:            if (package -> directory.Length())
astGeneration/expr.cpp:                name -> symbol = package;
astGeneration/expr.cpp:                name -> symbol = control.no_type;
astGeneration/expr.cpp:        AstName* base = name -> base_opt;
astGeneration/expr.cpp:        TypeSymbol* type = base -> Type();
astGeneration/expr.cpp:        assert(type || base -> symbol -> PackageCast());
astGeneration/expr.cpp:            name -> symbol = control.no_type;
astGeneration/expr.cpp:        PackageSymbol* package = base -> symbol -> PackageCast();
astGeneration/expr.cpp:                lex_stream -> NameSymbol(name -> identifier_token);
astGeneration/expr.cpp:            type = package -> FindTypeSymbol(name_symbol);
astGeneration/expr.cpp:                if (type -> SourcePending())
astGeneration/expr.cpp:                    control.ProcessHeaders(type -> file_symbol);
astGeneration/expr.cpp:                name -> symbol = type;
astGeneration/expr.cpp:                                    name -> identifier_token);
astGeneration/expr.cpp:                    name -> symbol = type;
astGeneration/expr.cpp:                        package -> FindPackageSymbol(name_symbol);
astGeneration/expr.cpp:                            package -> InsertPackageSymbol(name_symbol);
astGeneration/expr.cpp:                    if (subpackage -> directory.Length())
astGeneration/expr.cpp:                        name -> symbol = subpackage;
astGeneration/expr.cpp:                                       name, name_symbol -> Name());
astGeneration/expr.cpp:                        name -> symbol = control.no_type;
astGeneration/expr.cpp:            AddDependence(this_type, type, name -> IsConstant());
astGeneration/expr.cpp:    assert(! field_access -> base -> NameCast());
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(field_access -> base);
astGeneration/expr.cpp:    TypeSymbol* type = field_access -> base -> Type();
astGeneration/expr.cpp:        field_access -> symbol = control.no_type;
astGeneration/expr.cpp:    if (field_access -> symbol != control.no_type)
astGeneration/expr.cpp:        PackageSymbol* package = field_access -> symbol -> PackageCast();
astGeneration/expr.cpp:                           field_access, package -> PackageName());
astGeneration/expr.cpp:            field_access -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (field_access -> symbol -> TypeCast())
astGeneration/expr.cpp:            type = (TypeSymbol*) field_access -> symbol;
astGeneration/expr.cpp:                           field_access, type -> Name());
astGeneration/expr.cpp:            field_access -> symbol = control.no_type;
astGeneration/expr.cpp:            assert(! field_access -> symbol -> VariableCast() ||
astGeneration/expr.cpp:                   field_access -> symbol -> VariableCast() -> IsTyped());
astGeneration/expr.cpp:        lex_stream -> LiteralSymbol(char_literal -> character_literal_token);
astGeneration/expr.cpp:    if (! literal -> value)
astGeneration/expr.cpp:    if (literal -> value == control.BadValue())
astGeneration/expr.cpp:        char_literal -> symbol = control.no_type;
astGeneration/expr.cpp:        char_literal -> value = literal -> value;
astGeneration/expr.cpp:        char_literal -> symbol = control.char_type;
astGeneration/expr.cpp:        lex_stream -> LiteralSymbol(int_literal -> integer_literal_token);
astGeneration/expr.cpp:    if (! literal -> value)
astGeneration/expr.cpp:    if (literal -> value == control.BadValue())
astGeneration/expr.cpp:        int_literal -> symbol = control.no_type;
astGeneration/expr.cpp:        int_literal -> value = literal -> value;
astGeneration/expr.cpp:        int_literal -> symbol = control.int_type;
astGeneration/expr.cpp:        lex_stream -> LiteralSymbol(long_literal -> long_literal_token);
astGeneration/expr.cpp:    if (! literal -> value)
astGeneration/expr.cpp:    if (literal -> value == control.BadValue())
astGeneration/expr.cpp:        long_literal -> symbol = control.no_type;
astGeneration/expr.cpp:        long_literal -> value = literal -> value;
astGeneration/expr.cpp:        long_literal -> symbol = control.long_type;
astGeneration/expr.cpp:        lex_stream -> LiteralSymbol(float_literal -> float_literal_token);
astGeneration/expr.cpp:    if (! literal -> value)
astGeneration/expr.cpp:        (literal -> Name()[1] == U_x || literal -> Name()[1] == U_X))
astGeneration/expr.cpp:    if (literal -> value == control.BadValue())
astGeneration/expr.cpp:        float_literal -> symbol = control.no_type;
astGeneration/expr.cpp:        float_literal -> value = literal -> value;
astGeneration/expr.cpp:        float_literal -> symbol = control.float_type;
astGeneration/expr.cpp:        lex_stream -> LiteralSymbol(double_literal -> double_literal_token);
astGeneration/expr.cpp:    if (! literal -> value)
astGeneration/expr.cpp:        (literal -> Name()[1] == U_x || literal -> Name()[1] == U_X))
astGeneration/expr.cpp:    if (literal -> value == control.BadValue())
astGeneration/expr.cpp:        double_literal -> symbol = control.no_type;
astGeneration/expr.cpp:        double_literal -> value = literal -> value;
astGeneration/expr.cpp:        double_literal -> symbol = control.double_type;
astGeneration/expr.cpp:    true_literal -> value = control.int_pool.FindOrInsert((int) 1);
astGeneration/expr.cpp:    true_literal -> symbol = control.boolean_type;
astGeneration/expr.cpp:    false_literal -> value = control.int_pool.FindOrInsert((int) 0);
astGeneration/expr.cpp:    false_literal -> symbol = control.boolean_type;
astGeneration/expr.cpp:        lex_stream -> LiteralSymbol(string_literal -> string_literal_token);
astGeneration/expr.cpp:    if (! literal -> value)
astGeneration/expr.cpp:    if (literal -> value == control.BadValue())
astGeneration/expr.cpp:        string_literal -> symbol = control.no_type;
astGeneration/expr.cpp:        string_literal -> value = literal -> value;
astGeneration/expr.cpp:        string_literal -> symbol = control.String();
astGeneration/expr.cpp:    ProcessExpression(array_access -> base);
astGeneration/expr.cpp:    ProcessExpression(array_access -> expression);
astGeneration/expr.cpp:    array_access -> expression =
astGeneration/expr.cpp:        PromoteUnaryNumericExpression(array_access -> expression);
astGeneration/expr.cpp:    if (array_access -> expression -> Type() != control.int_type)
astGeneration/expr.cpp:        TypeSymbol* type = array_access -> expression -> Type();
astGeneration/expr.cpp:        if (array_access -> expression -> symbol != control.no_type)
astGeneration/expr.cpp:                           array_access -> expression,
astGeneration/expr.cpp:                           type -> ContainingPackageName(),
astGeneration/expr.cpp:                           type -> ExternalName());
astGeneration/expr.cpp:        array_access -> symbol = control.no_type;
astGeneration/expr.cpp:    TypeSymbol* array_type = array_access -> base -> Type();
astGeneration/expr.cpp:    if (array_type -> IsArray())
astGeneration/expr.cpp:        if (! array_access -> symbol)
astGeneration/expr.cpp:            array_access -> symbol = array_type -> ArraySubtype();
astGeneration/expr.cpp:                           array_access -> base,
astGeneration/expr.cpp:                           array_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           array_type -> ExternalName());
astGeneration/expr.cpp:        array_access -> symbol = control.no_type;
astGeneration/expr.cpp:    AstExpression* base = method_call -> base_opt;
astGeneration/expr.cpp:    TokenIndex id_token = method_call -> identifier_token;
astGeneration/expr.cpp:    bool base_is_type = base -> symbol -> TypeCast() && base -> NameCast();
astGeneration/expr.cpp:    if (type -> Bad())
astGeneration/expr.cpp:        method_call -> symbol = control.no_type;
astGeneration/expr.cpp:    else if (type == control.null_type || type -> Primitive())
astGeneration/expr.cpp:                       type -> Name());
astGeneration/expr.cpp:        method_call -> symbol = control.no_type;
astGeneration/expr.cpp:            method_call -> symbol = control.no_type;
astGeneration/expr.cpp:        MethodSymbol* method = (shadow ? shadow -> method_symbol
astGeneration/expr.cpp:            assert(method -> IsTyped());
astGeneration/expr.cpp:            if (base_is_type && ! method -> ACC_STATIC())
astGeneration/expr.cpp:                               method_call -> LeftToken(), id_token,
astGeneration/expr.cpp:                               lex_stream -> NameString(id_token));
astGeneration/expr.cpp:                method_call -> symbol = control.no_type;
astGeneration/expr.cpp:            if (method -> ACC_STATIC() && ! base_is_type)
astGeneration/expr.cpp:                               method_call -> LeftToken(), id_token,
astGeneration/expr.cpp:                               lex_stream -> NameString(id_token));
astGeneration/expr.cpp:            MethodInvocationConversion(method_call -> arguments, method);
astGeneration/expr.cpp:            TypeSymbol* containing_type = method -> containing_type;
astGeneration/expr.cpp:            if (! method -> ACC_STATIC() && base -> SuperExpressionCast())
astGeneration/expr.cpp:                if (super_expr -> base_opt)
astGeneration/expr.cpp:                    target_type = super_expr -> base_opt -> symbol;
astGeneration/expr.cpp:                (method -> ACC_PRIVATE() ||
astGeneration/expr.cpp:                 (method -> ACC_PROTECTED() &&
astGeneration/expr.cpp:                if (! method -> ACC_PRIVATE())
astGeneration/expr.cpp:                    for (SemanticEnvironment* env = this_type -> semantic_environment;
astGeneration/expr.cpp:                         env; env = env -> previous)
astGeneration/expr.cpp:                        if (env -> Type() -> IsSubclass(target_type))
astGeneration/expr.cpp:                            environment_type = env -> Type();
astGeneration/expr.cpp:                AstArguments* args = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:                    GenArguments(method_call -> arguments -> left_parenthesis_token,
astGeneration/expr.cpp:                                 method_call -> arguments -> right_parenthesis_token);
astGeneration/expr.cpp:                unsigned num_args = method_call -> arguments -> NumArguments();
astGeneration/expr.cpp:                if (! method -> ACC_STATIC())
astGeneration/expr.cpp:                    args -> AllocateArguments(num_args + 1);
astGeneration/expr.cpp:                    args -> AddArgument(base);
astGeneration/expr.cpp:                else args -> AllocateArguments(num_args);
astGeneration/expr.cpp:                    args -> AddArgument(method_call -> arguments -> Argument(i));
astGeneration/expr.cpp:                AstMethodInvocation* accessor = compilation_unit ->
astGeneration/expr.cpp:                    ast_pool -> GenMethodInvocation(id_token);
astGeneration/expr.cpp:                accessor -> base_opt = base;
astGeneration/expr.cpp:                accessor -> arguments = args;
astGeneration/expr.cpp:                accessor -> symbol = environment_type ->
astGeneration/expr.cpp:                    GetReadAccessMethod(method, base -> Type());
astGeneration/expr.cpp:                method_call -> symbol = method;
astGeneration/expr.cpp:                method_call -> resolution_opt = accessor;
astGeneration/expr.cpp:            else method_call -> symbol = method;
astGeneration/expr.cpp:            method_call -> symbol = control.no_type;
astGeneration/expr.cpp:    AstExpression* base = method_call -> base_opt;
astGeneration/expr.cpp:    TokenIndex id_token = method_call -> identifier_token;
astGeneration/expr.cpp:            method_call -> symbol = control.no_type;
astGeneration/expr.cpp:            base_type = where_found -> Type();
astGeneration/expr.cpp:            MethodSymbol* method = method_shadow -> method_symbol;
astGeneration/expr.cpp:            assert(method -> IsTyped());
astGeneration/expr.cpp:            if (! method -> ACC_STATIC())
astGeneration/expr.cpp:                                       method_call, method -> Header(),
astGeneration/expr.cpp:                                       method -> containing_type -> Name());
astGeneration/expr.cpp:                        method_call -> symbol = control.no_type;
astGeneration/expr.cpp:                                   lex_stream -> NameString(id_token));
astGeneration/expr.cpp:                    method_call -> symbol = control.no_type;
astGeneration/expr.cpp:            MethodInvocationConversion(method_call -> arguments, method);
astGeneration/expr.cpp:            method_call -> symbol = method;
astGeneration/expr.cpp:                CreateAccessToScopedMethod(method_call, where_found -> Type());
astGeneration/expr.cpp:        // If there are more names to the left, we short-circuit
astGeneration/expr.cpp:        if (base -> NameCast())
astGeneration/expr.cpp:        if (base -> symbol -> PackageCast())
astGeneration/expr.cpp:                           base -> symbol -> PackageCast() -> PackageName());
astGeneration/expr.cpp:            base -> symbol = control.no_type;
astGeneration/expr.cpp:        base_type = base -> Type();
astGeneration/expr.cpp:            method_call -> symbol = control.no_type;
astGeneration/expr.cpp:        if (base -> SuperExpressionCast())
astGeneration/expr.cpp:            MethodSymbol* method = method_call -> symbol -> MethodCast();
astGeneration/expr.cpp:            if (method && method -> ACC_ABSTRACT())
astGeneration/expr.cpp:                               lex_stream -> NameString(id_token));
astGeneration/expr.cpp:        MethodSymbol* method = (MethodSymbol*) method_call -> symbol;
astGeneration/expr.cpp:            assert(method_shadow -> NumConflicts() > 0);
astGeneration/expr.cpp:            method = method_shadow -> Conflict(0);
astGeneration/expr.cpp:            method_call -> symbol = method;
astGeneration/expr.cpp:        SymbolSet exceptions(method -> NumThrows());
astGeneration/expr.cpp:        for (i = method -> NumThrows(); --i >= 0; )
astGeneration/expr.cpp:            exceptions.AddElement(method -> Throws(i));
astGeneration/expr.cpp:        for (i = method_shadow -> NumConflicts(); --i >= 0; )
astGeneration/expr.cpp:            MethodSymbol* conflict = method_shadow -> Conflict(i);
astGeneration/expr.cpp:            conflict -> ProcessMethodThrows(this,
astGeneration/expr.cpp:                                            method_call -> identifier_token);
astGeneration/expr.cpp:            for (j = conflict -> NumThrows(); --j >= 0; )
astGeneration/expr.cpp:                TypeSymbol* candidate = conflict -> Throws(j);
astGeneration/expr.cpp:                    if (candidate -> IsSubclass(ex))
astGeneration/expr.cpp:            for (i = method_shadow -> NumConflicts(); --i >= 0; )
astGeneration/expr.cpp:                MethodSymbol* conflict = method_shadow -> Conflict(i);
astGeneration/expr.cpp:                for (j = conflict -> NumThrows(); --j >= 0; )
astGeneration/expr.cpp:                    TypeSymbol* candidate = conflict -> Throws(j);
astGeneration/expr.cpp:                    if (ex -> IsSubclass(candidate))
astGeneration/expr.cpp:                               method_call, method -> Header(),
astGeneration/expr.cpp:                               ex -> ContainingPackageName(),
astGeneration/expr.cpp:                               ex -> ExternalName(),
astGeneration/expr.cpp:            exception_set -> Union(exceptions);
astGeneration/expr.cpp:            exception_set -> AddElement(control.no_type);
astGeneration/expr.cpp:    for (unsigned i = 0; i < args -> NumArguments(); i++)
astGeneration/expr.cpp:        AstExpression* expr = args -> Argument(i);
astGeneration/expr.cpp:        if (expr -> symbol == control.no_type)
astGeneration/expr.cpp:        else if (expr -> Type() == control.void_type)
astGeneration/expr.cpp:                           expr -> Type() -> Name());
astGeneration/expr.cpp:    if (method_call -> type_arguments_opt)
astGeneration/expr.cpp:                       method_call -> type_arguments_opt);
astGeneration/expr.cpp:    bool bad_argument = ProcessArguments(method_call -> arguments);
astGeneration/expr.cpp:        method_call -> symbol = control.no_type;
astGeneration/expr.cpp:    assert(method_call -> symbol == control.no_type ||
astGeneration/expr.cpp:           ((MethodSymbol*) method_call -> symbol) -> IsTyped());
astGeneration/expr.cpp:    // Null is not a compile-time constant, so don't give it a value
astGeneration/expr.cpp:    null_literal -> symbol = control.null_type;
astGeneration/expr.cpp:    if (error && error -> InClone())
astGeneration/expr.cpp:        class_lit -> symbol = control.no_type;
astGeneration/expr.cpp:    ProcessType(class_lit -> type);
astGeneration/expr.cpp:    TypeSymbol* type = class_lit -> type -> symbol;
astGeneration/expr.cpp:    AddDependence(this_type, type -> BoxedType(control));
astGeneration/expr.cpp:        class_lit -> symbol = control.no_type;
astGeneration/expr.cpp:    else if (type -> Primitive())
astGeneration/expr.cpp:            class_lit -> symbol = control.Integer_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Double_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Character_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Long_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Float_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Byte_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Short_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Boolean_TYPE_Field();
astGeneration/expr.cpp:            class_lit -> symbol = control.Void_TYPE_Field();
astGeneration/expr.cpp:        VariableSymbol* var = this_type -> FindOrInsertClassLiteral(type);
astGeneration/expr.cpp:        AstName* name = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:            GenName(class_lit -> class_token);
astGeneration/expr.cpp:        name -> symbol = var;
astGeneration/expr.cpp:        class_lit -> symbol = var;
astGeneration/expr.cpp:        class_lit -> resolution_opt = name;
astGeneration/expr.cpp:    else class_lit -> symbol = control.Class();
astGeneration/expr.cpp:    AstTypeName* base = this_expression -> base_opt;
astGeneration/expr.cpp:        TypeSymbol* enclosing_type = base -> symbol;
astGeneration/expr.cpp:            this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:            this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (enclosing_type -> ACC_INTERFACE())
astGeneration/expr.cpp:                           enclosing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           enclosing_type -> ExternalName());
astGeneration/expr.cpp:            this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                           base -> LeftToken(),
astGeneration/expr.cpp:                           this_expression -> this_token,
astGeneration/expr.cpp:            this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (! this_type -> IsNestedIn(enclosing_type))
astGeneration/expr.cpp:                           base -> LeftToken(),
astGeneration/expr.cpp:                           this_expression -> this_token,
astGeneration/expr.cpp:                           enclosing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           enclosing_type -> ExternalName(),
astGeneration/expr.cpp:                           this_package -> PackageName(),
astGeneration/expr.cpp:                           this_type -> ExternalName());
astGeneration/expr.cpp:            this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                               base -> LeftToken(),
astGeneration/expr.cpp:                               this_expression -> this_token,
astGeneration/expr.cpp:                               enclosing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               enclosing_type -> ExternalName());
astGeneration/expr.cpp:                this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:            else this_expression -> symbol = this_type;
astGeneration/expr.cpp:            this_expression -> resolution_opt =
astGeneration/expr.cpp:            this_expression -> symbol =
astGeneration/expr.cpp:                this_expression -> resolution_opt -> symbol;
astGeneration/expr.cpp:                           this_expression -> this_token,
astGeneration/expr.cpp:            this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                           this_expression -> this_token);
astGeneration/expr.cpp:            this_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else this_expression -> symbol = this_type;
astGeneration/expr.cpp:    AstTypeName* base = super_expression -> base_opt;
astGeneration/expr.cpp:        TypeSymbol* enclosing_type = base -> symbol;
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (enclosing_type -> ACC_INTERFACE())
astGeneration/expr.cpp:                           enclosing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           enclosing_type -> ExternalName());
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                           base -> LeftToken(),
astGeneration/expr.cpp:                           super_expression -> super_token);
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                           base -> LeftToken(),
astGeneration/expr.cpp:                           super_expression -> super_token,
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (! this_type -> IsNestedIn(enclosing_type))
astGeneration/expr.cpp:                           base -> LeftToken(),
astGeneration/expr.cpp:                           super_expression -> super_token,
astGeneration/expr.cpp:                           enclosing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           enclosing_type -> ExternalName(),
astGeneration/expr.cpp:                           this_package -> PackageName(),
astGeneration/expr.cpp:                           this_type -> ExternalName());
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                               base -> LeftToken(),
astGeneration/expr.cpp:                               super_expression -> super_token,
astGeneration/expr.cpp:                               enclosing_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               enclosing_type -> ExternalName());
astGeneration/expr.cpp:                super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:            else super_expression -> symbol = this_type -> super;
astGeneration/expr.cpp:            super_expression -> resolution_opt =
astGeneration/expr.cpp:            super_expression -> symbol =
astGeneration/expr.cpp:                super_expression -> resolution_opt -> symbol;
astGeneration/expr.cpp:                           super_expression -> super_token);
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                           super_expression -> super_token,
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                           super_expression -> super_token);
astGeneration/expr.cpp:            super_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else super_expression -> symbol = ThisType() -> super;
astGeneration/expr.cpp:    // intermediate Strings - see CheckConstantString in lookup.cpp
astGeneration/expr.cpp:    ProcessExpression(parenthesized -> expression);
astGeneration/expr.cpp:    if (parenthesized -> expression -> Type() == control.void_type)
astGeneration/expr.cpp:                       parenthesized -> expression,
astGeneration/expr.cpp:                       control.void_type -> Name());
astGeneration/expr.cpp:        parenthesized -> symbol = control.no_type;
astGeneration/expr.cpp:        parenthesized -> value = parenthesized -> expression -> value;
astGeneration/expr.cpp:        parenthesized -> symbol = parenthesized -> expression -> symbol;
astGeneration/expr.cpp:    assert(inner_type -> IsLocal() &&
astGeneration/expr.cpp:           (! inner_type -> Anonymous() || ! inner_type -> EnclosingType()));
astGeneration/expr.cpp:    inner_type -> MarkLocalClassProcessingCompleted();
astGeneration/expr.cpp:    unsigned param_count = inner_type -> NumConstructorParameters();
astGeneration/expr.cpp:        for (ctor = inner_type -> FindMethodSymbol(control.init_name_symbol);
astGeneration/expr.cpp:             ctor; ctor = ctor -> next_method)
astGeneration/expr.cpp:            ctor -> SetSignature(control);
astGeneration/expr.cpp:             j < inner_type -> NumPrivateAccessConstructors(); j++)
astGeneration/expr.cpp:            inner_type -> PrivateAccessConstructor(j) ->
astGeneration/expr.cpp:                SetSignature(control, (inner_type -> outermost_type ->
astGeneration/expr.cpp:         i < inner_type -> NumLocalConstructorCallEnvironments(); i++)
astGeneration/expr.cpp:            inner_type -> LocalConstructorCallEnvironment(i);
astGeneration/expr.cpp:        AstArguments* args = env -> args;
astGeneration/expr.cpp:        args -> AllocateLocalArguments(param_count);
astGeneration/expr.cpp:            AstName* name = compilation_unit ->
astGeneration/expr.cpp:                ast_pool -> GenName(args -> right_parenthesis_token);
astGeneration/expr.cpp:                FindLocalVariable(inner_type -> ConstructorParameter(k),
astGeneration/expr.cpp:            name -> symbol = accessor;
astGeneration/expr.cpp:            TypeSymbol* owner = accessor -> ContainingType();
astGeneration/expr.cpp:            args -> AddLocalArgument(name);
astGeneration/expr.cpp:        if (ThisType() -> Anonymous() &&
astGeneration/expr.cpp:            ! ThisType() -> LocalClassProcessingCompleted())
astGeneration/expr.cpp:    TokenIndex left_loc = class_creation -> class_type -> LeftToken();
astGeneration/expr.cpp:        class_creation -> arguments -> right_parenthesis_token;
astGeneration/expr.cpp:    state_stack.Push(anonymous_type -> semantic_environment);
astGeneration/expr.cpp:    TypeSymbol* super_type = anonymous_type -> super;
astGeneration/expr.cpp:        class_creation -> class_type -> symbol = control.no_type;
astGeneration/expr.cpp:    assert(super_constructor -> IsTyped());
astGeneration/expr.cpp:    AstArguments* resolution_args = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:        GenArguments(class_creation -> arguments -> left_parenthesis_token,
astGeneration/expr.cpp:        compilation_unit -> ast_pool -> GenClassCreationExpression();
astGeneration/expr.cpp:    resolution -> new_token = class_creation -> new_token;
astGeneration/expr.cpp:    resolution -> class_type = class_creation -> class_type;
astGeneration/expr.cpp:    resolution -> arguments = resolution_args;
astGeneration/expr.cpp:    resolution -> symbol = anonymous_type;
astGeneration/expr.cpp:    class_creation -> resolution_opt = resolution;
astGeneration/expr.cpp:        new BlockSymbol(super_constructor -> NumFormalParameters() + 3);
astGeneration/expr.cpp:    block_symbol -> max_variable_index = 1; // A spot for "this".
astGeneration/expr.cpp:        anonymous_type -> InsertMethodSymbol(control.init_name_symbol);
astGeneration/expr.cpp:    constructor -> SetType(anonymous_type);
astGeneration/expr.cpp:    constructor -> SetContainingType(anonymous_type);
astGeneration/expr.cpp:    constructor -> SetBlockSymbol(block_symbol);
astGeneration/expr.cpp:    for (unsigned i = 0; i < super_constructor -> NumThrows(); i++)
astGeneration/expr.cpp:        constructor -> AddThrows(super_constructor -> Throws(i));
astGeneration/expr.cpp:    if (anonymous_type -> EnclosingType())
astGeneration/expr.cpp:            block_symbol -> InsertVariableSymbol(control.this_name_symbol);
astGeneration/expr.cpp:        this0_variable -> SetType(anonymous_type -> EnclosingType());
astGeneration/expr.cpp:        this0_variable -> SetOwner(constructor);
astGeneration/expr.cpp:        this0_variable -> SetFlags(AccessFlags::ACCESS_FINAL |
astGeneration/expr.cpp:        this0_variable -> SetLocalVariableIndex(block_symbol ->
astGeneration/expr.cpp:        this0_variable -> MarkComplete();
astGeneration/expr.cpp:            compilation_unit -> ast_pool -> GenThisExpression(left_loc);
astGeneration/expr.cpp:        this0_expression -> symbol = anonymous_type -> EnclosingType();
astGeneration/expr.cpp:        resolution -> base_opt = this0_expression;
astGeneration/expr.cpp:    AstArguments* super_args = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:        GenArguments(class_creation -> arguments -> left_parenthesis_token,
astGeneration/expr.cpp:    AstSuperCall* super_call = compilation_unit -> ast_pool -> GenSuperCall();
astGeneration/expr.cpp:    if (super_constructor -> ACC_PRIVATE())
astGeneration/expr.cpp:            super_type -> GetReadAccessConstructor(super_constructor);
astGeneration/expr.cpp:        super_args -> AddNullArgument();
astGeneration/expr.cpp:    super_call -> base_opt = class_creation -> base_opt;
astGeneration/expr.cpp:    super_call -> super_token = class_creation -> new_token;
astGeneration/expr.cpp:    super_call -> arguments = super_args;
astGeneration/expr.cpp:    super_call -> semicolon_token = right_loc;
astGeneration/expr.cpp:    super_call -> symbol = super_constructor;
astGeneration/expr.cpp:    AstClassBody* class_body = class_creation -> class_body_opt;
astGeneration/expr.cpp:        compilation_unit -> ast_pool -> GenMethodBody();
astGeneration/expr.cpp:    constructor_block -> block_symbol =
astGeneration/expr.cpp:        constructor -> block_symbol -> InsertBlockSymbol(0);
astGeneration/expr.cpp:    constructor_block -> left_brace_token = class_body -> left_brace_token;
astGeneration/expr.cpp:    constructor_block -> right_brace_token = class_body -> left_brace_token;
astGeneration/expr.cpp:    constructor_block -> explicit_constructor_opt = super_call;
astGeneration/expr.cpp:    constructor_block -> AllocateStatements(1); // for the generated return
astGeneration/expr.cpp:        compilation_unit -> ast_pool -> GenMethodDeclarator();
astGeneration/expr.cpp:    method_declarator -> identifier_token = left_loc;
astGeneration/expr.cpp:    method_declarator -> left_parenthesis_token =
astGeneration/expr.cpp:        class_creation -> arguments -> left_parenthesis_token;
astGeneration/expr.cpp:    method_declarator -> right_parenthesis_token = right_loc;
astGeneration/expr.cpp:        compilation_unit -> ast_pool -> GenConstructorDeclaration();
astGeneration/expr.cpp:    constructor_declaration -> constructor_declarator = method_declarator;
astGeneration/expr.cpp:    constructor_declaration -> constructor_body = constructor_block;
astGeneration/expr.cpp:    constructor_declaration -> constructor_symbol = constructor;
astGeneration/expr.cpp:    constructor -> declaration = constructor_declaration;
astGeneration/expr.cpp:    class_body -> default_constructor = constructor_declaration;
astGeneration/expr.cpp:    unsigned num_args = class_creation -> arguments -> NumArguments();
astGeneration/expr.cpp:    if (class_creation -> base_opt)
astGeneration/expr.cpp:            block_symbol -> InsertVariableSymbol(control.MakeParameter(0));
astGeneration/expr.cpp:        super_this0_variable -> SetACC_SYNTHETIC();
astGeneration/expr.cpp:        super_this0_variable -> SetType(super_call -> base_opt -> Type());
astGeneration/expr.cpp:        super_this0_variable -> SetOwner(constructor);
astGeneration/expr.cpp:        super_this0_variable -> SetLocalVariableIndex(block_symbol ->
astGeneration/expr.cpp:        super_this0_variable -> MarkComplete();
astGeneration/expr.cpp:        resolution_args -> AllocateArguments(num_args + 1);
astGeneration/expr.cpp:        resolution_args -> AddArgument(class_creation -> base_opt);
astGeneration/expr.cpp:        constructor -> AddFormalParameter(super_this0_variable);
astGeneration/expr.cpp:        AstName* name = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:            GenName(class_creation -> new_token);
astGeneration/expr.cpp:        name -> symbol = super_this0_variable;
astGeneration/expr.cpp:        super_call -> base_opt = name;
astGeneration/expr.cpp:    else resolution_args -> AllocateArguments(num_args);
astGeneration/expr.cpp:    super_args -> AllocateArguments(super_constructor ->
astGeneration/expr.cpp:    for (unsigned j = 0; j < super_constructor -> NumFormalParameters(); j++)
astGeneration/expr.cpp:        VariableSymbol* param = super_constructor -> FormalParameter(j);
astGeneration/expr.cpp:            block_symbol -> InsertVariableSymbol(param -> Identity());
astGeneration/expr.cpp:        symbol -> SetType(param -> Type());
astGeneration/expr.cpp:        symbol -> SetOwner(constructor);
astGeneration/expr.cpp:        symbol -> SetLocalVariableIndex(block_symbol -> max_variable_index++);
astGeneration/expr.cpp:        symbol -> MarkComplete();
astGeneration/expr.cpp:        if (control.IsDoubleWordType(symbol -> Type()))
astGeneration/expr.cpp:            block_symbol -> max_variable_index++;
astGeneration/expr.cpp:        resolution_args -> AddArgument(class_creation -> arguments -> Argument(j));
astGeneration/expr.cpp:        constructor -> AddFormalParameter(symbol);
astGeneration/expr.cpp:        AstName* name = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:            GenName(class_creation -> new_token);
astGeneration/expr.cpp:        name -> symbol = symbol;
astGeneration/expr.cpp:        super_args -> AddArgument(name);
astGeneration/expr.cpp:    if (super_type -> IsLocal())
astGeneration/expr.cpp:        unsigned param_count = super_type -> NumConstructorParameters();
astGeneration/expr.cpp:        if (super_type -> LocalClassProcessingCompleted() && param_count)
astGeneration/expr.cpp:            super_args -> AllocateLocalArguments(param_count);
astGeneration/expr.cpp:                AstName* name = compilation_unit ->
astGeneration/expr.cpp:                    ast_pool -> GenName(super_call -> super_token);
astGeneration/expr.cpp:                    FindLocalVariable(super_type -> ConstructorParameter(k),
astGeneration/expr.cpp:                name -> symbol = accessor;
astGeneration/expr.cpp:                TypeSymbol* owner = accessor -> ContainingType();
astGeneration/expr.cpp:                super_args -> AddLocalArgument(name);
astGeneration/expr.cpp:            super_type -> AddLocalConstructorCallEnvironment
astGeneration/expr.cpp:                (GetEnvironment(super_call -> arguments));
astGeneration/expr.cpp:    constructor -> SetSignature(control);
astGeneration/expr.cpp:    if (error && error -> InClone())
astGeneration/expr.cpp:    AstClassBody* class_body = class_creation -> class_body_opt;
astGeneration/expr.cpp:    TypeSymbol* outermost_type = this_type -> outermost_type;
astGeneration/expr.cpp:    IntToWstring value(this_type -> NumLocalTypes() +
astGeneration/expr.cpp:                       this_type -> NumAnonymousTypes() + 1);
astGeneration/expr.cpp:    int length = this_type -> ExternalNameLength() + 1 +
astGeneration/expr.cpp:    wcscpy(anonymous_name, this_type -> ExternalName());
astGeneration/expr.cpp:        this_type -> InsertAnonymousTypeSymbol(name_symbol);
astGeneration/expr.cpp:    anon_type -> MarkAnonymous();
astGeneration/expr.cpp:    anon_type -> outermost_type = outermost_type;
astGeneration/expr.cpp:    anon_type -> supertypes_closure = new SymbolSet;
astGeneration/expr.cpp:    anon_type -> subtypes_closure = new SymbolSet;
astGeneration/expr.cpp:    anon_type -> semantic_environment =
astGeneration/expr.cpp:    anon_type -> declaration = class_body;
astGeneration/expr.cpp:    anon_type -> declaration -> semantic_environment =
astGeneration/expr.cpp:        anon_type -> semantic_environment;
astGeneration/expr.cpp:    anon_type -> file_symbol = source_file_symbol;
astGeneration/expr.cpp:        anon_type -> SetOwner(ThisMethod());
astGeneration/expr.cpp:        // requires non-trivial code, so the initializer method should
astGeneration/expr.cpp:        assert(ThisVariable() -> ACC_STATIC()
astGeneration/expr.cpp:               ? this_type -> static_initializer_method
astGeneration/expr.cpp:               : (this_type -> FindMethodSymbol(control.
astGeneration/expr.cpp:        anon_type ->
astGeneration/expr.cpp:            SetOwner(ThisVariable() -> ACC_STATIC()
astGeneration/expr.cpp:                     ? this_type -> static_initializer_method
astGeneration/expr.cpp:                     : (this_type ->
astGeneration/expr.cpp:        assert(class_creation -> generated);
astGeneration/expr.cpp:        anon_type -> SetOwner(this_type);
astGeneration/expr.cpp:    anon_type -> SetSymbolTable(class_body -> NumClassBodyDeclarations() + 3);
astGeneration/expr.cpp:    anon_type -> SetLocation();
astGeneration/expr.cpp:    anon_type -> SetSignature(control);
astGeneration/expr.cpp:    anon_type -> SetACC_FINAL();
astGeneration/expr.cpp:        anon_type -> InsertThis0();
astGeneration/expr.cpp:    if (super_type -> ACC_INTERFACE())
astGeneration/expr.cpp:        anon_type -> AddInterface(super_type);
astGeneration/expr.cpp:        anon_type -> super = control.Object();
astGeneration/expr.cpp:        control.Object() -> subtypes -> AddElement(anon_type);
astGeneration/expr.cpp:    else anon_type -> super = super_type;
astGeneration/expr.cpp:    super_type -> subtypes -> AddElement(anon_type);
astGeneration/expr.cpp:    if (super_type -> ACC_FINAL())
astGeneration/expr.cpp:                        class_creation -> class_type,
astGeneration/expr.cpp:                        super_type -> ContainingPackageName(),
astGeneration/expr.cpp:                        super_type -> ExternalName());
astGeneration/expr.cpp:         anon_type -> MarkBad();
astGeneration/expr.cpp:    else if (super_type -> Bad())
astGeneration/expr.cpp:        anon_type -> MarkBad();
astGeneration/expr.cpp:    this_type -> AddAnonymousType(anon_type);
astGeneration/expr.cpp:    if (class_body -> UnparsedClassBodyCast())
astGeneration/expr.cpp:        if (! control.parser -> InitializerParse(lex_stream, class_body))
astGeneration/expr.cpp:             compilation_unit -> MarkBad();
astGeneration/expr.cpp:        if (! control.parser -> BodyParse(lex_stream, class_body))
astGeneration/expr.cpp:            compilation_unit -> MarkBad();
astGeneration/expr.cpp:    if (class_creation -> class_type -> symbol == control.no_type)
astGeneration/expr.cpp:    if (! super_type -> IsLocal() ||
astGeneration/expr.cpp:        super_type -> LocalClassProcessingCompleted() ||
astGeneration/expr.cpp:        anon_type -> EnclosingType())
astGeneration/expr.cpp:        if (anon_type -> NumConstructorParameters() && ! anon_type -> Bad())
astGeneration/expr.cpp:            class_body -> default_constructor -> constructor_symbol ->
astGeneration/expr.cpp:        anon_type -> MarkLocalClassProcessingCompleted();
astGeneration/expr.cpp:    AstName* actual_type = class_creation -> class_type -> name;
astGeneration/expr.cpp:    if (class_creation -> base_opt)
astGeneration/expr.cpp:        ProcessExpression(class_creation -> base_opt);
astGeneration/expr.cpp:        TypeSymbol* enclosing_type = class_creation -> base_opt -> Type();
astGeneration/expr.cpp:        if (! enclosing_type -> IsSubclass(control.Object()))
astGeneration/expr.cpp:                               class_creation -> base_opt,
astGeneration/expr.cpp:                               enclosing_type -> ExternalName());
astGeneration/expr.cpp:        if (type -> ACC_INTERFACE())
astGeneration/expr.cpp:                           actual_type, type -> ContainingPackageName(),
astGeneration/expr.cpp:                           type -> ExternalName());
astGeneration/expr.cpp:        else if (type -> ACC_STATIC())
astGeneration/expr.cpp:                           actual_type, type -> ContainingPackageName(),
astGeneration/expr.cpp:                           type -> ExternalName());
astGeneration/expr.cpp:        ProcessType(class_creation -> class_type);
astGeneration/expr.cpp:        type = class_creation -> class_type -> symbol;
astGeneration/expr.cpp:        if (type -> EnclosingType())
astGeneration/expr.cpp:            AstThisExpression* this_expr = compilation_unit -> ast_pool ->
astGeneration/expr.cpp:                GenThisExpression(class_creation -> new_token);
astGeneration/expr.cpp:            this_expr -> resolution_opt =
astGeneration/expr.cpp:                CreateAccessToType(class_creation, type -> EnclosingType());
astGeneration/expr.cpp:            this_expr -> symbol = this_expr -> resolution_opt -> symbol;
astGeneration/expr.cpp:            class_creation -> base_opt = this_expr;
astGeneration/expr.cpp:    if (class_creation -> type_arguments_opt)
astGeneration/expr.cpp:                       class_creation -> type_arguments_opt);
astGeneration/expr.cpp:    ProcessArguments(class_creation -> arguments);
astGeneration/expr.cpp:    if (type -> IsEnum())
astGeneration/expr.cpp:                       type -> ContainingPackageName(),
astGeneration/expr.cpp:                       type -> ExternalName());
astGeneration/expr.cpp:    else if (class_creation -> class_body_opt)
astGeneration/expr.cpp:        class_creation -> symbol = type;
astGeneration/expr.cpp:            class_creation = class_creation -> resolution_opt;
astGeneration/expr.cpp:    else if (type -> ACC_INTERFACE())
astGeneration/expr.cpp:                       type -> ContainingPackageName(),
astGeneration/expr.cpp:                       type -> ExternalName());
astGeneration/expr.cpp:    else if (type -> ACC_ABSTRACT())
astGeneration/expr.cpp:                       type -> ExternalName());
astGeneration/expr.cpp:        FindConstructor(type, class_creation, actual_type -> LeftToken(),
astGeneration/expr.cpp:                        class_creation -> arguments -> right_parenthesis_token);
astGeneration/expr.cpp:        assert(ctor -> IsTyped());
astGeneration/expr.cpp:        class_creation -> symbol = ctor;
astGeneration/expr.cpp:        if (class_creation -> base_opt)
astGeneration/expr.cpp:            assert(CanAssignmentConvertReference(ctor -> containing_type -> EnclosingType(),
astGeneration/expr.cpp:                                                 class_creation -> base_opt -> Type()));
astGeneration/expr.cpp:            class_creation -> base_opt =
astGeneration/expr.cpp:                ConvertToType(class_creation -> base_opt,
astGeneration/expr.cpp:                              ctor -> containing_type -> EnclosingType());
astGeneration/expr.cpp:        MethodInvocationConversion(class_creation -> arguments, ctor);
astGeneration/expr.cpp:        for (i = 0; i < ctor -> NumThrows(); i++)
astGeneration/expr.cpp:            TypeSymbol* exception = ctor -> Throws(i);
astGeneration/expr.cpp:                exception_set -> AddElement(exception);
astGeneration/expr.cpp:                ReportSemError((class_creation -> class_body_opt
astGeneration/expr.cpp:                               actual_type, type -> ExternalName(),
astGeneration/expr.cpp:                               exception -> ContainingPackageName(),
astGeneration/expr.cpp:                               exception -> ExternalName(),
astGeneration/expr.cpp:        if (ctor -> ACC_PRIVATE() && ThisType() != type)
astGeneration/expr.cpp:            assert(ThisType() -> outermost_type == type -> outermost_type);
astGeneration/expr.cpp:            ctor = type -> GetReadAccessConstructor(ctor);
astGeneration/expr.cpp:            class_creation -> symbol = ctor;
astGeneration/expr.cpp:            class_creation -> arguments -> AddNullArgument();
astGeneration/expr.cpp:            exception_set -> AddElement(control.no_type);
astGeneration/expr.cpp:        class_creation -> symbol = control.no_type;
astGeneration/expr.cpp:    if (type -> IsLocal())
astGeneration/expr.cpp:        if (type -> LocalClassProcessingCompleted())
astGeneration/expr.cpp:            unsigned param_count = type -> NumConstructorParameters();
astGeneration/expr.cpp:            class_creation -> arguments -> AllocateLocalArguments(param_count);
astGeneration/expr.cpp:                AstName* name = compilation_unit ->
astGeneration/expr.cpp:                    ast_pool -> GenName(class_creation -> new_token);
astGeneration/expr.cpp:                    FindLocalVariable(type -> ConstructorParameter(i),
astGeneration/expr.cpp:                name -> symbol = accessor;
astGeneration/expr.cpp:                TypeSymbol* owner = accessor -> ContainingType();
astGeneration/expr.cpp:                class_creation -> arguments -> AddLocalArgument(name);
astGeneration/expr.cpp:            type -> AddLocalConstructorCallEnvironment
astGeneration/expr.cpp:                (GetEnvironment(class_creation -> arguments));
astGeneration/expr.cpp:    assert(array_creation -> array_initializer_opt ?
astGeneration/expr.cpp:           (! array_creation -> NumDimExprs() &&
astGeneration/expr.cpp:            ! array_creation -> NumBrackets())
astGeneration/expr.cpp:           : array_creation -> NumDimExprs());
astGeneration/expr.cpp:    ProcessType(array_creation -> array_type);
astGeneration/expr.cpp:    TypeSymbol* type = array_creation -> array_type -> symbol;
astGeneration/expr.cpp:    unsigned dims = type -> num_dimensions +
astGeneration/expr.cpp:        array_creation -> NumDimExprs() + array_creation -> NumBrackets();
astGeneration/expr.cpp:    type = type -> GetArrayType(this, dims);
astGeneration/expr.cpp:    array_creation -> symbol = type;
astGeneration/expr.cpp:    for (unsigned i = 0; i < array_creation -> NumDimExprs(); i++)
astGeneration/expr.cpp:        AstDimExpr* dim_expr = array_creation -> DimExpr(i);
astGeneration/expr.cpp:        ProcessExpression(dim_expr -> expression);
astGeneration/expr.cpp:            PromoteUnaryNumericExpression(dim_expr -> expression);
astGeneration/expr.cpp:        if (expr -> Type() != control.int_type &&
astGeneration/expr.cpp:            expr -> symbol != control.no_type)
astGeneration/expr.cpp:                           dim_expr -> expression,
astGeneration/expr.cpp:                           expr -> Type() -> ContainingPackageName(),
astGeneration/expr.cpp:                           expr -> Type() -> ExternalName());
astGeneration/expr.cpp:            array_creation -> symbol = control.no_type;
astGeneration/expr.cpp:        dim_expr -> expression = expr;
astGeneration/expr.cpp:        if (expr -> IsConstant() &&
astGeneration/expr.cpp:            expr -> Type() == control.int_type &&
astGeneration/expr.cpp:            (DYNAMIC_CAST<IntLiteralValue*> (expr -> value)) -> value < 0)
astGeneration/expr.cpp:                           dim_expr -> expression);
astGeneration/expr.cpp:    if (array_creation -> array_initializer_opt)
astGeneration/expr.cpp:        ProcessArrayInitializer(array_creation -> array_initializer_opt, type);
astGeneration/expr.cpp:    AstExpression* expression = postfix_expression -> expression;
astGeneration/expr.cpp:    postfix_expression -> symbol = expression -> symbol;
astGeneration/expr.cpp:    if (expression -> ParenthesizedExpressionCast())
astGeneration/expr.cpp:        while (expression -> ParenthesizedExpressionCast())
astGeneration/expr.cpp:            expression = ((AstParenthesizedExpression*) expression) ->
astGeneration/expr.cpp:    if (expression -> symbol != control.no_type)
astGeneration/expr.cpp:        if (! expression -> IsLeftHandSide())
astGeneration/expr.cpp:                           postfix_expression -> expression,
astGeneration/expr.cpp:                           postfix_expression -> expression -> Type() -> Name());
astGeneration/expr.cpp:            postfix_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (! control.IsNumeric(expression -> Type()))
astGeneration/expr.cpp:                           postfix_expression -> expression,
astGeneration/expr.cpp:                           expression -> Type() -> ContainingPackageName(),
astGeneration/expr.cpp:                           expression -> Type() -> ExternalName());
astGeneration/expr.cpp:            postfix_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (! expression -> ArrayAccessCast()) // some kind of name
astGeneration/expr.cpp:            AstName* name = expression -> NameCast();
astGeneration/expr.cpp:                if (name -> resolution_opt)
astGeneration/expr.cpp:                        name -> resolution_opt -> symbol -> MethodCast();
astGeneration/expr.cpp:                if (field_access -> resolution_opt)
astGeneration/expr.cpp:                    read_method = field_access -> resolution_opt ->
astGeneration/expr.cpp:                        symbol -> MethodCast();
astGeneration/expr.cpp:                postfix_expression -> write_method =
astGeneration/expr.cpp:                    read_method -> containing_type ->
astGeneration/expr.cpp:    ProcessExpression(expr -> expression);
astGeneration/expr.cpp:    expr -> expression = PromoteUnaryNumericExpression(expr -> expression);
astGeneration/expr.cpp:    expr -> value = expr -> expression -> value;
astGeneration/expr.cpp:    expr -> symbol = expr -> expression -> symbol;
astGeneration/expr.cpp:        expr -> expression -> IntegerLiteralCast();
astGeneration/expr.cpp:    AstLongLiteral* long_literal = expr -> expression -> LongLiteralCast();
astGeneration/expr.cpp:        LiteralSymbol* literal = lex_stream ->
astGeneration/expr.cpp:            LiteralSymbol(int_literal -> integer_literal_token);
astGeneration/expr.cpp:        expr -> value = control.int_pool.FindOrInsertNegativeInt(literal);
astGeneration/expr.cpp:        if (expr -> value == control.BadValue())
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        else expr -> symbol = control.int_type;
astGeneration/expr.cpp:        LiteralSymbol* literal = lex_stream ->
astGeneration/expr.cpp:            LiteralSymbol(long_literal -> long_literal_token);
astGeneration/expr.cpp:        expr -> value = control.long_pool.FindOrInsertNegativeLong(literal);
astGeneration/expr.cpp:        if (expr -> value == control.BadValue())
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        else expr -> symbol = control.long_type;
astGeneration/expr.cpp:        ProcessExpression(expr -> expression);
astGeneration/expr.cpp:        expr -> expression = PromoteUnaryNumericExpression(expr -> expression);
astGeneration/expr.cpp:        expr -> symbol = expr -> expression -> symbol;
astGeneration/expr.cpp:        if (expr -> expression -> IsConstant())
astGeneration/expr.cpp:            TypeSymbol* type = expr -> Type();
astGeneration/expr.cpp:                    (expr -> expression -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.double_pool.FindOrInsert(-literal -> value);
astGeneration/expr.cpp:                    (expr -> expression -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.float_pool.FindOrInsert(-literal -> value);
astGeneration/expr.cpp:                    (expr -> expression -> value);
astGeneration/expr.cpp:                CheckIntegerNegation(this, expr, literal -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.long_pool.FindOrInsert(-literal -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                    (expr -> expression -> value);
astGeneration/expr.cpp:                CheckIntegerNegation(this, expr, literal -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.int_pool.FindOrInsert(-literal -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> expression);
astGeneration/expr.cpp:    expr -> expression = PromoteUnaryNumericExpression(expr -> expression);
astGeneration/expr.cpp:    expr -> symbol = expr -> expression -> symbol;
astGeneration/expr.cpp:    if (! control.IsIntegral(expr -> expression -> Type()))
astGeneration/expr.cpp:        TypeSymbol* type = expr -> expression -> Type();
astGeneration/expr.cpp:        if (expr -> expression -> symbol != control.no_type)
astGeneration/expr.cpp:                           expr -> expression,
astGeneration/expr.cpp:                           type -> ContainingPackageName(),
astGeneration/expr.cpp:                           type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    else if (expr -> expression -> IsConstant())
astGeneration/expr.cpp:        if (expr -> expression -> Type() == control.long_type)
astGeneration/expr.cpp:                (expr -> expression -> value);
astGeneration/expr.cpp:            expr -> value = control.long_pool.FindOrInsert(~literal -> value);
astGeneration/expr.cpp:        else // assert(expr -> expression -> Type() == control.int_type)
astGeneration/expr.cpp:                (expr -> expression -> value);
astGeneration/expr.cpp:            expr -> value = control.int_pool.FindOrInsert(~literal -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> expression);
astGeneration/expr.cpp:    if (expr -> expression -> Type() != control.boolean_type)
astGeneration/expr.cpp:        TypeSymbol* type = expr -> expression -> Type();
astGeneration/expr.cpp:        if (expr -> expression -> symbol != control.no_type)
astGeneration/expr.cpp:                           expr -> expression,
astGeneration/expr.cpp:                           type -> ContainingPackageName(),
astGeneration/expr.cpp:                           type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:        if (expr -> expression -> IsConstant())
astGeneration/expr.cpp:            expr -> value = control.int_pool
astGeneration/expr.cpp:                .FindOrInsert(IsConstantTrue(expr -> expression) ? 0 : 1);
astGeneration/expr.cpp:        expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:    AstExpression* expression = prefix_expression -> expression;
astGeneration/expr.cpp:    prefix_expression -> symbol = expression -> symbol;
astGeneration/expr.cpp:    if (expression -> ParenthesizedExpressionCast())
astGeneration/expr.cpp:        while (expression -> ParenthesizedExpressionCast())
astGeneration/expr.cpp:            expression = ((AstParenthesizedExpression*) expression) ->
astGeneration/expr.cpp:    if (expression -> symbol != control.no_type)
astGeneration/expr.cpp:        if (! expression -> IsLeftHandSide())
astGeneration/expr.cpp:                           prefix_expression -> expression,
astGeneration/expr.cpp:                           prefix_expression -> expression -> Type() -> Name());
astGeneration/expr.cpp:            prefix_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (! control.IsNumeric(expression -> Type()))
astGeneration/expr.cpp:                           prefix_expression -> expression,
astGeneration/expr.cpp:                           expression -> Type() -> ContainingPackageName(),
astGeneration/expr.cpp:                           expression -> Type() -> ExternalName());
astGeneration/expr.cpp:            prefix_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        else if (! expression -> ArrayAccessCast()) // some kind of name
astGeneration/expr.cpp:            AstName* name = expression -> NameCast();
astGeneration/expr.cpp:                if (name -> resolution_opt)
astGeneration/expr.cpp:                       name -> resolution_opt -> symbol -> MethodCast();
astGeneration/expr.cpp:                if (field_access -> resolution_opt)
astGeneration/expr.cpp:                    read_method = field_access -> resolution_opt -> symbol ->
astGeneration/expr.cpp:                prefix_expression -> write_method =
astGeneration/expr.cpp:                    read_method -> containing_type ->
astGeneration/expr.cpp:    (this ->* ProcessPreUnaryExpr[prefix_expression -> Tag()])
astGeneration/expr.cpp:// method invocation - this includes identity and widening conversions.
astGeneration/expr.cpp:    if (source_type -> Primitive())
astGeneration/expr.cpp:        return target_type -> Primitive() &&
astGeneration/expr.cpp:    if (target_type -> Primitive())
astGeneration/expr.cpp:        source_type -> IsSubtype(target_type);
astGeneration/expr.cpp:        expr -> symbol == control.no_type ||
astGeneration/expr.cpp:        CanMethodInvocationConvert(target_type, expr -> Type()) ||
astGeneration/expr.cpp:    if (source_type -> Primitive())
astGeneration/expr.cpp:        return target_type -> Primitive() &&
astGeneration/expr.cpp:    if (target_type -> Primitive())
astGeneration/expr.cpp:        target_type -> IsSubtype(source_type) ||
astGeneration/expr.cpp:        source_type -> IsSubtype(target_type))
astGeneration/expr.cpp:    if (source_type -> IsArray() || target_type -> IsArray())
astGeneration/expr.cpp:        if (source_type -> num_dimensions != target_type -> num_dimensions)
astGeneration/expr.cpp:        source_type = source_type -> base_type;
astGeneration/expr.cpp:        target_type = target_type -> base_type;
astGeneration/expr.cpp:        if (source_type -> Primitive() || target_type -> Primitive())
astGeneration/expr.cpp:    if (source_type -> ACC_FINAL() || target_type -> ACC_FINAL() ||
astGeneration/expr.cpp:        (! source_type -> ACC_INTERFACE() && ! target_type -> ACC_INTERFACE()))
astGeneration/expr.cpp:    if (! source_type -> ACC_INTERFACE() || ! target_type -> ACC_INTERFACE())
astGeneration/expr.cpp:    if (! source_type -> expanded_method_table)
astGeneration/expr.cpp:    if (! target_type -> expanded_method_table)
astGeneration/expr.cpp:        source_type -> expanded_method_table;
astGeneration/expr.cpp:    for (i = 0; i < source_method_table -> symbol_pool.Length(); i++)
astGeneration/expr.cpp:            source_method_table -> symbol_pool[i] -> method_symbol;
astGeneration/expr.cpp:            target_type -> expanded_method_table ->
astGeneration/expr.cpp:            if (! method1 -> IsTyped())
astGeneration/expr.cpp:                method1 -> ProcessMethodSignature(this, tok);
astGeneration/expr.cpp:            MethodSymbol* method2 = method_shadow2 -> method_symbol;
astGeneration/expr.cpp:            if (! method2 -> IsTyped())
astGeneration/expr.cpp:                method2 -> ProcessMethodSignature(this, tok);
astGeneration/expr.cpp:            if (method1 -> Type() != method2 -> Type())
astGeneration/expr.cpp:    TypeSymbol* source_type = expr -> Type();
astGeneration/expr.cpp:        ! expr -> IsConstant())
astGeneration/expr.cpp:        assert(target_type == source_type || ! expr -> value);
astGeneration/expr.cpp:        return expr -> value;
astGeneration/expr.cpp:                DYNAMIC_CAST<DoubleLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            DoubleToString ieee_double(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<FloatLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            FloatToString ieee_float(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<LongLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            LongToString long_integer(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            literal_value = control.Utf8_pool.FindOrInsert(literal -> value);
astGeneration/expr.cpp:                literal_value = control.false_name_symbol -> Utf8_literal;
astGeneration/expr.cpp:                literal_value = control.true_name_symbol -> Utf8_literal;
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            IntToString integer(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<FloatLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.double_pool.FindOrInsert(literal -> value.DoubleValue());
astGeneration/expr.cpp:                DYNAMIC_CAST<LongLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            IEEEdouble value(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            IEEEdouble value(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<DoubleLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.float_pool.FindOrInsert(literal -> value.FloatValue());
astGeneration/expr.cpp:                DYNAMIC_CAST<LongLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            IEEEfloat value(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:            IEEEfloat value(literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<DoubleLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.long_pool.FindOrInsert(literal -> value.LongValue());
astGeneration/expr.cpp:                DYNAMIC_CAST<FloatLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.long_pool.FindOrInsert(literal -> value.LongValue());
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.long_pool.FindOrInsert((LongInt) literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<DoubleLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((literal -> value).IntValue());
astGeneration/expr.cpp:                DYNAMIC_CAST<FloatLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(literal -> value.IntValue());
astGeneration/expr.cpp:                DYNAMIC_CAST<LongLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (literal -> value).LowWord());
astGeneration/expr.cpp:        else literal_value = expr -> value;
astGeneration/expr.cpp:                DYNAMIC_CAST<DoubleLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (u2) (literal -> value.IntValue()));
astGeneration/expr.cpp:                DYNAMIC_CAST<FloatLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (u2) (literal -> value.IntValue()));
astGeneration/expr.cpp:                DYNAMIC_CAST<LongLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (u2) (literal -> value).LowWord());
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (u2) literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<DoubleLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (i2) (literal -> value.IntValue()));
astGeneration/expr.cpp:                DYNAMIC_CAST<FloatLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (i2) (literal -> value.IntValue()));
astGeneration/expr.cpp:                DYNAMIC_CAST<LongLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (i2) (literal -> value).LowWord());
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (i2) literal -> value);
astGeneration/expr.cpp:                DYNAMIC_CAST<DoubleLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (i1) (literal -> value.IntValue()));
astGeneration/expr.cpp:                DYNAMIC_CAST<FloatLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (i1) (literal -> value.IntValue()));
astGeneration/expr.cpp:                DYNAMIC_CAST<LongLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                                              (literal -> value).LowWord());
astGeneration/expr.cpp:                DYNAMIC_CAST<IntLiteralValue*> (expr -> value);
astGeneration/expr.cpp:                control.int_pool.FindOrInsert((i4) (i1) literal -> value);
astGeneration/expr.cpp:    // intermediate Strings - see CheckConstantString in lookup.cpp
astGeneration/expr.cpp:    ProcessType(cast_expression -> type);
astGeneration/expr.cpp:    ProcessExpression(cast_expression -> expression);
astGeneration/expr.cpp:    TypeSymbol* source_type = cast_expression -> expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* target_type = cast_expression -> type -> symbol;
astGeneration/expr.cpp:                       cast_expression -> right_parenthesis_token))
astGeneration/expr.cpp:        cast_expression -> symbol = target_type;
astGeneration/expr.cpp:        cast_expression -> value = CastValue(target_type,
astGeneration/expr.cpp:                                             cast_expression -> expression);
astGeneration/expr.cpp:                       cast_expression -> expression,
astGeneration/expr.cpp:                       source_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       source_type -> Name(),
astGeneration/expr.cpp:                       target_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       target_type -> Name());
astGeneration/expr.cpp:        cast_expression -> symbol = control.no_type;
astGeneration/expr.cpp:    TypeSymbol* source_type = expr -> Type();
astGeneration/expr.cpp:        source_type == control.no_type || target_type -> Bad())
astGeneration/expr.cpp:    TokenIndex loc = expr -> LeftToken();
astGeneration/expr.cpp:        compilation_unit -> ast_pool -> GenCastExpression();
astGeneration/expr.cpp:    result -> left_parenthesis_token = loc;
astGeneration/expr.cpp:    result -> type = NULL;
astGeneration/expr.cpp:    result -> right_parenthesis_token = loc;
astGeneration/expr.cpp:    result -> expression = expr;
astGeneration/expr.cpp:    result -> symbol = target_type;
astGeneration/expr.cpp:    result -> value = CastValue(target_type, expr);
astGeneration/expr.cpp:    TypeSymbol* type = unary_expression -> Type();
astGeneration/expr.cpp:                       type -> ContainingPackageName(),
astGeneration/expr.cpp:                       type -> ExternalName());
astGeneration/expr.cpp:        unary_expression -> symbol = control.no_type;
astGeneration/expr.cpp:    binary_expression -> symbol =
astGeneration/expr.cpp:        BinaryNumericPromotion(binary_expression -> left_expression,
astGeneration/expr.cpp:                               binary_expression -> right_expression);
astGeneration/expr.cpp:    AstExpression* left_expr = assignment_expression -> left_hand_side;
astGeneration/expr.cpp:    while (left_expr -> ParenthesizedExpressionCast())
astGeneration/expr.cpp:        left_expr = ((AstParenthesizedExpression*) left_expr) -> expression;
astGeneration/expr.cpp:        BinaryNumericPromotion(left_expr, assignment_expression -> expression);
astGeneration/expr.cpp:    assignment_expression -> left_hand_side = left_expr;
astGeneration/expr.cpp:        assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:    conditional_expression -> symbol =
astGeneration/expr.cpp:        BinaryNumericPromotion(conditional_expression -> true_expression,
astGeneration/expr.cpp:                               conditional_expression -> false_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = left_expr -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = right_expr -> Type();
astGeneration/expr.cpp:                           left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           left_type -> ExternalName());
astGeneration/expr.cpp:                           right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           right_type -> ExternalName());
astGeneration/expr.cpp:    assert(args -> NumArguments() == method -> NumFormalParameters());
astGeneration/expr.cpp:    for (unsigned i = 0; i < args -> NumArguments(); i++)
astGeneration/expr.cpp:        AstExpression* expr = args -> Argument(i);
astGeneration/expr.cpp:        if (expr -> Type() != method -> FormalParameter(i) -> Type())
astGeneration/expr.cpp:            args -> Argument(i) =
astGeneration/expr.cpp:                ConvertToType(expr, method -> FormalParameter(i) -> Type());
astGeneration/expr.cpp:    // intermediate Strings - see CheckConstantString in lookup.cpp
astGeneration/expr.cpp:    AstExpression* left = expr -> left_expression;
astGeneration/expr.cpp:    AstExpression* right = expr -> right_expression;
astGeneration/expr.cpp:    TypeSymbol* left_type = left -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = right -> Type();
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:            AddDependence(ThisType(), left_type -> BoxedType(control));
astGeneration/expr.cpp:                expr -> symbol = control.no_type;
astGeneration/expr.cpp:            else if (left_type == control.null_type || left -> IsConstant())
astGeneration/expr.cpp:                left -> value = CastValue(control.String(), left);
astGeneration/expr.cpp:                left -> symbol = control.String();
astGeneration/expr.cpp:            AddDependence(ThisType(), right_type -> BoxedType(control));
astGeneration/expr.cpp:                expr -> symbol = control.no_type;
astGeneration/expr.cpp:            else if (right_type == control.null_type || right -> IsConstant())
astGeneration/expr.cpp:                right -> value = CastValue(control.String(), right);
astGeneration/expr.cpp:                right -> symbol = control.String();
astGeneration/expr.cpp:        // constant pool instead of n-1 subresults. See CheckStringConstant
astGeneration/expr.cpp:        if (expr -> symbol != control.no_type)
astGeneration/expr.cpp:            expr -> symbol = control.String();
astGeneration/expr.cpp:        left = expr -> left_expression;
astGeneration/expr.cpp:        right = expr -> right_expression;
astGeneration/expr.cpp:        if (left -> IsConstant() && right -> IsConstant())
astGeneration/expr.cpp:            if (expr -> Type() == control.double_type)
astGeneration/expr.cpp:                    DYNAMIC_CAST<DoubleLiteralValue*> (left -> value);
astGeneration/expr.cpp:                    DYNAMIC_CAST<DoubleLiteralValue*> (right -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.double_pool.FindOrInsert(left_value -> value +
astGeneration/expr.cpp:                                                     right_value -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.float_type)
astGeneration/expr.cpp:                    DYNAMIC_CAST<FloatLiteralValue*> (left -> value);
astGeneration/expr.cpp:                    DYNAMIC_CAST<FloatLiteralValue*> (right -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.float_pool.FindOrInsert(left_value -> value +
astGeneration/expr.cpp:                                                    right_value -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                    DYNAMIC_CAST<LongLiteralValue*> (left -> value);
astGeneration/expr.cpp:                    DYNAMIC_CAST<LongLiteralValue*> (right -> value);
astGeneration/expr.cpp:                CheckIntegerAddition(this, expr, left_value -> value,
astGeneration/expr.cpp:                                     right_value -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.long_pool.FindOrInsert(left_value -> value +
astGeneration/expr.cpp:                                                   right_value -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                    DYNAMIC_CAST<IntLiteralValue*> (left -> value);
astGeneration/expr.cpp:                    DYNAMIC_CAST<IntLiteralValue*> (right -> value);
astGeneration/expr.cpp:                CheckIntegerAddition(this, expr, left_value -> value,
astGeneration/expr.cpp:                                     right_value -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.int_pool.FindOrInsert(left_value -> value +
astGeneration/expr.cpp:                                                  right_value -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                           expr -> left_expression,
astGeneration/expr.cpp:                           left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           left_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:        expr -> left_expression =
astGeneration/expr.cpp:            PromoteUnaryNumericExpression(expr -> left_expression);
astGeneration/expr.cpp:                           expr -> right_expression,
astGeneration/expr.cpp:                           right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           right_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:        expr -> right_expression = ConvertToType(expr -> right_expression,
astGeneration/expr.cpp:        if (expr -> symbol != control.no_type)
astGeneration/expr.cpp:            expr -> symbol = expr -> left_expression -> symbol;
astGeneration/expr.cpp:        ProcessShiftCount(left_type, expr -> right_expression);
astGeneration/expr.cpp:// with a negative or out-of-range shift count, so it's still valid code,
astGeneration/expr.cpp:    if (! expr -> IsConstant())
astGeneration/expr.cpp:    IntLiteralValue* literal = DYNAMIC_CAST<IntLiteralValue*>(expr -> value);
astGeneration/expr.cpp:    i4 count = literal -> value;
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value = control.long_pool.FindOrInsert(left -> value <<
astGeneration/expr.cpp:                                                           (right -> value &
astGeneration/expr.cpp:        else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value = control.int_pool.FindOrInsert(left -> value <<
astGeneration/expr.cpp:                                                          (right -> value &
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value = control.long_pool.FindOrInsert(left -> value >>
astGeneration/expr.cpp:                                                           (right -> value &
astGeneration/expr.cpp:        else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value = control.int_pool.FindOrInsert(left -> value >>
astGeneration/expr.cpp:                                                          (right -> value &
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value = control.long_pool.FindOrInsert((LongInt)
astGeneration/expr.cpp:                ((ULongInt) left -> value >> (right -> value & LONG_SHIFT_MASK)));
astGeneration/expr.cpp:        else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value = control.int_pool.FindOrInsert((i4)
astGeneration/expr.cpp:                ((u4) left -> value >> (right -> value & INT_SHIFT_MASK)));
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:    expr -> symbol = (left_type == control.no_type ||
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:    expr -> symbol = (left_type == control.no_type ||
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:    expr -> symbol = (left_type == control.no_type ||
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value <=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:    expr -> symbol = (left_type == control.no_type ||
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value >=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                               expr -> left_expression,
astGeneration/expr.cpp:                               left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:                               expr -> right_expression,
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        else expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:        if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:            expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:            expr -> value = control.int_pool
astGeneration/expr.cpp:                .FindOrInsert((IsConstantTrue(expr -> left_expression) &&
astGeneration/expr.cpp:                               IsConstantTrue(expr -> right_expression))
astGeneration/expr.cpp:        TypeSymbol* expr_type = expr -> Type();
astGeneration/expr.cpp:                               expr -> left_expression,
astGeneration/expr.cpp:                               left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName());
astGeneration/expr.cpp:                               expr -> right_expression,
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:            expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:                    (expr -> left_expression -> value);
astGeneration/expr.cpp:                    (expr -> right_expression -> value);
astGeneration/expr.cpp:                expr -> value = control.long_pool.FindOrInsert(left -> value &
astGeneration/expr.cpp:                                                               right -> value);
astGeneration/expr.cpp:                    (expr -> left_expression -> value);
astGeneration/expr.cpp:                    (expr -> right_expression -> value);
astGeneration/expr.cpp:                expr -> value = control.int_pool.FindOrInsert(left -> value &
astGeneration/expr.cpp:                                                              right -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                               expr -> left_expression,
astGeneration/expr.cpp:                               left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:                               expr -> right_expression,
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        else expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:        if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:            expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:            expr -> value = control.int_pool
astGeneration/expr.cpp:                .FindOrInsert((IsConstantTrue(expr -> left_expression) !=
astGeneration/expr.cpp:                               IsConstantTrue(expr -> right_expression))
astGeneration/expr.cpp:        TypeSymbol* expr_type = expr -> Type();
astGeneration/expr.cpp:                               expr -> left_expression,
astGeneration/expr.cpp:                               left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName());
astGeneration/expr.cpp:                               expr -> right_expression,
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:            expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:                    (expr -> left_expression -> value);
astGeneration/expr.cpp:                    (expr -> right_expression -> value);
astGeneration/expr.cpp:                expr -> value = control.long_pool.FindOrInsert(left -> value ^
astGeneration/expr.cpp:                                                               right -> value);
astGeneration/expr.cpp:                    (expr -> left_expression -> value);
astGeneration/expr.cpp:                    (expr -> right_expression -> value);
astGeneration/expr.cpp:                expr -> value = control.int_pool.FindOrInsert(left -> value ^
astGeneration/expr.cpp:                                                              right -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                               expr -> left_expression,
astGeneration/expr.cpp:                               left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:                               expr -> right_expression,
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        else expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:        if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:            expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:            expr -> value = control.int_pool
astGeneration/expr.cpp:                .FindOrInsert((IsConstantTrue(expr -> left_expression) ||
astGeneration/expr.cpp:                               IsConstantTrue(expr -> right_expression))
astGeneration/expr.cpp:        TypeSymbol* expr_type = expr -> Type();
astGeneration/expr.cpp:                               expr -> left_expression,
astGeneration/expr.cpp:                               left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName());
astGeneration/expr.cpp:                               expr -> right_expression,
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:            expr -> symbol = control.no_type;
astGeneration/expr.cpp:        if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:            expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:                    (expr -> left_expression -> value);
astGeneration/expr.cpp:                    (expr -> right_expression -> value);
astGeneration/expr.cpp:                expr -> value = control.long_pool.FindOrInsert(left -> value |
astGeneration/expr.cpp:                                                               right -> value);
astGeneration/expr.cpp:                    (expr -> left_expression -> value);
astGeneration/expr.cpp:                    (expr -> right_expression -> value);
astGeneration/expr.cpp:                expr -> value = control.int_pool.FindOrInsert(left -> value |
astGeneration/expr.cpp:                                                              right -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                           expr -> left_expression,
astGeneration/expr.cpp:                           left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           left_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:                           expr -> right_expression,
astGeneration/expr.cpp:                           right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           right_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        expr -> value = control.int_pool.
astGeneration/expr.cpp:            FindOrInsert((IsConstantTrue(expr -> left_expression) &&
astGeneration/expr.cpp:                          IsConstantTrue(expr -> right_expression))
astGeneration/expr.cpp:    if (expr -> symbol != control.no_type)
astGeneration/expr.cpp:        expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                           expr -> left_expression,
astGeneration/expr.cpp:                           left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           left_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:                           expr -> right_expression,
astGeneration/expr.cpp:                           right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           right_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        expr -> value = control.int_pool.
astGeneration/expr.cpp:            FindOrInsert((IsConstantTrue(expr -> left_expression) ||
astGeneration/expr.cpp:                          IsConstantTrue(expr -> right_expression))
astGeneration/expr.cpp:    if (expr -> symbol != control.no_type)
astGeneration/expr.cpp:        expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                           expr -> left_expression,
astGeneration/expr.cpp:                           left_type -> Name());
astGeneration/expr.cpp:                           expr -> right_expression,
astGeneration/expr.cpp:                           right_type -> Name());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    else if (left_type -> Primitive() && right_type -> Primitive())
astGeneration/expr.cpp:                               expr, left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName(),
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:                expr -> symbol = control.no_type;
astGeneration/expr.cpp:        if (expr -> symbol != control.no_type)
astGeneration/expr.cpp:            expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:                            expr -> binary_operator_token) ||
astGeneration/expr.cpp:               right_type -> IsSubclass(control.Object()))))
astGeneration/expr.cpp:        expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:                       expr, left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       left_type -> ExternalName(),
astGeneration/expr.cpp:                       right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       right_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        LiteralValue* left = expr -> left_expression -> value;
astGeneration/expr.cpp:        LiteralValue* right = expr -> right_expression -> value;
astGeneration/expr.cpp:        if (expr -> left_expression -> Type() == control.double_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value ==
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:        else if (expr -> left_expression -> Type() == control.float_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value ==
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:        else expr -> value =
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(expr -> right_expression);
astGeneration/expr.cpp:    TypeSymbol* left_type = expr -> left_expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = expr -> right_expression -> Type();
astGeneration/expr.cpp:                           expr -> left_expression,
astGeneration/expr.cpp:                           left_type -> Name());
astGeneration/expr.cpp:                           expr -> right_expression,
astGeneration/expr.cpp:                           right_type -> Name());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    else if (left_type -> Primitive() && right_type -> Primitive())
astGeneration/expr.cpp:                               expr, left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName(),
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:                expr -> symbol = control.no_type;
astGeneration/expr.cpp:        if (expr -> symbol != control.no_type)
astGeneration/expr.cpp:            expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:                            expr -> binary_operator_token) ||
astGeneration/expr.cpp:               right_type -> IsSubclass(control.Object()))))
astGeneration/expr.cpp:        expr -> symbol = control.boolean_type;
astGeneration/expr.cpp:                       expr, left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       left_type -> ExternalName(),
astGeneration/expr.cpp:                       right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       right_type -> ExternalName());
astGeneration/expr.cpp:        expr -> symbol = control.no_type;
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        LiteralValue* left = expr -> left_expression -> value;
astGeneration/expr.cpp:        LiteralValue* right = expr -> right_expression -> value;
astGeneration/expr.cpp:        if (expr -> left_expression -> Type() == control.double_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value !=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:        else if (expr -> left_expression -> Type() == control.float_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value !=
astGeneration/expr.cpp:                                              right -> value ? 1 : 0);
astGeneration/expr.cpp:        else expr -> value =
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        if (expr -> Type() == control.double_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.double_pool.FindOrInsert(left -> value *
astGeneration/expr.cpp:                                                 right -> value);
astGeneration/expr.cpp:        else if (expr -> Type() == control.float_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.float_pool.FindOrInsert(left -> value *
astGeneration/expr.cpp:                                                right -> value);
astGeneration/expr.cpp:        else if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:                                       left -> value, right -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.long_pool.FindOrInsert(left -> value *
astGeneration/expr.cpp:                                               right -> value);
astGeneration/expr.cpp:        else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:                                       left -> value, right -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value *
astGeneration/expr.cpp:                                              right -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    if (expr -> left_expression -> IsConstant() &&
astGeneration/expr.cpp:        expr -> right_expression -> IsConstant())
astGeneration/expr.cpp:        if (expr -> Type() == control.double_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.double_pool.FindOrInsert(left -> value -
astGeneration/expr.cpp:                                                 right -> value);
astGeneration/expr.cpp:        else if (expr -> Type() == control.float_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.float_pool.FindOrInsert(left -> value -
astGeneration/expr.cpp:                                                right -> value);
astGeneration/expr.cpp:        else if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            CheckIntegerSubtraction(this, expr, left -> value, right -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.long_pool.FindOrInsert(left -> value -
astGeneration/expr.cpp:                                               right -> value);
astGeneration/expr.cpp:        else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                (expr -> left_expression -> value);
astGeneration/expr.cpp:                (expr -> right_expression -> value);
astGeneration/expr.cpp:            CheckIntegerSubtraction(this, expr, left -> value, right -> value);
astGeneration/expr.cpp:            expr -> value =
astGeneration/expr.cpp:                control.int_pool.FindOrInsert(left -> value - right -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    AstExpression* left_expression = expr -> left_expression;
astGeneration/expr.cpp:    AstExpression* right_expression = expr -> right_expression;
astGeneration/expr.cpp:    if (right_expression -> IsConstant())
astGeneration/expr.cpp:        // If the type of the expression is int or long and the right-hand
astGeneration/expr.cpp:        if ((expr -> Type() == control.int_type &&
astGeneration/expr.cpp:             DYNAMIC_CAST<IntLiteralValue*> (right_expression -> value) -> value == 0) ||
astGeneration/expr.cpp:            (expr -> Type() == control.long_type &&
astGeneration/expr.cpp:             DYNAMIC_CAST<LongLiteralValue*> (right_expression -> value) -> value == 0))
astGeneration/expr.cpp:        else if (left_expression -> IsConstant())
astGeneration/expr.cpp:            if (expr -> Type() == control.double_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.double_pool.FindOrInsert(left -> value /
astGeneration/expr.cpp:                                                     right -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.float_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.float_pool.FindOrInsert(left -> value /
astGeneration/expr.cpp:                                                    right -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                CheckIntegerDivision(this, expr, left -> value,
astGeneration/expr.cpp:                                     right -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.long_pool.FindOrInsert(left -> value /
astGeneration/expr.cpp:                                                   right -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                CheckIntegerDivision(this, expr, left -> value,
astGeneration/expr.cpp:                                     right -> value);
astGeneration/expr.cpp:                // to compute ((2**32-1) / -1), he gets a ZeroDivide
astGeneration/expr.cpp:                // code below, we use the short-circuited one that follows:
astGeneration/expr.cpp:                //  expr -> value = control.int_pool
astGeneration/expr.cpp:                //      .FindOrInsert(left -> value / right -> value);
astGeneration/expr.cpp:                expr -> value = control.int_pool
astGeneration/expr.cpp:                    .FindOrInsert(right -> value == -1
astGeneration/expr.cpp:                                  ? -(left -> value)
astGeneration/expr.cpp:                                  : left -> value / right -> value);
astGeneration/expr.cpp:    ProcessExpression(expr -> left_expression);
astGeneration/expr.cpp:    ProcessExpression(expr -> right_expression);
astGeneration/expr.cpp:    AstExpression* left_expression = expr -> left_expression;
astGeneration/expr.cpp:    AstExpression* right_expression = expr -> right_expression;
astGeneration/expr.cpp:    if (right_expression -> IsConstant())
astGeneration/expr.cpp:        // If the type of the expression is int or long and the right-hand
astGeneration/expr.cpp:        if ((expr -> Type() == control.int_type &&
astGeneration/expr.cpp:             DYNAMIC_CAST<IntLiteralValue*> (right_expression -> value) -> value == 0) ||
astGeneration/expr.cpp:            (expr -> Type() == control.long_type &&
astGeneration/expr.cpp:             DYNAMIC_CAST<LongLiteralValue*> (right_expression -> value) -> value == 0))
astGeneration/expr.cpp:        else if (left_expression -> IsConstant())
astGeneration/expr.cpp:            if (expr -> Type() == control.double_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.double_pool.FindOrInsert(left -> value %
astGeneration/expr.cpp:                                                     right -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.float_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.float_pool.FindOrInsert(left -> value %
astGeneration/expr.cpp:                                                    right -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.long_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                expr -> value =
astGeneration/expr.cpp:                    control.long_pool.FindOrInsert(left -> value %
astGeneration/expr.cpp:                                                   right -> value);
astGeneration/expr.cpp:            else if (expr -> Type() == control.int_type)
astGeneration/expr.cpp:                    (left_expression -> value);
astGeneration/expr.cpp:                    (right_expression -> value);
astGeneration/expr.cpp:                // to compute ((2**32-1) / -1), he gets a ZeroDivide
astGeneration/expr.cpp:                // code below, we use the short-circuited one that follows:
astGeneration/expr.cpp:                // expr -> value = control.int_pool
astGeneration/expr.cpp:                //     .FindOrInsert(left -> value % right -> value);
astGeneration/expr.cpp:                expr -> value = control.int_pool
astGeneration/expr.cpp:                    .FindOrInsert((left -> value  == (signed) 0x80000000 &&
astGeneration/expr.cpp:                                   right -> value == (signed) 0xffffffff)
astGeneration/expr.cpp:                                  ? 0 : left -> value % right -> value);
astGeneration/expr.cpp:    (this ->* ProcessBinaryExpr[binary_expression -> Tag()])
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(instanceof -> expression);
astGeneration/expr.cpp:    ProcessType(instanceof -> type);
astGeneration/expr.cpp:    TypeSymbol* left_type = instanceof -> expression -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = instanceof -> type -> symbol;
astGeneration/expr.cpp:    if (left_type -> Primitive())
astGeneration/expr.cpp:                       instanceof -> expression,
astGeneration/expr.cpp:                       left_type -> Name());
astGeneration/expr.cpp:        instanceof -> symbol = control.no_type;
astGeneration/expr.cpp:                              instanceof -> instanceof_token))
astGeneration/expr.cpp:                       expr, left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       left_type -> ExternalName(),
astGeneration/expr.cpp:                       right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                       right_type -> ExternalName());
astGeneration/expr.cpp:        instanceof -> symbol = control.no_type;
astGeneration/expr.cpp:    else instanceof -> symbol = control.boolean_type;
astGeneration/expr.cpp:    ProcessExpression(conditional_expression -> test_expression);
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(conditional_expression ->
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(conditional_expression ->
astGeneration/expr.cpp:        conditional_expression -> test_expression -> Type();
astGeneration/expr.cpp:        conditional_expression -> true_expression -> Type();
astGeneration/expr.cpp:        conditional_expression -> false_expression -> Type();
astGeneration/expr.cpp:                           conditional_expression -> test_expression,
astGeneration/expr.cpp:                           test_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           test_type -> ExternalName());
astGeneration/expr.cpp:        conditional_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                       conditional_expression -> true_expression,
astGeneration/expr.cpp:                       true_type -> Name());
astGeneration/expr.cpp:                       conditional_expression -> false_expression,
astGeneration/expr.cpp:                       false_type -> Name());
astGeneration/expr.cpp:        conditional_expression -> symbol = control.no_type;
astGeneration/expr.cpp:    else if (true_type -> Primitive())
astGeneration/expr.cpp:        if (! false_type -> Primitive() ||
astGeneration/expr.cpp:                           conditional_expression -> true_expression -> LeftToken(),
astGeneration/expr.cpp:                           conditional_expression -> false_expression -> RightToken(),
astGeneration/expr.cpp:                           true_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           true_type -> ExternalName(),
astGeneration/expr.cpp:                           false_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           false_type -> ExternalName());
astGeneration/expr.cpp:            conditional_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                if (conditional_expression -> symbol != control.no_type)
astGeneration/expr.cpp:                    conditional_expression -> symbol = true_type;
astGeneration/expr.cpp:                    conditional_expression -> true_expression =
astGeneration/expr.cpp:                        ConvertToType(conditional_expression -> true_expression,
astGeneration/expr.cpp:                    conditional_expression -> symbol = control.short_type;
astGeneration/expr.cpp:                    conditional_expression -> false_expression =
astGeneration/expr.cpp:                        ConvertToType(conditional_expression -> false_expression,
astGeneration/expr.cpp:                    conditional_expression -> symbol = control.short_type;
astGeneration/expr.cpp:                         IsIntValueRepresentableInType(conditional_expression -> true_expression,
astGeneration/expr.cpp:                    conditional_expression -> true_expression =
astGeneration/expr.cpp:                        ConvertToType(conditional_expression -> true_expression,
astGeneration/expr.cpp:                    conditional_expression -> symbol = false_type;
astGeneration/expr.cpp:                         IsIntValueRepresentableInType(conditional_expression -> false_expression,
astGeneration/expr.cpp:                    conditional_expression -> false_expression =
astGeneration/expr.cpp:                        ConvertToType(conditional_expression -> false_expression,
astGeneration/expr.cpp:                    conditional_expression -> symbol = true_type;
astGeneration/expr.cpp:            if (conditional_expression -> true_expression -> IsConstant() &&
astGeneration/expr.cpp:                conditional_expression -> false_expression -> IsConstant())
astGeneration/expr.cpp:                if (IsConstantTrue(conditional_expression -> test_expression))
astGeneration/expr.cpp:                    conditional_expression -> value =
astGeneration/expr.cpp:                        conditional_expression -> true_expression -> value;
astGeneration/expr.cpp:                else if (IsConstantFalse(conditional_expression -> test_expression))
astGeneration/expr.cpp:                    conditional_expression -> value =
astGeneration/expr.cpp:                        conditional_expression -> false_expression -> value;
astGeneration/expr.cpp:                                 conditional_expression -> true_expression))
astGeneration/expr.cpp:            conditional_expression -> true_expression =
astGeneration/expr.cpp:                ConvertToType(conditional_expression -> true_expression,
astGeneration/expr.cpp:            conditional_expression -> symbol = false_type;
astGeneration/expr.cpp:                                      conditional_expression -> false_expression))
astGeneration/expr.cpp:            conditional_expression -> false_expression =
astGeneration/expr.cpp:                ConvertToType(conditional_expression -> false_expression,
astGeneration/expr.cpp:            conditional_expression -> symbol = true_type;
astGeneration/expr.cpp:                           conditional_expression -> true_expression -> LeftToken(),
astGeneration/expr.cpp:                           conditional_expression -> false_expression -> RightToken(),
astGeneration/expr.cpp:                           true_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           true_type -> ExternalName(),
astGeneration/expr.cpp:                           false_type -> ContainingPackageName(),
astGeneration/expr.cpp:                           false_type -> ExternalName());
astGeneration/expr.cpp:            conditional_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        // Since null should not be a compile-time constant, the assert
astGeneration/expr.cpp:        if (conditional_expression -> true_expression -> IsConstant() &&
astGeneration/expr.cpp:            conditional_expression -> false_expression -> IsConstant())
astGeneration/expr.cpp:            assert(conditional_expression -> symbol == control.String() ||
astGeneration/expr.cpp:                   conditional_expression -> symbol == control.no_type);
astGeneration/expr.cpp:            if (IsConstantTrue(conditional_expression -> test_expression))
astGeneration/expr.cpp:                conditional_expression -> value =
astGeneration/expr.cpp:                    conditional_expression -> true_expression -> value;
astGeneration/expr.cpp:            else if (IsConstantFalse(conditional_expression -> test_expression))
astGeneration/expr.cpp:                conditional_expression -> value =
astGeneration/expr.cpp:                    conditional_expression -> false_expression -> value;
astGeneration/expr.cpp:    ProcessExpressionOrStringConstant(assignment_expression -> expression);
astGeneration/expr.cpp:    AstExpression* left_hand_side = assignment_expression -> left_hand_side;
astGeneration/expr.cpp:    // ambiguities, and we must filter out invalid left-hand sides.
astGeneration/expr.cpp:    if (left_hand_side -> ParenthesizedExpressionCast())
astGeneration/expr.cpp:        while (left_hand_side -> ParenthesizedExpressionCast())
astGeneration/expr.cpp:            left_hand_side = ((AstParenthesizedExpression*) left_hand_side) ->
astGeneration/expr.cpp:    if ((assignment_expression -> Tag() ==
astGeneration/expr.cpp:        left_hand_side -> NameCast() &&
astGeneration/expr.cpp:        ! left_hand_side -> NameCast() -> base_opt)
astGeneration/expr.cpp:    if (! left_hand_side -> IsLeftHandSide())
astGeneration/expr.cpp:        left_hand_side -> symbol = control.no_type;
astGeneration/expr.cpp:        assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:    TypeSymbol* left_type = left_hand_side -> Type();
astGeneration/expr.cpp:    TypeSymbol* right_type = assignment_expression -> expression -> Type();
astGeneration/expr.cpp:                           assignment_expression -> expression,
astGeneration/expr.cpp:                           right_type -> Name());
astGeneration/expr.cpp:        assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:    assignment_expression -> symbol = left_type;
astGeneration/expr.cpp:    if (! left_hand_side -> ArrayAccessCast()) // the left-hand-side is a name
astGeneration/expr.cpp:        AstName* name = left_hand_side -> NameCast();
astGeneration/expr.cpp:        AstFieldAccess* field_access = left_hand_side -> FieldAccessCast();
astGeneration/expr.cpp:            if (name -> resolution_opt)
astGeneration/expr.cpp:                    name -> resolution_opt -> symbol -> MethodCast();
astGeneration/expr.cpp:            if (field_access -> resolution_opt)
astGeneration/expr.cpp:                    field_access -> resolution_opt -> symbol -> MethodCast();
astGeneration/expr.cpp:            assignment_expression -> write_method = read_method ->
astGeneration/expr.cpp:                containing_type -> GetWriteAccessFromReadAccess(read_method);
astGeneration/expr.cpp:    if (assignment_expression -> Tag() ==
astGeneration/expr.cpp:                                     assignment_expression -> expression))
astGeneration/expr.cpp:                assignment_expression -> expression =
astGeneration/expr.cpp:                    ConvertToType(assignment_expression -> expression,
astGeneration/expr.cpp:            else if (assignment_expression -> expression -> IsConstant() &&
astGeneration/expr.cpp:                                   assignment_expression -> expression);
astGeneration/expr.cpp:                                   assignment_expression -> expression);
astGeneration/expr.cpp:                                   assignment_expression -> expression);
astGeneration/expr.cpp:                assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                               left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               left_type -> ExternalName(),
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:                assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:        (assignment_expression -> Tag() ==
astGeneration/expr.cpp:                                assignment_expression -> expression);
astGeneration/expr.cpp:                 assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                assignment_expression -> expression -> value =
astGeneration/expr.cpp:                              assignment_expression -> expression);
astGeneration/expr.cpp:                if (assignment_expression -> expression -> IsConstant())
astGeneration/expr.cpp:                    assignment_expression -> expression -> symbol =
astGeneration/expr.cpp:    switch (assignment_expression -> Tag())
astGeneration/expr.cpp:                    assignment_expression -> expression;
astGeneration/expr.cpp:                if (right_expression -> IsConstant())
astGeneration/expr.cpp:                    if ((right_expression -> Type() == control.int_type &&
astGeneration/expr.cpp:                         (right_expression -> value) -> value == 0) ||
astGeneration/expr.cpp:                        (right_expression -> Type() == control.long_type &&
astGeneration/expr.cpp:                         (right_expression -> value) -> value == 0))
astGeneration/expr.cpp:            assignment_expression -> left_hand_side
astGeneration/expr.cpp:                if (assignment_expression -> left_hand_side -> symbol !=
astGeneration/expr.cpp:                                   assignment_expression -> left_hand_side,
astGeneration/expr.cpp:                                   left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                   left_type -> ExternalName());
astGeneration/expr.cpp:                assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                               assignment_expression -> expression,
astGeneration/expr.cpp:                               right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                               right_type -> ExternalName());
astGeneration/expr.cpp:                assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:            assignment_expression -> expression =
astGeneration/expr.cpp:                ConvertToType(assignment_expression -> expression,
astGeneration/expr.cpp:            ProcessShiftCount(left_type, assignment_expression -> expression);
astGeneration/expr.cpp:                                   assignment_expression -> expression,
astGeneration/expr.cpp:                                   right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                   right_type -> ExternalName());
astGeneration/expr.cpp:                    assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                                   left_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                   left_type -> ExternalName());
astGeneration/expr.cpp:                    assignment_expression -> symbol = control.no_type;
astGeneration/expr.cpp:                                   assignment_expression -> expression,
astGeneration/expr.cpp:                                   right_type -> ContainingPackageName(),
astGeneration/expr.cpp:                                   right_type -> ExternalName());
astGeneration/expr.cpp:                    assignment_expression -> symbol = control.no_type;
Binary file expr.o matches
gencode.java:                numElements--;
gencode.java:            for (int j = blkSize - 1; j > 0; j--)
gencode.java:                    String tail = str.substring(str.length() - j);
gencode.java:                        blockLen -= j;
gencode.java:                        blkNum--;
gencode.java:                            String tail = merge.substring(merge.length() - j);
gencode.java:            int estimate = blockLen + (info.length >> (i - 1));
gencode.java:            assert index != -1 : "Unexpected index for " + j;
gencode.java:            blocks[j >> bestShift] = (char) (index - j);
gencode.java:        hfile.println("    // with some self-explanatory functions defined on CODE.");
gencode.java:        hfile.println("        return (hi << 10) + lo + (0x10000 - (0xd800 << 10) - 0xdc00);");
gencode.java:        hfile.println("        return c - (c <= U_9 ? U_0 : c < U_a ? U_A - 10 : U_a - 10);");
gencode.java:        file.println("// $I" + /* CVS hack */ "d$ -*- c++ -*-");
gencode.java:        file.println("// DO NOT MODIFY THIS FILE - it is generated using gencode.java.");
astGeneration/incrmnt.cpp:        for (parent = (TypeSymbol*) type -> static_parents -> FirstElement();
astGeneration/incrmnt.cpp:             parent = (TypeSymbol*) type -> static_parents -> NextElement())
astGeneration/incrmnt.cpp:                parent -> dependents -> RemoveElement(type);
astGeneration/incrmnt.cpp:                parent -> subtypes -> RemoveElement(type);
astGeneration/incrmnt.cpp:        for (parent = (TypeSymbol*) type -> parents -> FirstElement();
astGeneration/incrmnt.cpp:             parent = (TypeSymbol*) type -> parents -> NextElement())
astGeneration/incrmnt.cpp:                parent -> dependents -> RemoveElement(type);
astGeneration/incrmnt.cpp:                parent -> subtypes -> RemoveElement(type);
astGeneration/incrmnt.cpp:        PackageSymbol* package = type -> ContainingPackage();
astGeneration/incrmnt.cpp:        FileSymbol* file_symbol = type -> file_symbol;
astGeneration/incrmnt.cpp:        if (file_symbol && type -> Identity() == file_symbol -> Identity())
astGeneration/incrmnt.cpp:        package -> DeleteTypeSymbol(type);
astGeneration/incrmnt.cpp:        = file_symbol -> Utf8NameLength() + FileSymbol::java_suffix_length;
astGeneration/incrmnt.cpp:    strcpy(java_name, file_symbol -> Utf8Name());
astGeneration/incrmnt.cpp:        = file_symbol -> directory_symbol -> FindEntry(java_name, length);
astGeneration/incrmnt.cpp:        if ((! file_symbol -> IsZip()) &&
astGeneration/incrmnt.cpp:                if (file_symbol -> IsJava())
astGeneration/incrmnt.cpp:            else if (java_entry -> Mtime() > file_symbol -> mtime)
astGeneration/incrmnt.cpp:                file_symbol -> mtime = java_entry -> Mtime();
astGeneration/incrmnt.cpp:    directory_symbol -> ResetDirectory();
astGeneration/incrmnt.cpp:    for (unsigned i = 0; i < directory_symbol -> subdirectories.Length(); i++)
astGeneration/incrmnt.cpp:        RereadDirectory(directory_symbol -> subdirectories[i]);
astGeneration/incrmnt.cpp:        if (! path_symbol -> IsZip())
astGeneration/incrmnt.cpp:            RereadDirectory(path_symbol -> RootDirectory());
astGeneration/incrmnt.cpp:        for (unsigned i = 0; i < file_symbol -> types.Length(); i++)
astGeneration/incrmnt.cpp:            input_types.Next() = file_symbol -> types[i];
astGeneration/incrmnt.cpp:            if (type -> dependents_closure)
astGeneration/incrmnt.cpp:                 dependents_closure.Union(*type -> dependents_closure);
astGeneration/incrmnt.cpp:            for (unsigned i = 0; i < file_symbol -> types.Length(); i++)
astGeneration/incrmnt.cpp:                TypeSymbol* type = file_symbol -> types[i];
astGeneration/incrmnt.cpp:                    if (type -> dependents_closure)
astGeneration/incrmnt.cpp:                        dependents_closure.Union(*type -> dependents_closure);
astGeneration/incrmnt.cpp:                file_symbol -> Reset();
astGeneration/incrmnt.cpp:                file_symbol -> SetJava();
astGeneration/incrmnt.cpp:                scanner -> Scan(file_symbol);
astGeneration/incrmnt.cpp:                LexStream* lex_stream = file_symbol -> lex_stream;
astGeneration/incrmnt.cpp:                        = parser -> PackageHeaderParse(lex_stream, ast_pool);
astGeneration/incrmnt.cpp:                                                 package_declaration -> name)
astGeneration/incrmnt.cpp:                    ast_pool -> Reset();
astGeneration/incrmnt.cpp:                    for (unsigned k = 0; k < lex_stream -> NumTypes(); k++)
astGeneration/incrmnt.cpp:                            = lex_stream -> Next(lex_stream -> Type(k));
astGeneration/incrmnt.cpp:                            lex_stream -> NameSymbol(identifier_token);
astGeneration/incrmnt.cpp:                                = package -> FindTypeSymbol(name_symbol);
astGeneration/incrmnt.cpp:                                if (type -> dependents_closure)
astGeneration/incrmnt.cpp:                                    dependents_closure.Union(*type -> dependents_closure);
astGeneration/incrmnt.cpp:            FileSymbol* file_symbol = type -> file_symbol;
astGeneration/incrmnt.cpp:                file_symbol -> mtime = 0; // to force a reread of the file.
astGeneration/incrmnt.cpp:        input_types[j] -> RemoveCompilationReferences();
astGeneration/incrmnt.cpp:        type -> index = TypeCycleChecker::OMEGA;
astGeneration/incrmnt.cpp:        type -> unit_index = TypeCycleChecker::OMEGA;
astGeneration/incrmnt.cpp:        type -> incremental_index = TypeCycleChecker::OMEGA;
astGeneration/incrmnt.cpp:        delete type -> dependents_closure;
astGeneration/incrmnt.cpp:        type -> dependents_closure = NULL;
astGeneration/Binary file incrmnt.o matches
astGeneration/init.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
astGeneration/init.cpp:    VariableSymbol* symbol = variable_declarator -> symbol;
astGeneration/init.cpp:    if (! variable_declarator -> variable_initializer_opt)
astGeneration/init.cpp:        symbol -> MarkInitialized();
astGeneration/init.cpp:    TypeSymbol* field_type = symbol -> Type();
astGeneration/init.cpp:        (AstExpression*) variable_declarator -> variable_initializer_opt;
astGeneration/init.cpp:    AstArrayInitializer* array_initializer = init -> ArrayInitializerCast();
astGeneration/init.cpp:        if (field_type != init -> Type() && init -> Type() != control.no_type)
astGeneration/init.cpp:                variable_declarator -> variable_initializer_opt = init;
astGeneration/init.cpp:            else if (init -> IsConstant() &&
astGeneration/init.cpp:                     control.IsSimpleIntegerValueType(init -> Type()) &&
astGeneration/init.cpp:                init -> value = NULL;
astGeneration/init.cpp:                               field_type -> ContainingPackageName(),
astGeneration/init.cpp:                               field_type -> ExternalName(),
astGeneration/init.cpp:                               init -> Type() -> ContainingPackageName(),
astGeneration/init.cpp:                               init -> Type() -> ExternalName());
astGeneration/init.cpp:                init -> value = NULL;
astGeneration/init.cpp:        if (symbol -> ACC_FINAL() &&
astGeneration/init.cpp:            (field_type -> Primitive() || field_type == control.String()))
astGeneration/init.cpp:            if (init -> IsConstant())
astGeneration/init.cpp:                symbol -> initial_value = init -> value;
astGeneration/init.cpp:            else if (symbol -> ACC_STATIC() && ThisType() -> IsInner())
astGeneration/init.cpp:                               lex_stream -> NameString(variable_declarator -> LeftToken()),
astGeneration/init.cpp:                               ThisType() -> Name(), ThisType() -> FileLoc());
astGeneration/init.cpp:    // A non-static final field initialized to a constant value wastes
astGeneration/init.cpp:    TypeSymbol* containing_type = symbol -> owner -> TypeCast();
astGeneration/init.cpp:    if (containing_type && ! containing_type -> ACC_INTERFACE() &&
astGeneration/init.cpp:        ! field_type -> IsArray() &&
astGeneration/init.cpp:        symbol -> ACC_FINAL() &&
astGeneration/init.cpp:        ! symbol -> ACC_STATIC() &&
astGeneration/init.cpp:        init && init -> IsConstant())
astGeneration/init.cpp:                       lex_stream ->
astGeneration/init.cpp:                           NameString(variable_declarator -> LeftToken()));
astGeneration/init.cpp:    symbol -> MarkInitialized();
astGeneration/init.cpp:    if (! type -> IsArray())
astGeneration/init.cpp:                       array_initializer, type -> Name());
astGeneration/init.cpp:             i < array_initializer -> NumVariableInitializers(); i++)
astGeneration/init.cpp:            AstArrayInitializer* sub_array_initializer = array_initializer ->
astGeneration/init.cpp:                VariableInitializer(i) -> ArrayInitializerCast();
astGeneration/init.cpp:            TypeSymbol* array_subtype = type -> ArraySubtype();
astGeneration/init.cpp:                AstExpression* init = (AstExpression*) array_initializer ->
astGeneration/init.cpp:                if (array_subtype != init -> Type())
astGeneration/init.cpp:                        array_initializer -> VariableInitializer(i) =
astGeneration/init.cpp:                    else if (array_subtype -> IsArray() &&
astGeneration/init.cpp:                             init -> Type() -> Primitive())
astGeneration/init.cpp:                                       init, array_subtype -> Name());
astGeneration/init.cpp:                    else if (init -> IsConstant() &&
astGeneration/init.cpp:                             control.IsSimpleIntegerValueType(init -> Type()) &&
astGeneration/init.cpp:                                       array_subtype -> ContainingPackageName(),
astGeneration/init.cpp:                                       array_subtype -> ExternalName(),
astGeneration/init.cpp:                                       init -> Type() -> ContainingPackageName(),
astGeneration/init.cpp:                                       init -> Type() -> ExternalName());
astGeneration/init.cpp:    AstVariableDeclarator* variable_declarator = variable -> declarator;
astGeneration/init.cpp:    assert(variable_declarator && variable -> ACC_FINAL());
astGeneration/init.cpp:    if (! variable -> IsInitialized())
astGeneration/init.cpp:        if (variable_declarator -> pending ||
astGeneration/init.cpp:            ! variable_declarator -> variable_initializer_opt)
astGeneration/init.cpp:            // Break loops, and ignore non-initialized fields.
astGeneration/init.cpp:            variable -> MarkInitialized();
astGeneration/init.cpp:        TypeSymbol* type = variable -> ContainingType();
astGeneration/init.cpp:        Semantic* sem = type -> semantic_environment -> sem;
astGeneration/init.cpp:        if (! sem -> error)
astGeneration/init.cpp:            sem -> error =
astGeneration/init.cpp:                new SemanticError(control, sem -> source_file_symbol);
astGeneration/init.cpp:        sem -> error -> EnteringClone();
astGeneration/init.cpp:        sem -> state_stack.Push(type -> semantic_environment);
astGeneration/init.cpp:        MethodSymbol* calling_method = sem -> ThisMethod();
astGeneration/init.cpp:        VariableSymbol* calling_var = sem -> ThisVariable();
astGeneration/init.cpp:        sem -> ThisMethod() = NULL;
astGeneration/init.cpp:        sem -> ThisVariable() = variable;
astGeneration/init.cpp:        variable_declarator -> pending = true;
astGeneration/init.cpp:        StoragePool pool(variable_declarator -> RightToken() -
astGeneration/init.cpp:                         variable_declarator -> LeftToken());
astGeneration/init.cpp:            variable_declarator -> Clone(&pool);
astGeneration/init.cpp:        clone -> symbol = variable;
astGeneration/init.cpp:        sem -> ProcessVariableInitializer(clone);
astGeneration/init.cpp:        assert(variable -> IsInitialized());
astGeneration/init.cpp:        variable_declarator -> pending = false;
astGeneration/init.cpp:        sem -> ThisMethod() = calling_method;
astGeneration/init.cpp:        sem -> ThisVariable() = calling_var;
astGeneration/init.cpp:        sem -> state_stack.Pop();
astGeneration/init.cpp:        sem -> error -> ExitingClone();
Binary file init.o matches
java.g:%options fp=java,escape=$,prefix=TK_,em,defer,output-size=125
java.g:%options hblockb=\:,hblocke=:\,nogoto-default,single-productions
java.g:-- $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
java.g:-- This software is subject to the terms of the IBM Jikes Compiler
java.g:-- License Agreement available at the following URL:
java.g:-- http://ibm.com/developerworks/opensource/jikes.
java.g:-- Copyright (C) 1996, 2004 IBM Corporation and others.  All Rights Reserved.
java.g:-- You must accept the terms of that agreement to use this software.
java.g:------------------------------------------------------------------------
java.g:--
java.g:--                               J A V A
java.g:--
java.g:-- This Java grammar started from the grammar defined in chapter 19 of the
java.g:-- first edition of the Java Language Specification manual.  It has since been
java.g:-- updated with several additional rules to cover additional language features,
java.g:-- as well as simplified in places where it makes sense to share code. Comments
java.g:-- are given where this grammar differs from the original. Note that the
java.g:-- second edition JLS grammar (chapter 18) is completely broken.  This grammar
java.g:-- is in JIKES PG format with semantic actions following each rule. In
java.g:-- specifying the rules, the symbols are enclosed in single quotes, and the
java.g:-- keywords are all caps, so that they can be quickly distinguished from
java.g:-- non-terminals. Optional symbols are suffixed with "opt" and the rules
java.g:-- expanding such definitions can be found at the end. Also, some syntactic
java.g:-- markers have been added to aid the parser in skipping irrelevant
java.g:-- components during different parse phases.
java.g:--
java.g:-- The file javaact.h produced by JIKESPG from this file (java.g) contains a
java.g:-- very readable definition of the grammar rules together with their
java.g:-- associated semantic actions. That file is marked with appropriate
java.g:-- location directives (automatically generated) which instructs the C++
java.g:-- compiler to issue error messages in terms of this file (java.g).
java.g:-- Therefore, though the user is encouraged to read javaact.h, no
java.g:-- change should ever be made to that file. Instead, changes should
java.g:-- always be made in this file and javaact.h should be regenerated
java.g:-- using JIKESPG.
java.g:--
java.g:------------------------------------------------------------------------
java.g:--
java.g:-- This macro generates a header for an action function consisting
java.g:-- of the rule in question (commented) and a location directive.
java.g:--
java.g:--
java.g:-- This macro is used to initialize the rule_action array
java.g:-- to an unnamed function. A name is generated using the
java.g:-- number of the rule in question.
java.g:--
java.g:--
java.g:-- These macros are used to initialize the rule_action array
java.g:-- to a specific named function.
java.g:--
java.g:--
java.g:-- This macro is used to initialize the rule_action array
java.g:-- to the NullAction function.
java.g:--
java.g:--
java.g:-- This macro is used to initialize the rule_action array
java.g:-- to the NoAction function.
java.g:--
java.g:--
java.g:-- This macro generates a header for a named action function that is
java.g:-- already defined and will be shared.
java.g:--
java.g:--
java.g:-- This macro generates a header for a rule that invokes the
java.g:-- no_function routine.
java.g:--
java.g:--
java.g:-- This macro generates a header for a rule that invokes the
java.g:-- null_function routine.
java.g:--
java.g:--
java.g:-- This macro generates a header for a rule that invokes the
java.g:-- StartList routine.
java.g:--
java.g:--
java.g:-- This macro generates a header for a rule that invokes the
java.g:-- AddList2 routine.
java.g:--
java.g:--
java.g:-- This macro generates a header for a rule that invokes the
java.g:-- AddList3 routine.
java.g:--
java.g:--
java.g:-- This macro generates a header for MakePreUnaryExpression.
java.g:--
java.g:--
java.g:-- This macro generates a header for MakeBinaryExpression.
java.g:--
java.g:-- This is a special token that allows us to do a 2-pass parse.
java.g:-- These tokens will be used in JDK 1.5, but are not used now.
java.g:-- These remaining tokens are not used in the grammar.
java.g:    '--'   ::= MINUS_MINUS
java.g:    '-='   ::= MINUS_EQUAL
java.g:    '-'    ::= MINUS
java.g:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
java.g:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
java.g:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
java.g:--18.2 Productions from 2.3: The syntactic Grammar
java.g:// Do nothing - Whatever Ast was produced for x1 is inherited by A.
java.g:// parse from accepting a body as a valid input - i.e., to recognize a body
java.g:// out-of-context, the BodyMarker terminal must be inserted in front of the
java.g:--18.3 Productions from 3: Lexical Structure
java.g:    Sym(1) = ast_pool -> NewIntegerLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewLongLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewFloatLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewDoubleLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewCharacterLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewStringLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewNullLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewTrueLiteral(Token(1));
java.g:    Sym(1) = ast_pool -> NewFalseLiteral(Token(1));
java.g:--18.4 Productions from 4: Types, Values and Variables
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::BOOLEAN, Token(1));
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::BYTE, Token(1));
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::SHORT, Token(1));
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::INT, Token(1));
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::LONG, Token(1));
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::CHAR, Token(1));
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::FLOAT, Token(1));
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::DOUBLE, Token(1));
java.g:--
java.g:-- Added rule to make parsing 'void' easier.
java.g:--
java.g:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::VOID_TYPE, Token(1));
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--ClassOrInterfaceType ::= ClassType
java.g:--ClassOrInterfaceType ::= InterfaceType
java.g:--ClassType ::= Name
java.g:--InterfaceType ::= Name
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- Use of Marker allows us to easily find the closing '>'.
java.g:--
java.g:    AstTypeName* p = Sym(tokennum) -> NameCast()
java.g:        ? ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(tokennum)))
java.g:        ast_pool -> NewTypeArguments(Token(tokennum + 1),
java.g:                                     Token(tokennum + 3) - 1);
java.g:    q -> AllocateTypeArguments(tail -> index + 1);
java.g:        root = root -> next;
java.g:        q -> AddTypeArgument(DYNAMIC_CAST<AstType*> (root -> element));
java.g:    p -> type_arguments_opt = q;
java.g:    AstTypeName* p = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(1)));
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:    AstTypeName* p = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(5)));
java.g:    p -> base_opt = MakeTypeArguments(1);
java.g:--
java.g:-- These rules have been rewritten to avoid some conflicts introduced
java.g:-- by adding the 1.1 features, and to simplify syntax tree generation.
java.g:--
java.g:-- JLS1 lists:
java.g:--ArrayType ::= PrimitiveType '[' ']'
java.g:--ArrayType ::= Name '[' ']'
java.g:--ArrayType ::= ArrayType '[' ']'
java.g:-- JLS2 lists:
java.g:--ArrayType ::= Type '[' ']'
java.g:--
java.g:    AstType* p = Sym(tokennum) -> NameCast()
java.g:        ? ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(tokennum)))
java.g:        : ast_pool -> NewArrayType(p, (DYNAMIC_CAST<AstBrackets*>
java.g:--ArrayType ::= ClassOrInterfaceType Dims
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:    AstTypeName* p = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(5)));
java.g:    p -> base_opt = MakeTypeArguments(1);
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Simplify the syntax tree.
java.g:--
java.g:--ClassType ::= ClassOrInterfaceType
java.g:--InterfaceType ::= ClassOrInterfaceType
java.g:--18.5 Productions from 6: Names
java.g:    AstName* name = ast_pool -> NewName(Token(tokennum));
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--Name ::= Name '.' 'Identifier'
java.g:    AstName* p = ast_pool -> NewName(Token(4));
java.g:    p -> base_opt = DYNAMIC_CAST<AstName*> (Sym(1));
java.g:--18.6 Productions from 7: Packages
java.g:--
java.g:-- Annotations were added in JSR 175. As a result, we must inline expand
java.g:-- PackageDeclaration vs. TypeDeclaration in order to resolve the ambiguity
java.g:-- between '@A' starting '@A package B;' vs. '@A B{}'.
java.g:--
java.g:--CompilationUnit ::= PackageDeclarationopt ImportDeclarationsopt
java.g:--                    TypeDeclarationsopt
java.g:    AstCompilationUnit* p = ast_pool -> NewCompilationUnit();
java.g:    p -> package_declaration_opt =
java.g:        p -> AllocateImportDeclarations(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddImportDeclaration(DYNAMIC_CAST<AstImportDeclaration*>
java.g:                                      (root -> element));
java.g:        p -> AllocateTypeDeclarations(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddTypeDeclaration(DYNAMIC_CAST<AstDeclaredType*>
java.g:                                    (root -> element));
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- See comments above why this is inline expanded.
java.g:--
java.g:    p -> next = p;
java.g:    p -> element = Sym(1);
java.g:    p -> index = 0;
java.g:    p -> element = Sym(2);
java.g:    p -> index = tail -> index + 1;
java.g:    p -> next = tail -> next;
java.g:    tail -> next = p;
java.g:    p -> element = Sym(3);
java.g:    p -> index = tail -> index + 1;
java.g:    p -> next = tail -> next;
java.g:    tail -> next = p;
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--PackageDeclaration ::= 'package' Name PackageHeaderMarker ';'
java.g:    AstPackageDeclaration* p = ast_pool -> NewPackageDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> package_token = Token(2);
java.g:    p -> name = DYNAMIC_CAST<AstName*> (Sym(3));
java.g:    p -> semicolon_token = Token(5);
java.g:    AstModifiers* p = ast_pool -> NewModifiers();
java.g:    p -> AllocateModifiers(tail -> index + 1);
java.g:        root = root -> next;
java.g:        if (root -> element -> ModifierKeywordCast())
java.g:            AstModifierKeyword* mod = (AstModifierKeyword*) root -> element;
java.g:            p -> AddModifier(mod);
java.g:            if (lex_stream -> Kind(mod -> modifier_token) == TK_static)
java.g:                p -> static_token_opt = mod -> modifier_token;
java.g:        else p -> AddModifier(DYNAMIC_CAST<AstAnnotation*> (root -> element));
java.g:--
java.g:-- Annotations were added in JSR 175. We must use Modifiers with a semantic
java.g:-- check that no modifier keywords appeared, because of the ambiguity between
java.g:-- '@A @B' starting '@A @B package C;' or '@A @B class C{}'.
java.g:--
java.g:--
java.g:-- Static imports were added in JSR 201.
java.g:--
java.g:--
java.g:-- Static imports were added in JSR 201.
java.g:--
java.g:--
java.g:-- Note that semantically, Name must be qualified to be valid (since simple
java.g:-- type names are not in scope). However, the grammar accepts simple names.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--SingleTypeImportDeclaration ::= 'import' TypeName ';'
java.g:    AstImportDeclaration* p = ast_pool -> NewImportDeclaration();
java.g:    p -> import_token = Token(1);
java.g:        p -> static_token_opt = Token(2);
java.g:    p -> name = DYNAMIC_CAST<AstName*> (Sym(3));
java.g:        p -> star_token_opt = Token(5);
java.g:    p -> semicolon_token = Token(6);
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--TypeImportOnDemandDeclaration ::= 'import' PackageOrTypeName '.' '*' ';'
java.g:--
java.g:-- Static imports were added in JSR 201.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--SingleStaticImportDeclaration ::= 'import' 'static' TypeName '.'
java.g:--                                  'Identifier' ';'
java.g:--
java.g:-- Static imports were added in JSR 201.
java.g:--
java.g:--StaticImportOnDemandDeclaration ::= 'import' 'static' TypeName '.' '*' ';'
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:    Sym(1) = ast_pool -> NewEmptyDeclaration(Token(1));
java.g:--18.7 Only in the LALR(1) Grammar
java.g:-- Remember that we do semantic filtering on modifiers, for every context
java.g:-- they can appear in. For better error messages, we also accept all modifiers
java.g:-- for initializer blocks, formal parameters, and local variable declarations.
java.g:--
java.g:--ClassModifiers ::= Modifiers
java.g:--FieldModifiers ::= Modifiers
java.g:--MethodModifiers ::= Modifiers
java.g:--ConstructorModifiers ::= Modifiers
java.g:--InterfaceModifiers ::= Modifiers
java.g:--ConstantModifiers ::= Modifiers
java.g:--AbstractMethodModifiers ::= Modifiers
java.g:    Sym(1) = ast_pool -> NewModifierKeyword(Token(1));
java.g:--
java.g:-- Annotations were added in JSR 175. They are valid anywhere a modifier is,
java.g:-- additionally they are valid on package declarations.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--NormalAnnotation ::= '@' TypeName '(' MemberValuePairsopt ')'
java.g:    AstAnnotation* p = ast_pool -> NewAnnotation();
java.g:    p -> at_token = Token(1);
java.g:    p -> name = DYNAMIC_CAST<AstName*> (Sym(2));
java.g:        p -> AllocateMemberValuePairs(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddMemberValuePair(DYNAMIC_CAST<AstMemberValuePair*>
java.g:                                    (root -> element));
java.g:        p -> right_paren_token_opt = Token(5);
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175. We got rid of SimpleName.
java.g:--
java.g:--MemberValuePair ::= SimpleName '=' MemberValue
java.g:    AstMemberValuePair* p = ast_pool -> NewMemberValuePair();
java.g:    p -> identifier_token_opt = Token(1);
java.g:    p -> member_value = DYNAMIC_CAST<AstMemberValue*> (Sym(3));
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175. The rule was expanded inline below to
java.g:-- make the grammar LALR(1). The use of Marker allows us to share code.
java.g:--
java.g:--MemberValueArrayInitializer ::= '{' MemberValuesopt ,opt '}'
java.g:    AstArrayInitializer* p = ast_pool -> NewArrayInitializer();
java.g:    p -> left_brace_token = Token(1);
java.g:        p -> AllocateVariableInitializers(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddVariableInitializer(DYNAMIC_CAST<AstMemberValue*>
java.g:                                        (root -> element));
java.g:    p -> right_brace_token = Token(4);
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--MarkerAnnotation ::= '@' TypeName
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--SingleMemberAnnotation ::= '@' TypeName '(' MemberValue ')'
java.g:    AstMemberValuePair* mvp = ast_pool -> NewMemberValuePair();
java.g:    mvp -> member_value = DYNAMIC_CAST<AstMemberValue*> (Sym(4));
java.g:    p -> next = p;
java.g:    p -> element = mvp;
java.g:    p -> index = 0;
java.g:--18.8 Productions from 8: Class Declarations
java.g:--18.8.1 Productions from 8.1: Class Declarations
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--ClassDeclaration ::= ClassModifiersopt 'class' 'Identifier' Superopt
java.g:--                     Interfacesopt ClassBody
java.g:    AstClassDeclaration* p = ast_pool -> NewClassDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> class_token = Token(2);
java.g:    p -> type_parameters_opt = MakeTypeParameters(4);
java.g:    p -> super_opt = DYNAMIC_CAST<AstTypeName*> (Sym(5));
java.g:        p -> AllocateInterfaces(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddInterface(DYNAMIC_CAST<AstTypeName*> (root -> element));
java.g:    p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(7));
java.g:    p -> class_body -> identifier_token = Token(3);
java.g:    p -> class_body -> owner = p;
java.g:    AstTypeParameters* p = ast_pool -> NewTypeParameters();
java.g:    p -> AllocateTypeParameters(tail -> index + 1);
java.g:        root = root -> next;
java.g:        p -> AddTypeParameter(DYNAMIC_CAST<AstTypeParameter*>
java.g:                              (root -> element));
java.g:    p -> right_angle_token = Token(tokennum + 1) - 1;
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--Super ::= 'extends' ClassType
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--Interfaces ::= 'implements' InterfaceTypeList
java.g:--InterfaceTypeList ::= InterfaceType
java.g:--ClassTypeList ::= ClassType
java.g:--InterfaceTypeList ::= InterfaceTypeList ',' InterfaceType
java.g:--ClassTypeList ::= ClassTypeList ',' ClassType
java.g:    AstClassBody* p = ast_pool -> NewClassBody();
java.g:        p -> MarkUnparsed();
java.g:    p -> left_brace_token = Token(1);
java.g:        p -> AllocateClassBodyDeclarations(tail -> index + 1);
java.g:            root = root -> next;
java.g:                DYNAMIC_CAST<AstDeclared*> (root -> element);
java.g:                declaration -> FieldDeclarationCast();
java.g:                declaration -> InitializerDeclarationCast();
java.g:                if (field_declaration -> modifiers_opt &&
java.g:                    field_declaration -> modifiers_opt -> static_token_opt)
java.g:                    field_declaration -> MarkStatic();
java.g:                if (field_declaration -> StaticFieldCast())
java.g:            else if (declaration -> MethodDeclarationCast())
java.g:            else if (declaration -> ConstructorDeclarationCast())
java.g:                if (initializer -> modifiers_opt &&
java.g:                    initializer -> modifiers_opt -> static_token_opt)
java.g:                    initializer -> MarkStatic();
java.g:            else if (declaration -> ClassDeclarationCast())
java.g:            else if (declaration -> EnumDeclarationCast())
java.g:            else if (declaration -> InterfaceDeclarationCast())
java.g:            else if (declaration -> AnnotationDeclarationCast())
java.g:        p -> AllocateInstanceVariables(num_instance_variables);
java.g:        p -> AllocateClassVariables(num_class_variables);
java.g:        p -> AllocateMethods(num_methods);
java.g:        p -> AllocateConstructors(num_constructors);
java.g:        p -> AllocateStaticInitializers(num_static_initializers);
java.g:        p -> AllocateInstanceInitializers(num_instance_initializers);
java.g:        p -> AllocateNestedClasses(num_inner_classes);
java.g:        p -> AllocateNestedEnums(num_inner_enums);
java.g:        p -> AllocateNestedInterfaces(num_inner_interfaces);
java.g:        p -> AllocateNestedAnnotations(num_inner_annotations);
java.g:        p -> AllocateEmptyDeclarations(num_empty_declarations);
java.g:            root = root -> next;
java.g:            p -> AddClassBodyDeclaration(DYNAMIC_CAST<AstDeclared*>
java.g:                                         (root -> element));
java.g:    p -> right_brace_token = Token(3);
java.g:    p -> pool = body_pool;
java.g:--
java.g:-- Simplify. See below.
java.g:--
java.g:--ClassBodyDeclaration ::= ClassMemberDeclaration
java.g:--
java.g:-- For nicer semantic error messages, we lump static and instance initializers
java.g:-- together. Also, we parse arbitrary modifiers, but semantically only accept
java.g:-- static or no modifiers.
java.g:--
java.g:--ClassBodyDeclaration ::= StaticInitializer
java.g:--ClassBodyDeclaration ::= MethodBody
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--ClassMemberDeclaration ::= FieldDeclaration
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--ClassMemberDeclaration ::= MethodDeclaration
java.g:--1.1 feature
java.g:--
java.g:-- Consolidate and simplify.
java.g:--ClassMemberDeclaration ::= ClassDeclaration
java.g:--ClassMemberDeclaration ::= InterfaceDeclaration
java.g:--ClassMemberDeclaration ::= ';'
java.g:--
java.g:--18.8.2 Productions from 8.3: Field Declarations
java.g:--
java.g:-- The use of Marker allows us to share code.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--FieldDeclaration ::= FieldModifiersopt Type VariableDeclarators ';'
java.g:    AstFieldDeclaration* p = ast_pool -> NewFieldDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
java.g:    p -> AllocateVariableDeclarators(tail -> index + 1);
java.g:        root = root -> next;
java.g:        p -> AddVariableDeclarator(DYNAMIC_CAST<AstVariableDeclarator*>
java.g:                                   (root -> element));
java.g:    p -> semicolon_token = Token(5);
java.g:    AstVariableDeclarator* p = ast_pool -> NewVariableDeclarator();
java.g:    p -> variable_declarator_name =
java.g:    AstVariableDeclarator* p = ast_pool -> NewVariableDeclarator();
java.g:    p -> variable_declarator_name =
java.g:    p -> variable_initializer_opt = Sym(3);
java.g:    AstVariableDeclaratorId* p = ast_pool -> NewVariableDeclaratorId();
java.g:    p -> identifier_token = Token(1);
java.g:    p -> brackets_opt = DYNAMIC_CAST<AstBrackets*> (Sym(2));
java.g:--18.8.3 Productions from 8.4: Method Declarations
java.g:--
java.g:-- We use "MethodHeaderMarker" to speed up parsing while minimizing memory.
java.g:-- During the first pass, we only care about declarations, so we skip
java.g:-- everything inside { }. On the second pass, we parse only one method at a
java.g:-- time (see the production of Goal above).
java.g:--
java.g:-- Also, we expanded MethodBody inline to enable the sharing of MethodBody
java.g:-- between methods, constructors, and initializers. Note that MethodBody
java.g:-- can support an explicit constructor call; so it requires semantic filtering.
java.g:--
java.g:--MethodDeclaration ::= MethodHeader MethodBody
java.g:        p -> method_body_opt = DYNAMIC_CAST<AstMethodBody*> (Sym(3));
java.g:    else p -> semicolon_token_opt = Token(4);
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- The use of Marker allows us to share code.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--MethodHeader ::= MethodModifiersopt Type MethodDeclarator Throwsopt
java.g:    AstMethodDeclaration* p = ast_pool -> NewMethodDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> type_parameters_opt = MakeTypeParameters(2);
java.g:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
java.g:    p -> method_declarator = DYNAMIC_CAST<AstMethodDeclarator*> (Sym(4));
java.g:        p -> AllocateThrows(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddThrow(DYNAMIC_CAST<AstTypeName*> (root -> element));
java.g:--
java.g:-- The use of Marker allows us to share code.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--MethodHeader ::= MethodModifiersopt Type MethodDeclarator Throwsopt
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--
java.g:-- The use of Marker allows us to share code.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--MethodHeader ::= MethodModifiersopt 'void' MethodDeclarator Throwsopt
java.g:--
java.g:-- The use of Marker allows us to share code.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--MethodHeader ::= Modifiersopt 'void' MethodDeclarator Throwsopt
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:    AstMethodDeclarator* p = ast_pool -> NewMethodDeclarator();
java.g:    p -> identifier_token = Token(1);
java.g:    p -> left_parenthesis_token = Token(2);
java.g:        p -> AllocateFormalParameters(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddFormalParameter(DYNAMIC_CAST<AstFormalParameter*>
java.g:                                    (root -> element));
java.g:    p -> right_parenthesis_token = Token(4);
java.g:    p -> brackets_opt = DYNAMIC_CAST<AstBrackets*> (Sym(5));
java.g:--
java.g:-- Varargs were added in JSR 201.
java.g:--
java.g:--FormalParameterList ::= FormalParameter
java.g:--
java.g:-- Varargs were added in JSR 201.
java.g:--
java.g:--FormalParameterList ::= FormalParameterList ',' FormalParameter
java.g:--
java.g:-- Varargs were added in JSR 201.
java.g:--
java.g:--
java.g:-- Varargs were added in JSR 201.
java.g:--
java.g:--
java.g:-- For nicer error messages, we accept all modifiers, even though only
java.g:-- 'final' and annotations are valid. Also, we must inline expand finalopt
java.g:-- to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--FormalParameter ::= finalopt Type VariableDeclaratorId
java.g:    AstFormalParameter* p = ast_pool -> NewFormalParameter();
java.g:        p -> modifiers_opt = MakeModifiers();
java.g:        p -> type = DYNAMIC_CAST<AstType*> (Sym(2));
java.g:    else p -> type = DYNAMIC_CAST<AstType*> (Sym(1));
java.g:        p -> ellipsis_token_opt = Token(3);
java.g:        ast_pool -> NewVariableDeclarator();
java.g:    formal_declarator -> variable_declarator_name =
java.g:    p -> formal_declarator = formal_declarator;
java.g:--1.1 feature
java.g:--
java.g:-- For nicer error messages, we accept all modifiers, even though only
java.g:-- 'final' and annotations are valid. Also, we must inline expand finalopt
java.g:-- to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--FormalParameter ::= final Type VariableDeclaratorId
java.g:--
java.g:-- Varargs were added in JSR 201. We must match the inline expansion of
java.g:-- FormalParameter to avoid ambiguity.
java.g:--
java.g:--LastFormalParameter ::= Modifiersopt Type ...opt VariableDeclaratorId
java.g:--
java.g:-- Varargs were added in JSR 201. The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Varargs were added in JSR 201.
java.g:-- For nicer error messages, we accept all modifiers, even though only
java.g:-- 'final' and annotations are valid.
java.g:--
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--Throws ::= 'throws' ClassTypeList
java.g:--
java.g:-- Notice that we filter out an initial explicit constructor invocation,
java.g:-- since we have modified Statement to include this() and super(). Other
java.g:-- explicit constructor calls are ignored now, and flagged as errors
java.g:-- during semantic analysis.
java.g:--
java.g:    AstMethodBody* p = ast_pool -> NewMethodBody();
java.g:    p -> left_brace_token = Token(1);
java.g:    p -> right_brace_token = Token(3);
java.g:        p -> AllocateStatements(tail -> index + 2);
java.g:        AstListNode* root = tail -> next;
java.g:        if (root -> element -> IsExplicitConstructorInvocation())
java.g:            p -> explicit_constructor_opt =
java.g:                DYNAMIC_CAST<AstStatement*> (root -> element);
java.g:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
java.g:            root = root -> next;
java.g:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
java.g:    else p -> AllocateStatements(1);
java.g:--
java.g:-- Instead of directly including this rule, we have expanded it inline above.
java.g:--
java.g:--MethodBody ::= ';'
java.g:--
java.g:--18.8.4 Productions from 8.5: Static Initializers
java.g:--
java.g:-- For nicer error messages, we accept arbitrary modifiers. Thus this rule can
java.g:-- parse static and instance initializers. The use of MethodHeaderMarker
java.g:-- allows the 2-pass parsing. See comments of MethodDeclaration.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--StaticInitializer ::= 'static' MethodBody
java.g:    AstInitializerDeclaration* p = ast_pool -> NewInitializerDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> block = DYNAMIC_CAST<AstMethodBody*> (Sym(3));
java.g:-- For nicer error messages, we accept arbitrary modifiers. Thus this rule can
java.g:-- parse static and instance initializers. The use of MethodHeaderMarker
java.g:-- allows the 2-pass parsing. See comments of MethodDeclaration.
java.g:--
java.g:--18.8.5 Productions from 8.6: Constructor Declarations
java.g:--
java.g:-- The use of Marker allows us to share code. MethodHeaderMarker allows us to
java.g:-- do 2-pass parsing, and MethodBody was rewritten to handle constructor
java.g:-- bodies. We must inline expand Modifiersopt to avoid ambiguity.
java.g:--
java.g:--ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator
java.g:--                           Throwsopt ConstructorBody
java.g:    AstConstructorDeclaration* p = ast_pool -> NewConstructorDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> type_parameters_opt = MakeTypeParameters(2);
java.g:    p -> constructor_declarator = DYNAMIC_CAST<AstMethodDeclarator*> (Sym(3));
java.g:        p -> AllocateThrows(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddThrow(DYNAMIC_CAST<AstTypeName*> (root -> element));
java.g:    p -> constructor_body = DYNAMIC_CAST<AstMethodBody*> (Sym(6));
java.g:--
java.g:-- The use of Marker allows us to share code. MethodHeaderMarker allows us to
java.g:-- do 2-pass parsing, and MethodBody was rewritten to handle constructor
java.g:-- bodies. We must inline expand Modifiersopt to avoid ambiguity.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator
java.g:--                           Throwsopt ConstructorBody
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--
java.g:-- The use of Marker allows us to share code. Also, we got rid of SimpleName.
java.g:--
java.g:--ConstructorDeclarator ::= SimpleName '(' FormalParameterListopt ')'
java.g:--
java.g:-- For better error reporting, we have coalesced ExplicitConstructorInvocation
java.g:-- into BlockStatement. Therefore, we do not need a rule for ConstructorBody,
java.g:-- since MethodBody does the same amount of work. During semantic analysis,
java.g:-- we then check calls of an explicit constructor invocation out of context.
java.g:--
java.g:--ConstructorBody ::= '{' ExplicitConstructorInvocationopt
java.g:--                    BlockStatementsopt '}'
java.g:--
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--ExplicitConstructorInvocation ::= 'this' '(' ArgumentListopt ')' ';'
java.g:    AstThisCall* p = ast_pool -> NewThisCall();
java.g:    p -> this_token = Token(1);
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(2));
java.g:    p -> semicolon_token = Token(3);
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:    AstThisCall* p = ast_pool -> NewThisCall();
java.g:    p -> type_arguments_opt = MakeExplicitTypeArguments(1);
java.g:    p -> this_token = Token(2);
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(3));
java.g:    p -> semicolon_token = Token(4);
java.g:        ast_pool -> NewTypeArguments(Token(tokennum),
java.g:                                     Token(tokennum + 1) - 1);
java.g:    p -> AllocateTypeArguments(tail -> index + 1);
java.g:        root = root -> next;
java.g:        p -> AddTypeArgument(DYNAMIC_CAST<AstType*> (root -> element));
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--ExplicitConstructorInvocation ::= 'super' '(' ArgumentListopt ')' ';'
java.g:    AstSuperCall* p = ast_pool -> NewSuperCall();
java.g:    p -> super_token = Token(1);
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(2));
java.g:    p -> semicolon_token = Token(3);
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:    AstSuperCall* p = ast_pool -> NewSuperCall();
java.g:    p -> type_arguments_opt = MakeExplicitTypeArguments(1);
java.g:    p -> super_token = Token(2);
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(3));
java.g:    p -> semicolon_token = Token(4);
java.g:--1.1 feature
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--ExplicitConstructorInvocation ::= Primary '.' 'super' '(' ArgumentListopt ')'
java.g:--                                  ';'
java.g:    AstSuperCall* p = ast_pool -> NewSuperCall();
java.g:    p -> base_opt = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> type_arguments_opt = MakeExplicitTypeArguments(3);
java.g:    p -> super_token = Token(4);
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(5));
java.g:    p -> semicolon_token = Token(6);
java.g:--1.1 feature
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--ExplicitConstructorInvocation ::= Name '.' 'super' '(' ArgumentListopt ')'
java.g:--                                  ';'
java.g:--1.1 feature
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--ExplicitConstructorInvocation ::= Name '.' 'super' '(' ArgumentListopt ')'
java.g:--                                  ';'
java.g:--
java.g:-- Enums were added in JSR 201. We must inline expand Modifiersopt to avoid
java.g:-- ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--EnumDeclaration ::= ClassModifiersopt 'enum' 'Identifier' Interfacesopt
java.g:--                    EnumBody
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> enum_token = Token(2);
java.g:    p -> class_body -> identifier_token = Token(3);
java.g:        p -> AllocateInterfaces(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddInterface(DYNAMIC_CAST<AstTypeName*> (root -> element));
java.g:    p -> class_body -> identifier_token = Token(3);
java.g:--
java.g:-- Enums were added in JSR 201. We must inline expand Modifiersopt to avoid
java.g:-- ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Enums were added in JSR 201. The rule was expanded inline below to
java.g:-- make the grammar LALR(1). The use of Marker allows us to share code.
java.g:--
java.g:--EnumBody ::= '{' EnumConstantsopt ,opt EnumBodyDeclarationsopt '}'
java.g:    AstEnumDeclaration* p = ast_pool -> NewEnumDeclaration();
java.g:        p -> AllocateEnumConstants(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddEnumConstant(DYNAMIC_CAST<AstEnumConstant*>
java.g:                                 (root -> element));
java.g:        p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(4));
java.g:        p -> class_body = ast_pool -> NewClassBody();
java.g:        p -> class_body -> right_brace_token = Token(5);
java.g:        p -> class_body -> pool = body_pool;
java.g:    p -> class_body -> left_brace_token = Token(1);
java.g:    p -> class_body -> owner = p;
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:    AstEnumConstant* p = ast_pool -> NewEnumConstant(Token(2));
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> arguments_opt = DYNAMIC_CAST<AstArguments*> (Sym(3));
java.g:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(4));
java.g:--
java.g:-- Enums were added in JSR 201. As long as enums introduce this production, we
java.g:-- use it elsewhere, too.
java.g:--
java.g:    AstArguments* p = ast_pool -> NewArguments(Token(1), Token(3));
java.g:        p -> AllocateArguments(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddArgument(DYNAMIC_CAST<AstExpression*> (root -> element));
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--
java.g:-- Enums were added in JSR 201. The use of Marker allows us to share code.
java.g:--
java.g:--EnumBodyDeclarations ::= ';' ClassBodyDeclarationsopt
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:--18.9 Productions from 9: Interface Declarations
java.g:--18.9.1 Productions from 9.1: Interface Declarations
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--InterfaceDeclaration ::= InterfaceModifiersopt 'interface' 'Identifier'
java.g:--                         ExtendsInterfacesopt InterfaceBody
java.g:    AstInterfaceDeclaration* p = ast_pool -> NewInterfaceDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> interface_token = Token(2);
java.g:    p -> type_parameters_opt = MakeTypeParameters(4);
java.g:        p -> AllocateInterfaces(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddInterface(DYNAMIC_CAST<AstTypeName*> (root -> element));
java.g:    p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(6));
java.g:    p -> class_body -> identifier_token = Token(3);
java.g:    p -> class_body -> owner = p;
java.g:--
java.g:-- Parameterized types were added in JSR 14.  We must inline expand
java.g:-- Modifiersopt to avoid ambiguity.
java.g:--
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--ExtendsInterfaces ::= 'extends' InterfaceTypeList
java.g:--
java.g:--
java.g:-- For less code duplication and better semantic messages, we parse
java.g:-- non-abstract method bodies and non-initialized fields now, then do a
java.g:-- semantic check that this was valid.
java.g:--
java.g:--
java.g:-- Simplify. See below.
java.g:--
java.g:--InterfaceMemberDeclaration ::= AbstractMethodDeclaration
java.g:--1.1 feature
java.g:--
java.g:-- Consolidate and simplify.
java.g:--
java.g:--InterfaceMemberDeclaration ::= ClassDeclaration
java.g:--InterfaceMemberDeclaration ::= InterfaceDeclaration
java.g:--InterfaceMemberDeclaration ::= ';'
java.g:    DYNAMIC_CAST<AstFieldDeclaration*> (Sym(1)) -> MarkStatic();
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--AbstractMethodDeclaration ::= MethodHeader ';'
java.g:--
java.g:-- Annotations were added in JSR 175. We must inline expand Modifiersopt to
java.g:-- avoid ambiguity: does 'public @' start 'public @A class B{}' or
java.g:-- 'public @interface A{}'. The use of Marker allows us to share code.
java.g:--
java.g:--AnnotationTypeDeclaration ::= InterfaceModifiersopt '@' 'interface'
java.g:--                              'Identifier' AnnotationTypeBody
java.g:        ast_pool -> NewAnnotationDeclaration(Token(3));
java.g:        p -> modifiers_opt = MakeModifiers();
java.g:    p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(5));
java.g:    p -> class_body -> identifier_token = Token(4);
java.g:    p -> class_body -> owner = p;
java.g:-- Annotations were added in JSR 175. We must inline expand Modifiersopt to
java.g:-- avoid ambiguity: does 'public @' start 'public @A class B{}' or
java.g:-- 'public @interface A{}'.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175. We must inline expand Modifiersopt to
java.g:-- avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--AnnotationTypeMemberDeclaration ::= AbstractMethodModifiersopt Type
java.g:--                                    'Identifier' '(' ')' DefaultValueopt ';'
java.g:    AstMethodDeclaration* p = ast_pool -> NewMethodDeclaration();
java.g:    p -> modifiers_opt = MakeModifiers();
java.g:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
java.g:    AstMethodDeclarator* q = ast_pool -> NewMethodDeclarator();
java.g:    q -> identifier_token = Token(4);
java.g:    q -> left_parenthesis_token = Token(5);
java.g:    q -> right_parenthesis_token = Token(6);
java.g:    p -> method_declarator = q;
java.g:    p -> default_value_opt = DYNAMIC_CAST<AstMemberValue*> (Sym(7));
java.g:    p -> semicolon_token_opt = Token(8);
java.g:--
java.g:-- Annotations were added in JSR 175. We must inline expand Modifiersopt to
java.g:-- avoid ambiguity.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175. Consolidate and simplify.
java.g:--
java.g:--AnnotationTypeMemberDeclaration ::= ClassDeclaration
java.g:--AnnotationTypeMemberDeclaration ::= InterfaceDeclaration
java.g:--AnnotationTypeMemberDeclaration ::= EnumDeclaration
java.g:--AnnotationTypeMemberDeclaration ::= AnnotationTypeDeclaration
java.g:--AnnotationTypeMemberDeclaration ::= ';'
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--
java.g:-- Annotations were added in JSR 175.
java.g:--
java.g:--18.10 Productions from 10: Arrays
java.g:--
java.g:-- The rule VariableInitializersopt was expanded inline below to make the
java.g:-- grammar LALR(1). The use of Marker allows us to share code.
java.g:--
java.g:-- ArrayInitializer ::= '{' VariableInitializersopt ,opt '}'
java.g:--18.11 Productions from 13: Blocks and Statements
java.g:    AstBlock* p = ast_pool -> NewBlock();
java.g:    p -> left_brace_token = Token(1);
java.g:        p -> AllocateStatements(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
java.g:    p -> right_brace_token = Token(3);
java.g:--1.1 feature
java.g:    Sym(1) = ast_pool ->
java.g:--
java.g:-- Enums were added in JSR 201.
java.g:--
java.g:    Sym(1) = ast_pool ->
java.g:--
java.g:-- NOTE: This rule is not in the original grammar. We added it, and changed
java.g:-- the rule for ConstructorBody, in order to issue a nicer error message
java.g:-- when this() or super() is encountered out of context.
java.g:--
java.g:    DYNAMIC_CAST<AstLocalVariableStatement*> (Sym(1)) -> semicolon_token_opt =
java.g:--
java.g:-- For nicer error messages, we accept all modifiers, even though only
java.g:-- 'final' and annotations are valid. Also, we must inline expand finalopt
java.g:-- to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--LocalVariableDeclaration ::= finalopt Type VariableDeclarators
java.g:    AstLocalVariableStatement* p = ast_pool -> NewLocalVariableStatement();
java.g:        p -> modifiers_opt = MakeModifiers();
java.g:        p -> type = DYNAMIC_CAST<AstType*> (Sym(2));
java.g:    else p -> type = DYNAMIC_CAST<AstType*> (Sym(1));
java.g:    p -> AllocateVariableDeclarators(tail -> index + 1);
java.g:        root = root -> next;
java.g:        p -> AddVariableDeclarator(DYNAMIC_CAST<AstVariableDeclarator*>
java.g:                                   (root -> element));
java.g:--1.1 feature
java.g:--
java.g:-- For nicer error messages, we accept all modifiers, even though only
java.g:-- 'final' and annotations are valid. Also, we must inline expand finalopt
java.g:-- to avoid ambiguity. The use of Marker allows us to share code.
java.g:--
java.g:--LocalVariableDeclaration ::= final Type VariableDeclarators
java.g:--
java.g:-- Enhanced for statements (also known as foreach, but without a new keyword),
java.g:-- were added in JDK 1.5, as part of JSR 201.
java.g:--
java.g:--
java.g:-- Enhanced for statements (also known as foreach, but without a new keyword),
java.g:-- were added in JDK 1.5, as part of JSR 201.
java.g:--
java.g:    Sym(1) = ast_pool -> NewEmptyStatement(Token(1));
java.g:    AstBlock* p = Sym(3) -> BlockCast();
java.g:    if (! p || p -> label_opt)
java.g:        p = ast_pool -> GenBlock();
java.g:        p -> AllocateStatements(1); // allocate 1 element
java.g:        p -> left_brace_token = Token(1);
java.g:        p -> AddStatement(DYNAMIC_CAST<AstStatement*> (Sym(3)));
java.g:        p -> right_brace_token = Sym(3) -> RightToken();
java.g:    p -> label_opt = Token(1); // add label to statement
java.g:    Sym(1) = p; // The final result is a block containing the labeled-statement
java.g:    DYNAMIC_CAST<AstExpressionStatement*> (Sym(1)) -> semicolon_token_opt =
java.g:    AstExpressionStatement* p = ast_pool -> NewExpressionStatement();
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--IfThenStatement ::= 'if' '(' Expression ')' Statement
java.g:    AstIfStatement* p = ast_pool -> NewIfStatement();
java.g:    p -> if_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:    p -> true_statement = MakeBlock(5);
java.g:    p -> false_statement_opt = Sym(7) ? MakeBlock(7) : NULL;
java.g:    AstBlock* block = Sym(tokennum) -> BlockCast();
java.g:        block = ast_pool -> GenBlock();
java.g:        block -> AllocateStatements(1); // allocate 1 element
java.g:        block -> left_brace_token = Token(tokennum);
java.g:        block -> AddStatement(DYNAMIC_CAST<AstStatement*> (Sym(tokennum)));
java.g:        block -> right_brace_token = Sym(tokennum) -> RightToken();
java.g:    p -> switch_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:--
java.g:-- To avoid ambiguity with consecutive optional items, and to special
java.g:-- case trailing labels, we expand this inline.
java.g:--
java.g:--SwitchBlock ::= '{' SwitchBlockStatementsopt SwitchLabelsopt '}'
java.g:--
java.g:    AstSwitchStatement* p = ast_pool -> NewSwitchStatement();
java.g:    AstBlock* block = ast_pool -> NewBlock();
java.g:    block -> left_brace_token = Token(1);
java.g:    block -> AllocateStatements(tail -> index + (Sym(3) ? 2 : 1));
java.g:        root = root -> next;
java.g:        block -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
java.g:        block -> AddStatement
java.g:    block -> right_brace_token = Token(4);
java.g:    block -> SetTag(AstBlock::SWITCH);
java.g:    p -> switch_block = block;
java.g:// Creates an AstSwitchBlockStatement from the given non-null labels, and
java.g:    AstSwitchBlockStatement* p = ast_pool -> NewSwitchBlockStatement();
java.g:    p -> AllocateSwitchLabels(tail -> index + 1);
java.g:        root = root -> next;
java.g:        p -> AddSwitchLabel(DYNAMIC_CAST<AstSwitchLabel*> (root -> element));
java.g:        p -> AllocateStatements(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
java.g:        p -> AllocateStatements(1);
java.g:        p -> AddStatement(ast_pool -> GenEmptyStatement(labels ->
java.g:    p -> right_brace_token =
java.g:        p -> Statement(p -> NumStatements() - 1) -> RightToken();
java.g:    AstSwitchStatement* p = ast_pool -> NewSwitchStatement();
java.g:    AstBlock* block = ast_pool -> NewBlock();
java.g:    block -> AllocateStatements(1); // allocate 1 element
java.g:    block -> left_brace_token = Token(1);
java.g:        block -> AddStatement
java.g:    block -> right_brace_token = Token(3);
java.g:    block -> SetTag(AstBlock::SWITCH);
java.g:    p -> switch_block = block;
java.g:--
java.g:-- Simplify.
java.g:--
java.g:--SwitchLabel ::= 'case' ConstantExpression ':'
java.g:    AstSwitchLabel* p = ast_pool -> NewSwitchLabel();
java.g:    p -> case_token = Token(1);
java.g:    p -> expression_opt = DYNAMIC_CAST<AstExpression*> (Sym(2));
java.g:    p -> colon_token = Token(3);
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--SwitchLabel ::= 'default' ':'
java.g:    AstWhileStatement* p = ast_pool -> NewWhileStatement();
java.g:    p -> while_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:    p -> statement = MakeBlock(5);
java.g:    AstBlock* block = ast_pool -> GenBlock();
java.g:    block -> AllocateStatements(1); // allocate 1 element
java.g:    block -> left_brace_token = Token(1);
java.g:    block -> AddStatement(p);
java.g:    block -> right_brace_token = Sym(5) -> RightToken();
java.g:    AstDoStatement* p = ast_pool -> NewDoStatement();
java.g:    p -> do_token = Token(1);
java.g:    p -> statement = MakeBlock(2);
java.g:    p -> while_token = Token(3);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(5));
java.g:    p -> semicolon_token = Token(7);
java.g:    AstBlock* block = ast_pool -> GenBlock();
java.g:    block -> AllocateStatements(1); // allocate 1 element
java.g:    block -> left_brace_token = Token(1);
java.g:    block -> AddStatement(p);
java.g:    block -> right_brace_token = Token(7);
java.g:    AstForStatement* p = ast_pool -> NewForStatement();
java.g:    p -> for_token = Token(1);
java.g:        p -> AllocateForInitStatements(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddForInitStatement(DYNAMIC_CAST<AstStatement*>
java.g:                                     (root -> element));
java.g:    p -> end_expression_opt = DYNAMIC_CAST<AstExpression*> (Sym(5));
java.g:        p -> AllocateForUpdateStatements(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddForUpdateStatement(DYNAMIC_CAST<AstExpressionStatement*>
java.g:                                       (root -> element));
java.g:    p -> statement = MakeBlock(9);
java.g:    AstBlock* block = ast_pool -> NewBlock();
java.g:    block -> AllocateStatements(1); // allocate 1 element
java.g:    block -> left_brace_token = Token(1);
java.g:    block -> AddStatement(p);
java.g:    block -> right_brace_token = Sym(9) -> RightToken();
java.g:    block -> no_braces = true;
java.g:    AstForeachStatement* p = ast_pool -> NewForeachStatement();
java.g:    p -> for_token = Token(1);
java.g:    p -> formal_parameter = DYNAMIC_CAST<AstFormalParameter*> (Sym(3));
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(5));
java.g:    p -> statement = MakeBlock(7);
java.g:    AstBlock* block = ast_pool -> NewBlock();
java.g:    block -> AllocateStatements(1); // allocate 1 element
java.g:    block -> left_brace_token = Token(1);
java.g:    block -> AddStatement(p);
java.g:    block -> right_brace_token = Sym(7) -> RightToken();
java.g:    block -> no_braces = true;
java.g:--
java.g:-- Assert statements were added in JDK 1.4, as part of JSR 41.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--AssertStatement ::= 'assert' Expression ';'
java.g:    AstAssertStatement* p = ast_pool -> NewAssertStatement();
java.g:    p -> assert_token = Token(1);
java.g:    p -> condition = DYNAMIC_CAST<AstExpression*> (Sym(2));
java.g:    p -> message_opt = DYNAMIC_CAST<AstExpression*> (Sym(4));
java.g:    p -> semicolon_token = Token(5);
java.g:    AstBreakStatement* p = ast_pool -> NewBreakStatement();
java.g:    p -> break_token = Token(1);
java.g:        p -> identifier_token_opt = Token(2);
java.g:    p -> semicolon_token = Token(3);
java.g:    AstContinueStatement* p = ast_pool -> NewContinueStatement();
java.g:    p -> continue_token = Token(1);
java.g:        p -> identifier_token_opt = Token(2);
java.g:    p -> semicolon_token = Token(3);
java.g:    AstReturnStatement* p = ast_pool -> NewReturnStatement();
java.g:    p -> return_token = Token(1);
java.g:    p -> expression_opt = DYNAMIC_CAST<AstExpression*> (Sym(2));
java.g:    p -> semicolon_token = Token(3);
java.g:    AstThrowStatement* p = ast_pool -> NewThrowStatement();
java.g:    p -> throw_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
java.g:    p -> semicolon_token = Token(3);
java.g:    AstSynchronizedStatement* p = ast_pool -> NewSynchronizedStatement();
java.g:    p -> synchronized_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(5));
java.g:    p -> block -> SetTag(AstBlock::SYNCHRONIZED);
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--TryStatement ::= 'try' Block Catches
java.g:    AstTryStatement* p = ast_pool -> NewTryStatement();
java.g:    p -> try_token = Token(1);
java.g:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(2));
java.g:        p -> AllocateCatchClauses(tail -> index + 1);
java.g:            root = root -> next;
java.g:            p -> AddCatchClause(DYNAMIC_CAST<AstCatchClause*>
java.g:                                (root -> element));
java.g:        p -> block -> SetTag(AstBlock::TRY_CLAUSE_WITH_FINALLY);
java.g:        for (unsigned i = 0; i < p -> NumCatchClauses(); i++)
java.g:            p -> CatchClause(i) -> block ->
java.g:        p -> finally_clause_opt = DYNAMIC_CAST<AstFinallyClause*> (Sym(4));
java.g:    AstCatchClause* p = ast_pool -> NewCatchClause();
java.g:    p -> catch_token = Token(1);
java.g:    p -> formal_parameter = DYNAMIC_CAST<AstFormalParameter*> (Sym(3));
java.g:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(5));
java.g:    AstFinallyClause* p = ast_pool -> NewFinallyClause();
java.g:    p -> finally_token = Token(1);
java.g:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(2));
java.g:    p -> block -> SetTag(AstBlock::FINALLY);
java.g:--18.12 Productions from 14: Expressions
java.g:--1.2 feature
java.g:--
java.g:-- It is legal to access an element of an initialized array, as in
java.g:-- new int[] {0}[0]; this requires splitting the original rule for
java.g:-- array creation into two.
java.g:--
java.g:--Primary ::= ArrayCreationExpression
java.g:    Sym(1) = ast_pool -> NewThisExpression(Token(1));
java.g:--
java.g:-- We split this into two rules to allow better parsing of parenthesized
java.g:-- expressions vs. casts.  All expressions have a dual *NotName form, so that
java.g:-- the decision of whether "(name)" starts a cast or is a primary does not
java.g:-- cause parsing ambiguities. The use of Marker allows us to share code.
java.g:-- Also note that splitting this rule aids in parsing generics.
java.g:--
java.g:--PrimaryNoNewArray ::= '(' Expression ')'
java.g:    AstParenthesizedExpression* p = ast_pool -> NewParenthesizedExpression();
java.g:    p -> left_parenthesis_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
java.g:    p -> right_parenthesis_token = Token(4);
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--1.1 feature
java.g:--
java.g:-- Note that we had to rework this to avoid ambiguity
java.g:--
java.g:--PrimaryNoNewArray ::= ClassType '.' 'this'
java.g:    AstThisExpression* p = ast_pool -> NewThisExpression(Token(3));
java.g:    p -> base_opt = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(1)));
java.g:--1.1 feature
java.g:--
java.g:-- Note that we had to rework this to avoid ambiguity.
java.g:--
java.g:--PrimaryNoNewArray ::= Type '.' 'class'
java.g:    AstClassLiteral* p = ast_pool -> NewClassLiteral(Token(4));
java.g:    p -> type = MakeArrayType(1);
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--PrimaryNoNewArray ::= Name '.' 'class'
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--PrimaryNoNewArray ::= 'void' '.' 'class'
java.g:--1.1 feature
java.g:--
java.g:-- In Java 1.0 a ClassBody could not appear at all in a
java.g:-- ClassInstanceCreationExpression. Simplify.
java.g:--
java.g:--ClassInstanceCreationExpression ::= 'new' ClassOrInterfaceType '('
java.g:--                                    ArgumentListopt ')' ClassBodyopt
java.g:    AstClassCreationExpression* p = ast_pool -> NewClassCreationExpression();
java.g:    p -> new_token = Token(1);
java.g:    p -> class_type = DYNAMIC_CAST<AstTypeName*> (Sym(2));
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(3));
java.g:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(4));
java.g:    if (p -> class_body_opt)
java.g:        p -> class_body_opt -> identifier_token =
java.g:            p -> class_type -> IdentifierToken();
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--ClassInstanceCreationExpression ::= 'new' ClassOrInterfaceType '('
java.g:--                                    ArgumentListopt ')' ClassBodyopt
java.g:    AstClassCreationExpression* p = ast_pool -> NewClassCreationExpression();
java.g:    p -> new_token = Token(1);
java.g:    p -> type_arguments_opt = MakeExplicitTypeArguments(2);
java.g:    p -> class_type = DYNAMIC_CAST<AstTypeName*> (Sym(3));
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(4));
java.g:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(5));
java.g:    if (p -> class_body_opt)
java.g:        p -> class_body_opt -> identifier_token =
java.g:            p -> class_type -> IdentifierToken();
java.g:--1.1 feature
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--ClassInstanceCreationExpression ::= Primary '.' 'new' 'Identifier' '('
java.g:--                                    ArgumentListopt ')' ClassBodyopt
java.g:    AstClassCreationExpression* p = ast_pool -> NewClassCreationExpression();
java.g:    p -> base_opt = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> new_token = Token(3);
java.g:    p -> type_arguments_opt = MakeExplicitTypeArguments(4);
java.g:    p -> class_type = ast_pool -> NewTypeName(MakeSimpleName(5));
java.g:    p -> class_type -> type_arguments_opt = MakeExplicitTypeArguments(6);
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(7));
java.g:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(8));
java.g:    if (p -> class_body_opt)
java.g:        p -> class_body_opt -> identifier_token = Token(5);
java.g:--1.1 feature
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--ClassInstanceCreationExpression ::= Name '.' 'new' 'Identifier' '('
java.g:--                                    ArgumentListopt ')' ClassBodyopt
java.g:--1.2 feature
java.g:--
java.g:-- ArrayCreationExpression is split into two parsing categories, to
java.g:-- allow array access on an initialized array.  See above.
java.g:--
java.g:--ArrayCreationExpression ::= 'new' PrimitiveType DimExprs Dimsopt
java.g:    AstArrayCreationExpression* p = ast_pool -> NewArrayCreationExpression();
java.g:    p -> new_token = Token(1);
java.g:    p -> array_type = DYNAMIC_CAST<AstType*> (Sym(2));
java.g:    p -> AllocateDimExprs(tail -> index + 1);
java.g:        root = root -> next;
java.g:        p -> AddDimExpr(DYNAMIC_CAST<AstDimExpr*> (root -> element));
java.g:    p -> brackets_opt = DYNAMIC_CAST<AstBrackets*> (Sym(4));
java.g:--ArrayCreationExpression ::= 'new' ClassOrInterfaceType DimExprs Dimsopt
java.g:--1.1 feature
java.g:--
java.g:--ArrayCreationExpression ::= 'new' ArrayType ArrayInitializer
java.g:    AstArrayCreationExpression* p = ast_pool -> NewArrayCreationExpression();
java.g:    p -> new_token = Token(1);
java.g:    p -> array_type = MakeArrayType(2);
java.g:    p -> array_initializer_opt = DYNAMIC_CAST<AstArrayInitializer*> (Sym(4));
java.g:    AstDimExpr* p = ast_pool -> NewDimExpr();
java.g:    p -> left_bracket_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
java.g:    p -> right_bracket_token = Token(3);
java.g:    Sym(1) = ast_pool -> NewBrackets(Token(1), Token(2));
java.g:    p -> right_bracket_token = Token(2);
java.g:    p -> dims++;
java.g:--
java.g:-- Added rule to make parsing 'super' '.' easier.
java.g:--
java.g:    Sym(1) = ast_pool -> NewSuperExpression(Token(1));
java.g:--
java.g:-- Added rule to make parsing 'super' '.' easier. Technically, only ClassType
java.g:-- is allowed instead of Name, but that would be ambiguous with qualified
java.g:-- names. The use of Marker allows us to share code.
java.g:--
java.g:--SuperAccess ::= ClassType '.' 'super'
java.g:    AstSuperExpression* p = ast_pool -> NewSuperExpression(Token(4));
java.g:    p -> base_opt = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(1)));
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--FieldAccess ::= Primary '.' 'Identifier'
java.g:    AstFieldAccess* p = ast_pool -> NewFieldAccess();
java.g:    p -> base = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> identifier_token = Token(4);
java.g:--
java.g:-- The use of Marker allows us to share code.  Likewise, SuperAccess
java.g:-- simplifies tree creation.
java.g:--
java.g:--FieldAccess ::= 'super' '.' 'Identifier'
java.g:--FieldAccess ::= ClassType '.' 'super' '.' 'Identifier'
java.g:--
java.g:-- Inline expand Name so we can distinguish the optional base from the required
java.g:-- method identifier.
java.g:--
java.g:--MethodInvocation ::= Name '(' ArgumentListopt ')'
java.g:    AstMethodInvocation* p = ast_pool -> NewMethodInvocation(Token(1));
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(2));
java.g:--
java.g:-- Inline expand Name so we can distinguish the optional base from the required
java.g:-- method identifier.  The use of Marker allows us to share code.
java.g:--
java.g:--MethodInvocation ::= Name '(' ArgumentListopt ')'
java.g:    AstMethodInvocation* p = ast_pool -> NewMethodInvocation(Token(4));
java.g:    p -> base_opt = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> type_arguments_opt = MakeExplicitTypeArguments(3);
java.g:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(5));
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--MethodInvocation ::= Primary '.' 'Identifier' '(' ArgumentListopt ')'
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- The use of Marker allows us to share code.  Likewise, SuperAccess
java.g:-- simplifies tree creation.
java.g:--
java.g:--MethodInvocation ::= 'super' '.' 'Identifier' '(' ArgumentListopt ')'
java.g:--MethodInvocation ::= ClassType '.' 'super' '.' 'Identifier' '('
java.g:--                     ArgumentListopt ')'
java.g:--
java.g:-- Parameterized types were added in JSR 14.  Likewise, SuperAccess
java.g:-- simplifies tree creation.
java.g:--
java.g:--MethodInvocation ::= 'super' '.' TypeArguments 'Identifier' '('
java.g:--                     ArgumentListopt ')'
java.g:--MethodInvocation ::= ClassType '.' 'super' '.' TypeArguments 'Identifier' '('
java.g:--                     ArgumentListopt ')'
java.g:    AstArrayAccess* p = ast_pool -> NewArrayAccess();
java.g:    p -> base = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> left_bracket_token = Token(2);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:    p -> right_bracket_token = Token(4);
java.g:--1.2 feature
java.g:--
java.g:-- Access of an initialized array is legal.  See above.
java.g:--
java.g:        ast_pool -> NewPostUnaryExpression(AstPostUnaryExpression::PLUSPLUS);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> post_operator_token = Token(2);
java.g:PostDecrementExpression ::= PostfixExpression '--'
java.g:        ast_pool -> NewPostUnaryExpression(AstPostUnaryExpression::MINUSMINUS);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> post_operator_token = Token(2);
java.g:    switch (lex_stream -> Kind(Token(1)))
java.g:    AstPreUnaryExpression* p = ast_pool -> NewPreUnaryExpression(tag);
java.g:    p -> pre_operator_token = Token(1);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
java.g:UnaryExpression ::= '-' UnaryExpression
java.g:UnaryExpressionNotName ::= '-' UnaryExpression
java.g:PreDecrementExpression ::= '--' UnaryExpression
java.g:--
java.g:-- Due to grammar ambiguities, we must rewrite this (otherwise, it is not
java.g:-- obvious whether "(a<b" starts a parenthesized expression or a cast). Note
java.g:-- that our rewrite guarantees that the contents of the parenthesis will
java.g:-- syntactically be a type, based on the way we factored parenthesized
java.g:-- expressions in Primary.
java.g:--
java.g:-- JLS2 15 lists:
java.g:--CastExpression ::= '(' PrimitiveType ')' UnaryExpression
java.g:--CastExpression ::= '(' ReferenceType ')' UnaryExpressionNotPlusMinus
java.g:-- JLS1 suggests:
java.g:--CastExpression ::= '(' PrimitiveType Dimsopt ')' UnaryExpression
java.g:--CastExpression ::= '(' Expression ')' UnaryExpressionNotPlusMinus
java.g:--CastExpression ::= '(' Name Dims ')' UnaryExpressionNotPlusMinus
java.g:--
java.g:    AstCastExpression* p = ast_pool -> NewCastExpression();
java.g:    p -> left_parenthesis_token = Token(1);
java.g:    p -> type = type;
java.g:    p -> right_parenthesis_token = Token(tokennum);
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(tokennum + 1));
java.g:--
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:    while (p -> base_opt)
java.g:        p = p -> base_opt;
java.g:    p -> base_opt = MakeTypeArguments(2);
java.g:    switch (lex_stream -> Kind(Token(2)))
java.g:    AstBinaryExpression* p = ast_pool -> NewBinaryExpression(tag);
java.g:    p -> left_expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> binary_operator_token = Token(2);
java.g:    p -> right_expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:AdditiveExpression ::= AdditiveExpression '-' MultiplicativeExpression
java.g:AdditiveExpressionNotName ::= AdditiveExpressionNotName '-'
java.g:AdditiveExpressionNotName ::= Name '-' MultiplicativeExpression
java.g:--
java.g:-- Relational expressions do not operate on boolean. Rewriting this
java.g:-- rule avoids an ambiguity in generics with no semantic penalty. The
java.g:-- alternative is to lower the precedence of instanceof.
java.g:--
java.g:--RelationalExpression ::= RelationalExpression '<' ShiftExpression
java.g:    AstInstanceofExpression* p = ast_pool -> NewInstanceofExpression();
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> instanceof_token = Token(2);
java.g:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
java.g:--RelationalExpressionNotName ::= RelationalExpressionNotName '<'
java.g:--                                ShiftExpression
java.g:--RelationalExpressionNotName ::= RelationalExpressionNotName '>'
java.g:--                                ShiftExpression
java.g:    AstConditionalExpression* p = ast_pool -> NewConditionalExpression();
java.g:    p -> test_expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> question_token = Token(2);
java.g:    p -> true_expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:    p -> colon_token = Token(4);
java.g:    p -> false_expression = DYNAMIC_CAST<AstExpression*> (Sym(5));
java.g:--
java.g:-- The original grammar uses LeftHandSide, instead of PostfixExpression.
java.g:-- However, parenthesized variables were added in JLS 2, and the
java.g:-- grammar is ambiguous unless we include all non-assignment
java.g:-- expressions. The semantic pass will filter out bad left-hand sides.
java.g:--
java.g:--Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
java.g:    switch (lex_stream -> Kind(Token(2)))
java.g:        ast_pool -> NewAssignmentExpression(tag, Token(2));
java.g:    p -> left_hand_side = DYNAMIC_CAST<AstExpression*> (Sym(1));
java.g:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
java.g:--
java.g:-- See comments above for Assignment - LeftHandSide is now a useless rule.
java.g:--
java.g:--LeftHandSide -> Name
java.g:--LeftHandSide -> FieldAccess
java.g:--LeftHandSide -> ArrayAccess
java.g:AssignmentOperator ::= '-='
java.g:--
java.g:-- Simplify the syntax tree.
java.g:--
java.g:--ConstantExpression ::= Expression
java.g:-----------------------------------------------------------------------------
java.g:--
java.g:-- The following rules are for optional and helper productions.
java.g:--
java.g:-----------------------------------------------------------------------------
java.g:--
java.g:-- This rule exists solely to put NULL on the symbol stack, allowing us to
java.g:-- share productions that differ by the presence or absence of a rule.
java.g:--
java.g:// is turned on, we skip to the end-of-file token.
java.g:        lex_stream -> Reset(lex_stream -> NumTokens() - 1);
java.g:        if (lex_stream -> Kind(token) == TK_LBRACE)
java.g:            lex_stream -> Reset(lex_stream -> MatchingBrace(token));
java.g:-----------------------------------------------------------------------------
java.g:--
java.g:-- These rules add generics. Also search for JSR 14 in the comments above.
java.g:--
java.g:-----------------------------------------------------------------------------
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14. We inline expanded WildcardBounds
java.g:-- for simplicity. The use of Marker allows us to share code.
java.g:--
java.g:--Wildcard ::= '?' WildcardBoundsopt
java.g:--WildcardBounds ::= extends ReferenceType
java.g:--WildcardBounds ::= super ReferenceType
java.g:--
java.g:    AstWildcard* p = ast_pool -> NewWildcard(Token(1));
java.g:        p -> extends_token_opt = Token(2);
java.g:        p -> bounds_opt = DYNAMIC_CAST<AstType*> (Sym(4));
java.g:        p -> super_token_opt = Token(3);
java.g:        p -> bounds_opt = DYNAMIC_CAST<AstType*> (Sym(4));
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- Use of Marker allows us to easily find the closing '>>'.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- Use of Marker allows us to easily find the closing '>>>'.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:    AstTypeParameter* p = ast_pool -> NewTypeParameter(Token(1));
java.g:        p -> AllocateBounds(tail -> index + 1);
java.g:            p -> AddBound(DYNAMIC_CAST<AstTypeName*> (root -> element));
java.g:            root = root -> next;
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- The use of Marker allows us to share code.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:--
java.g:--
java.g:-- Parameterized types were added in JSR 14.
java.g:-- Use of Marker allows us to easily find the closing '>>'.
java.g:--
java.g:------ Finish off the files
java.g:-- Names allow diagnose.cpp debug output to be more legible
java.g:MINUS_MINUS ::= '--'
java.g:MINUS_EQUAL ::= '-='
java.g:MINUS ::= '-'
javaact.cpp:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
javaact.cpp:// Do nothing - Whatever Ast was produced for x1 is inherited by A.
javaact.cpp:// parse from accepting a body as a valid input - i.e., to recognize a body
javaact.cpp:// out-of-context, the BodyMarker terminal must be inserted in front of the
javaact.cpp:    Sym(1) = ast_pool -> NewIntegerLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewLongLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewFloatLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewDoubleLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewCharacterLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewStringLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewNullLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewTrueLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewFalseLiteral(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::BOOLEAN, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::BYTE, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::SHORT, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::INT, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::LONG, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::CHAR, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::FLOAT, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::DOUBLE, Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewPrimitiveType(Ast::VOID_TYPE, Token(1));
javaact.cpp:    AstTypeName* p = Sym(tokennum) -> NameCast()
javaact.cpp:        ? ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(tokennum)))
javaact.cpp:        ast_pool -> NewTypeArguments(Token(tokennum + 1),
javaact.cpp:                                     Token(tokennum + 3) - 1);
javaact.cpp:    q -> AllocateTypeArguments(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        q -> AddTypeArgument(DYNAMIC_CAST<AstType*> (root -> element));
javaact.cpp:    p -> type_arguments_opt = q;
javaact.cpp:    AstTypeName* p = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(1)));
javaact.cpp:    AstTypeName* p = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(5)));
javaact.cpp:    p -> base_opt = MakeTypeArguments(1);
javaact.cpp:    AstType* p = Sym(tokennum) -> NameCast()
javaact.cpp:        ? ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(tokennum)))
javaact.cpp:        : ast_pool -> NewArrayType(p, (DYNAMIC_CAST<AstBrackets*>
javaact.cpp:    AstTypeName* p = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(5)));
javaact.cpp:    p -> base_opt = MakeTypeArguments(1);
javaact.cpp:    AstName* name = ast_pool -> NewName(Token(tokennum));
javaact.cpp:    AstName* p = ast_pool -> NewName(Token(4));
javaact.cpp:    p -> base_opt = DYNAMIC_CAST<AstName*> (Sym(1));
javaact.cpp:    AstCompilationUnit* p = ast_pool -> NewCompilationUnit();
javaact.cpp:    p -> package_declaration_opt =
javaact.cpp:        p -> AllocateImportDeclarations(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddImportDeclaration(DYNAMIC_CAST<AstImportDeclaration*>
javaact.cpp:                                      (root -> element));
javaact.cpp:        p -> AllocateTypeDeclarations(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddTypeDeclaration(DYNAMIC_CAST<AstDeclaredType*>
javaact.cpp:                                    (root -> element));
javaact.cpp:    p -> next = p;
javaact.cpp:    p -> element = Sym(1);
javaact.cpp:    p -> index = 0;
javaact.cpp:    p -> element = Sym(2);
javaact.cpp:    p -> index = tail -> index + 1;
javaact.cpp:    p -> next = tail -> next;
javaact.cpp:    tail -> next = p;
javaact.cpp:    p -> element = Sym(3);
javaact.cpp:    p -> index = tail -> index + 1;
javaact.cpp:    p -> next = tail -> next;
javaact.cpp:    tail -> next = p;
javaact.cpp:    AstPackageDeclaration* p = ast_pool -> NewPackageDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> package_token = Token(2);
javaact.cpp:    p -> name = DYNAMIC_CAST<AstName*> (Sym(3));
javaact.cpp:    p -> semicolon_token = Token(5);
javaact.cpp:    AstModifiers* p = ast_pool -> NewModifiers();
javaact.cpp:    p -> AllocateModifiers(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        if (root -> element -> ModifierKeywordCast())
javaact.cpp:            AstModifierKeyword* mod = (AstModifierKeyword*) root -> element;
javaact.cpp:            p -> AddModifier(mod);
javaact.cpp:            if (lex_stream -> Kind(mod -> modifier_token) == TK_static)
javaact.cpp:                p -> static_token_opt = mod -> modifier_token;
javaact.cpp:        else p -> AddModifier(DYNAMIC_CAST<AstAnnotation*> (root -> element));
javaact.cpp:    AstImportDeclaration* p = ast_pool -> NewImportDeclaration();
javaact.cpp:    p -> import_token = Token(1);
javaact.cpp:        p -> static_token_opt = Token(2);
javaact.cpp:    p -> name = DYNAMIC_CAST<AstName*> (Sym(3));
javaact.cpp:        p -> star_token_opt = Token(5);
javaact.cpp:    p -> semicolon_token = Token(6);
javaact.cpp:    Sym(1) = ast_pool -> NewEmptyDeclaration(Token(1));
javaact.cpp:    Sym(1) = ast_pool -> NewModifierKeyword(Token(1));
javaact.cpp:    AstAnnotation* p = ast_pool -> NewAnnotation();
javaact.cpp:    p -> at_token = Token(1);
javaact.cpp:    p -> name = DYNAMIC_CAST<AstName*> (Sym(2));
javaact.cpp:        p -> AllocateMemberValuePairs(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddMemberValuePair(DYNAMIC_CAST<AstMemberValuePair*>
javaact.cpp:                                    (root -> element));
javaact.cpp:        p -> right_paren_token_opt = Token(5);
javaact.cpp:    AstMemberValuePair* p = ast_pool -> NewMemberValuePair();
javaact.cpp:    p -> identifier_token_opt = Token(1);
javaact.cpp:    p -> member_value = DYNAMIC_CAST<AstMemberValue*> (Sym(3));
javaact.cpp:    AstArrayInitializer* p = ast_pool -> NewArrayInitializer();
javaact.cpp:    p -> left_brace_token = Token(1);
javaact.cpp:        p -> AllocateVariableInitializers(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddVariableInitializer(DYNAMIC_CAST<AstMemberValue*>
javaact.cpp:                                        (root -> element));
javaact.cpp:    p -> right_brace_token = Token(4);
javaact.cpp:    AstMemberValuePair* mvp = ast_pool -> NewMemberValuePair();
javaact.cpp:    mvp -> member_value = DYNAMIC_CAST<AstMemberValue*> (Sym(4));
javaact.cpp:    p -> next = p;
javaact.cpp:    p -> element = mvp;
javaact.cpp:    p -> index = 0;
javaact.cpp:    AstClassDeclaration* p = ast_pool -> NewClassDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> class_token = Token(2);
javaact.cpp:    p -> type_parameters_opt = MakeTypeParameters(4);
javaact.cpp:    p -> super_opt = DYNAMIC_CAST<AstTypeName*> (Sym(5));
javaact.cpp:        p -> AllocateInterfaces(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddInterface(DYNAMIC_CAST<AstTypeName*> (root -> element));
javaact.cpp:    p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(7));
javaact.cpp:    p -> class_body -> identifier_token = Token(3);
javaact.cpp:    p -> class_body -> owner = p;
javaact.cpp:    AstTypeParameters* p = ast_pool -> NewTypeParameters();
javaact.cpp:    p -> AllocateTypeParameters(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        p -> AddTypeParameter(DYNAMIC_CAST<AstTypeParameter*>
javaact.cpp:                              (root -> element));
javaact.cpp:    p -> right_angle_token = Token(tokennum + 1) - 1;
javaact.cpp:    AstClassBody* p = ast_pool -> NewClassBody();
javaact.cpp:        p -> MarkUnparsed();
javaact.cpp:    p -> left_brace_token = Token(1);
javaact.cpp:        p -> AllocateClassBodyDeclarations(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:                DYNAMIC_CAST<AstDeclared*> (root -> element);
javaact.cpp:                declaration -> FieldDeclarationCast();
javaact.cpp:                declaration -> InitializerDeclarationCast();
javaact.cpp:                if (field_declaration -> modifiers_opt &&
javaact.cpp:                    field_declaration -> modifiers_opt -> static_token_opt)
javaact.cpp:                    field_declaration -> MarkStatic();
javaact.cpp:                if (field_declaration -> StaticFieldCast())
javaact.cpp:            else if (declaration -> MethodDeclarationCast())
javaact.cpp:            else if (declaration -> ConstructorDeclarationCast())
javaact.cpp:                if (initializer -> modifiers_opt &&
javaact.cpp:                    initializer -> modifiers_opt -> static_token_opt)
javaact.cpp:                    initializer -> MarkStatic();
javaact.cpp:            else if (declaration -> ClassDeclarationCast())
javaact.cpp:            else if (declaration -> EnumDeclarationCast())
javaact.cpp:            else if (declaration -> InterfaceDeclarationCast())
javaact.cpp:            else if (declaration -> AnnotationDeclarationCast())
javaact.cpp:        p -> AllocateInstanceVariables(num_instance_variables);
javaact.cpp:        p -> AllocateClassVariables(num_class_variables);
javaact.cpp:        p -> AllocateMethods(num_methods);
javaact.cpp:        p -> AllocateConstructors(num_constructors);
javaact.cpp:        p -> AllocateStaticInitializers(num_static_initializers);
javaact.cpp:        p -> AllocateInstanceInitializers(num_instance_initializers);
javaact.cpp:        p -> AllocateNestedClasses(num_inner_classes);
javaact.cpp:        p -> AllocateNestedEnums(num_inner_enums);
javaact.cpp:        p -> AllocateNestedInterfaces(num_inner_interfaces);
javaact.cpp:        p -> AllocateNestedAnnotations(num_inner_annotations);
javaact.cpp:        p -> AllocateEmptyDeclarations(num_empty_declarations);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddClassBodyDeclaration(DYNAMIC_CAST<AstDeclared*>
javaact.cpp:                                         (root -> element));
javaact.cpp:    p -> right_brace_token = Token(3);
javaact.cpp:    p -> pool = body_pool;
javaact.cpp:    AstFieldDeclaration* p = ast_pool -> NewFieldDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
javaact.cpp:    p -> AllocateVariableDeclarators(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        p -> AddVariableDeclarator(DYNAMIC_CAST<AstVariableDeclarator*>
javaact.cpp:                                   (root -> element));
javaact.cpp:    p -> semicolon_token = Token(5);
javaact.cpp:    AstVariableDeclarator* p = ast_pool -> NewVariableDeclarator();
javaact.cpp:    p -> variable_declarator_name =
javaact.cpp:    AstVariableDeclarator* p = ast_pool -> NewVariableDeclarator();
javaact.cpp:    p -> variable_declarator_name =
javaact.cpp:    p -> variable_initializer_opt = Sym(3);
javaact.cpp:    AstVariableDeclaratorId* p = ast_pool -> NewVariableDeclaratorId();
javaact.cpp:    p -> identifier_token = Token(1);
javaact.cpp:    p -> brackets_opt = DYNAMIC_CAST<AstBrackets*> (Sym(2));
javaact.cpp:        p -> method_body_opt = DYNAMIC_CAST<AstMethodBody*> (Sym(3));
javaact.cpp:    else p -> semicolon_token_opt = Token(4);
javaact.cpp:    AstMethodDeclaration* p = ast_pool -> NewMethodDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> type_parameters_opt = MakeTypeParameters(2);
javaact.cpp:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
javaact.cpp:    p -> method_declarator = DYNAMIC_CAST<AstMethodDeclarator*> (Sym(4));
javaact.cpp:        p -> AllocateThrows(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddThrow(DYNAMIC_CAST<AstTypeName*> (root -> element));
javaact.cpp:    AstMethodDeclarator* p = ast_pool -> NewMethodDeclarator();
javaact.cpp:    p -> identifier_token = Token(1);
javaact.cpp:    p -> left_parenthesis_token = Token(2);
javaact.cpp:        p -> AllocateFormalParameters(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddFormalParameter(DYNAMIC_CAST<AstFormalParameter*>
javaact.cpp:                                    (root -> element));
javaact.cpp:    p -> right_parenthesis_token = Token(4);
javaact.cpp:    p -> brackets_opt = DYNAMIC_CAST<AstBrackets*> (Sym(5));
javaact.cpp:    AstFormalParameter* p = ast_pool -> NewFormalParameter();
javaact.cpp:        p -> modifiers_opt = MakeModifiers();
javaact.cpp:        p -> type = DYNAMIC_CAST<AstType*> (Sym(2));
javaact.cpp:    else p -> type = DYNAMIC_CAST<AstType*> (Sym(1));
javaact.cpp:        p -> ellipsis_token_opt = Token(3);
javaact.cpp:        ast_pool -> NewVariableDeclarator();
javaact.cpp:    formal_declarator -> variable_declarator_name =
javaact.cpp:    p -> formal_declarator = formal_declarator;
javaact.cpp:    AstMethodBody* p = ast_pool -> NewMethodBody();
javaact.cpp:    p -> left_brace_token = Token(1);
javaact.cpp:    p -> right_brace_token = Token(3);
javaact.cpp:        p -> AllocateStatements(tail -> index + 2);
javaact.cpp:        AstListNode* root = tail -> next;
javaact.cpp:        if (root -> element -> IsExplicitConstructorInvocation())
javaact.cpp:            p -> explicit_constructor_opt =
javaact.cpp:                DYNAMIC_CAST<AstStatement*> (root -> element);
javaact.cpp:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
javaact.cpp:    else p -> AllocateStatements(1);
javaact.cpp:    AstInitializerDeclaration* p = ast_pool -> NewInitializerDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> block = DYNAMIC_CAST<AstMethodBody*> (Sym(3));
javaact.cpp:    AstConstructorDeclaration* p = ast_pool -> NewConstructorDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> type_parameters_opt = MakeTypeParameters(2);
javaact.cpp:    p -> constructor_declarator = DYNAMIC_CAST<AstMethodDeclarator*> (Sym(3));
javaact.cpp:        p -> AllocateThrows(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddThrow(DYNAMIC_CAST<AstTypeName*> (root -> element));
javaact.cpp:    p -> constructor_body = DYNAMIC_CAST<AstMethodBody*> (Sym(6));
javaact.cpp:    AstThisCall* p = ast_pool -> NewThisCall();
javaact.cpp:    p -> this_token = Token(1);
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(2));
javaact.cpp:    p -> semicolon_token = Token(3);
javaact.cpp:    AstThisCall* p = ast_pool -> NewThisCall();
javaact.cpp:    p -> type_arguments_opt = MakeExplicitTypeArguments(1);
javaact.cpp:    p -> this_token = Token(2);
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(3));
javaact.cpp:    p -> semicolon_token = Token(4);
javaact.cpp:        ast_pool -> NewTypeArguments(Token(tokennum),
javaact.cpp:                                     Token(tokennum + 1) - 1);
javaact.cpp:    p -> AllocateTypeArguments(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        p -> AddTypeArgument(DYNAMIC_CAST<AstType*> (root -> element));
javaact.cpp:    AstSuperCall* p = ast_pool -> NewSuperCall();
javaact.cpp:    p -> super_token = Token(1);
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(2));
javaact.cpp:    p -> semicolon_token = Token(3);
javaact.cpp:    AstSuperCall* p = ast_pool -> NewSuperCall();
javaact.cpp:    p -> type_arguments_opt = MakeExplicitTypeArguments(1);
javaact.cpp:    p -> super_token = Token(2);
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(3));
javaact.cpp:    p -> semicolon_token = Token(4);
javaact.cpp:    AstSuperCall* p = ast_pool -> NewSuperCall();
javaact.cpp:    p -> base_opt = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> type_arguments_opt = MakeExplicitTypeArguments(3);
javaact.cpp:    p -> super_token = Token(4);
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(5));
javaact.cpp:    p -> semicolon_token = Token(6);
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> enum_token = Token(2);
javaact.cpp:    p -> class_body -> identifier_token = Token(3);
javaact.cpp:        p -> AllocateInterfaces(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddInterface(DYNAMIC_CAST<AstTypeName*> (root -> element));
javaact.cpp:    p -> class_body -> identifier_token = Token(3);
javaact.cpp:    AstEnumDeclaration* p = ast_pool -> NewEnumDeclaration();
javaact.cpp:        p -> AllocateEnumConstants(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddEnumConstant(DYNAMIC_CAST<AstEnumConstant*>
javaact.cpp:                                 (root -> element));
javaact.cpp:        p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(4));
javaact.cpp:        p -> class_body = ast_pool -> NewClassBody();
javaact.cpp:        p -> class_body -> right_brace_token = Token(5);
javaact.cpp:        p -> class_body -> pool = body_pool;
javaact.cpp:    p -> class_body -> left_brace_token = Token(1);
javaact.cpp:    p -> class_body -> owner = p;
javaact.cpp:    AstEnumConstant* p = ast_pool -> NewEnumConstant(Token(2));
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> arguments_opt = DYNAMIC_CAST<AstArguments*> (Sym(3));
javaact.cpp:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(4));
javaact.cpp:    AstArguments* p = ast_pool -> NewArguments(Token(1), Token(3));
javaact.cpp:        p -> AllocateArguments(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddArgument(DYNAMIC_CAST<AstExpression*> (root -> element));
javaact.cpp:    AstInterfaceDeclaration* p = ast_pool -> NewInterfaceDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> interface_token = Token(2);
javaact.cpp:    p -> type_parameters_opt = MakeTypeParameters(4);
javaact.cpp:        p -> AllocateInterfaces(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddInterface(DYNAMIC_CAST<AstTypeName*> (root -> element));
javaact.cpp:    p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(6));
javaact.cpp:    p -> class_body -> identifier_token = Token(3);
javaact.cpp:    p -> class_body -> owner = p;
javaact.cpp:    DYNAMIC_CAST<AstFieldDeclaration*> (Sym(1)) -> MarkStatic();
javaact.cpp:        ast_pool -> NewAnnotationDeclaration(Token(3));
javaact.cpp:        p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> class_body = DYNAMIC_CAST<AstClassBody*> (Sym(5));
javaact.cpp:    p -> class_body -> identifier_token = Token(4);
javaact.cpp:    p -> class_body -> owner = p;
javaact.cpp:    AstMethodDeclaration* p = ast_pool -> NewMethodDeclaration();
javaact.cpp:    p -> modifiers_opt = MakeModifiers();
javaact.cpp:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
javaact.cpp:    AstMethodDeclarator* q = ast_pool -> NewMethodDeclarator();
javaact.cpp:    q -> identifier_token = Token(4);
javaact.cpp:    q -> left_parenthesis_token = Token(5);
javaact.cpp:    q -> right_parenthesis_token = Token(6);
javaact.cpp:    p -> method_declarator = q;
javaact.cpp:    p -> default_value_opt = DYNAMIC_CAST<AstMemberValue*> (Sym(7));
javaact.cpp:    p -> semicolon_token_opt = Token(8);
javaact.cpp:    AstBlock* p = ast_pool -> NewBlock();
javaact.cpp:    p -> left_brace_token = Token(1);
javaact.cpp:        p -> AllocateStatements(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
javaact.cpp:    p -> right_brace_token = Token(3);
javaact.cpp:    Sym(1) = ast_pool ->
javaact.cpp:    Sym(1) = ast_pool ->
javaact.cpp:    DYNAMIC_CAST<AstLocalVariableStatement*> (Sym(1)) -> semicolon_token_opt =
javaact.cpp:    AstLocalVariableStatement* p = ast_pool -> NewLocalVariableStatement();
javaact.cpp:        p -> modifiers_opt = MakeModifiers();
javaact.cpp:        p -> type = DYNAMIC_CAST<AstType*> (Sym(2));
javaact.cpp:    else p -> type = DYNAMIC_CAST<AstType*> (Sym(1));
javaact.cpp:    p -> AllocateVariableDeclarators(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        p -> AddVariableDeclarator(DYNAMIC_CAST<AstVariableDeclarator*>
javaact.cpp:                                   (root -> element));
javaact.cpp:    Sym(1) = ast_pool -> NewEmptyStatement(Token(1));
javaact.cpp:    AstBlock* p = Sym(3) -> BlockCast();
javaact.cpp:    if (! p || p -> label_opt)
javaact.cpp:        p = ast_pool -> GenBlock();
javaact.cpp:        p -> AllocateStatements(1); // allocate 1 element
javaact.cpp:        p -> left_brace_token = Token(1);
javaact.cpp:        p -> AddStatement(DYNAMIC_CAST<AstStatement*> (Sym(3)));
javaact.cpp:        p -> right_brace_token = Sym(3) -> RightToken();
javaact.cpp:    p -> label_opt = Token(1); // add label to statement
javaact.cpp:    Sym(1) = p; // The final result is a block containing the labeled-statement
javaact.cpp:    DYNAMIC_CAST<AstExpressionStatement*> (Sym(1)) -> semicolon_token_opt =
javaact.cpp:    AstExpressionStatement* p = ast_pool -> NewExpressionStatement();
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    AstIfStatement* p = ast_pool -> NewIfStatement();
javaact.cpp:    p -> if_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:    p -> true_statement = MakeBlock(5);
javaact.cpp:    p -> false_statement_opt = Sym(7) ? MakeBlock(7) : NULL;
javaact.cpp:    AstBlock* block = Sym(tokennum) -> BlockCast();
javaact.cpp:        block = ast_pool -> GenBlock();
javaact.cpp:        block -> AllocateStatements(1); // allocate 1 element
javaact.cpp:        block -> left_brace_token = Token(tokennum);
javaact.cpp:        block -> AddStatement(DYNAMIC_CAST<AstStatement*> (Sym(tokennum)));
javaact.cpp:        block -> right_brace_token = Sym(tokennum) -> RightToken();
javaact.cpp:    p -> switch_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:    AstSwitchStatement* p = ast_pool -> NewSwitchStatement();
javaact.cpp:    AstBlock* block = ast_pool -> NewBlock();
javaact.cpp:    block -> left_brace_token = Token(1);
javaact.cpp:    block -> AllocateStatements(tail -> index + (Sym(3) ? 2 : 1));
javaact.cpp:        root = root -> next;
javaact.cpp:        block -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
javaact.cpp:        block -> AddStatement
javaact.cpp:    block -> right_brace_token = Token(4);
javaact.cpp:    block -> SetTag(AstBlock::SWITCH);
javaact.cpp:    p -> switch_block = block;
javaact.cpp:// Creates an AstSwitchBlockStatement from the given non-null labels, and
javaact.cpp:    AstSwitchBlockStatement* p = ast_pool -> NewSwitchBlockStatement();
javaact.cpp:    p -> AllocateSwitchLabels(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        p -> AddSwitchLabel(DYNAMIC_CAST<AstSwitchLabel*> (root -> element));
javaact.cpp:        p -> AllocateStatements(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddStatement(DYNAMIC_CAST<AstStatement*> (root -> element));
javaact.cpp:        p -> AllocateStatements(1);
javaact.cpp:        p -> AddStatement(ast_pool -> GenEmptyStatement(labels ->
javaact.cpp:    p -> right_brace_token =
javaact.cpp:        p -> Statement(p -> NumStatements() - 1) -> RightToken();
javaact.cpp:    AstSwitchStatement* p = ast_pool -> NewSwitchStatement();
javaact.cpp:    AstBlock* block = ast_pool -> NewBlock();
javaact.cpp:    block -> AllocateStatements(1); // allocate 1 element
javaact.cpp:    block -> left_brace_token = Token(1);
javaact.cpp:        block -> AddStatement
javaact.cpp:    block -> right_brace_token = Token(3);
javaact.cpp:    block -> SetTag(AstBlock::SWITCH);
javaact.cpp:    p -> switch_block = block;
javaact.cpp:    AstSwitchLabel* p = ast_pool -> NewSwitchLabel();
javaact.cpp:    p -> case_token = Token(1);
javaact.cpp:    p -> expression_opt = DYNAMIC_CAST<AstExpression*> (Sym(2));
javaact.cpp:    p -> colon_token = Token(3);
javaact.cpp:    AstWhileStatement* p = ast_pool -> NewWhileStatement();
javaact.cpp:    p -> while_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:    p -> statement = MakeBlock(5);
javaact.cpp:    AstBlock* block = ast_pool -> GenBlock();
javaact.cpp:    block -> AllocateStatements(1); // allocate 1 element
javaact.cpp:    block -> left_brace_token = Token(1);
javaact.cpp:    block -> AddStatement(p);
javaact.cpp:    block -> right_brace_token = Sym(5) -> RightToken();
javaact.cpp:    AstDoStatement* p = ast_pool -> NewDoStatement();
javaact.cpp:    p -> do_token = Token(1);
javaact.cpp:    p -> statement = MakeBlock(2);
javaact.cpp:    p -> while_token = Token(3);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(5));
javaact.cpp:    p -> semicolon_token = Token(7);
javaact.cpp:    AstBlock* block = ast_pool -> GenBlock();
javaact.cpp:    block -> AllocateStatements(1); // allocate 1 element
javaact.cpp:    block -> left_brace_token = Token(1);
javaact.cpp:    block -> AddStatement(p);
javaact.cpp:    block -> right_brace_token = Token(7);
javaact.cpp:    AstForStatement* p = ast_pool -> NewForStatement();
javaact.cpp:    p -> for_token = Token(1);
javaact.cpp:        p -> AllocateForInitStatements(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddForInitStatement(DYNAMIC_CAST<AstStatement*>
javaact.cpp:                                     (root -> element));
javaact.cpp:    p -> end_expression_opt = DYNAMIC_CAST<AstExpression*> (Sym(5));
javaact.cpp:        p -> AllocateForUpdateStatements(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddForUpdateStatement(DYNAMIC_CAST<AstExpressionStatement*>
javaact.cpp:                                       (root -> element));
javaact.cpp:    p -> statement = MakeBlock(9);
javaact.cpp:    AstBlock* block = ast_pool -> NewBlock();
javaact.cpp:    block -> AllocateStatements(1); // allocate 1 element
javaact.cpp:    block -> left_brace_token = Token(1);
javaact.cpp:    block -> AddStatement(p);
javaact.cpp:    block -> right_brace_token = Sym(9) -> RightToken();
javaact.cpp:    block -> no_braces = true;
javaact.cpp:    AstForeachStatement* p = ast_pool -> NewForeachStatement();
javaact.cpp:    p -> for_token = Token(1);
javaact.cpp:    p -> formal_parameter = DYNAMIC_CAST<AstFormalParameter*> (Sym(3));
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(5));
javaact.cpp:    p -> statement = MakeBlock(7);
javaact.cpp:    AstBlock* block = ast_pool -> NewBlock();
javaact.cpp:    block -> AllocateStatements(1); // allocate 1 element
javaact.cpp:    block -> left_brace_token = Token(1);
javaact.cpp:    block -> AddStatement(p);
javaact.cpp:    block -> right_brace_token = Sym(7) -> RightToken();
javaact.cpp:    block -> no_braces = true;
javaact.cpp:    AstAssertStatement* p = ast_pool -> NewAssertStatement();
javaact.cpp:    p -> assert_token = Token(1);
javaact.cpp:    p -> condition = DYNAMIC_CAST<AstExpression*> (Sym(2));
javaact.cpp:    p -> message_opt = DYNAMIC_CAST<AstExpression*> (Sym(4));
javaact.cpp:    p -> semicolon_token = Token(5);
javaact.cpp:    AstBreakStatement* p = ast_pool -> NewBreakStatement();
javaact.cpp:    p -> break_token = Token(1);
javaact.cpp:        p -> identifier_token_opt = Token(2);
javaact.cpp:    p -> semicolon_token = Token(3);
javaact.cpp:    AstContinueStatement* p = ast_pool -> NewContinueStatement();
javaact.cpp:    p -> continue_token = Token(1);
javaact.cpp:        p -> identifier_token_opt = Token(2);
javaact.cpp:    p -> semicolon_token = Token(3);
javaact.cpp:    AstReturnStatement* p = ast_pool -> NewReturnStatement();
javaact.cpp:    p -> return_token = Token(1);
javaact.cpp:    p -> expression_opt = DYNAMIC_CAST<AstExpression*> (Sym(2));
javaact.cpp:    p -> semicolon_token = Token(3);
javaact.cpp:    AstThrowStatement* p = ast_pool -> NewThrowStatement();
javaact.cpp:    p -> throw_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
javaact.cpp:    p -> semicolon_token = Token(3);
javaact.cpp:    AstSynchronizedStatement* p = ast_pool -> NewSynchronizedStatement();
javaact.cpp:    p -> synchronized_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(5));
javaact.cpp:    p -> block -> SetTag(AstBlock::SYNCHRONIZED);
javaact.cpp:    AstTryStatement* p = ast_pool -> NewTryStatement();
javaact.cpp:    p -> try_token = Token(1);
javaact.cpp:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(2));
javaact.cpp:        p -> AllocateCatchClauses(tail -> index + 1);
javaact.cpp:            root = root -> next;
javaact.cpp:            p -> AddCatchClause(DYNAMIC_CAST<AstCatchClause*>
javaact.cpp:                                (root -> element));
javaact.cpp:        p -> block -> SetTag(AstBlock::TRY_CLAUSE_WITH_FINALLY);
javaact.cpp:        for (unsigned i = 0; i < p -> NumCatchClauses(); i++)
javaact.cpp:            p -> CatchClause(i) -> block ->
javaact.cpp:        p -> finally_clause_opt = DYNAMIC_CAST<AstFinallyClause*> (Sym(4));
javaact.cpp:    AstCatchClause* p = ast_pool -> NewCatchClause();
javaact.cpp:    p -> catch_token = Token(1);
javaact.cpp:    p -> formal_parameter = DYNAMIC_CAST<AstFormalParameter*> (Sym(3));
javaact.cpp:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(5));
javaact.cpp:    AstFinallyClause* p = ast_pool -> NewFinallyClause();
javaact.cpp:    p -> finally_token = Token(1);
javaact.cpp:    p -> block = DYNAMIC_CAST<AstBlock*> (Sym(2));
javaact.cpp:    p -> block -> SetTag(AstBlock::FINALLY);
javaact.cpp:    Sym(1) = ast_pool -> NewThisExpression(Token(1));
javaact.cpp:    AstParenthesizedExpression* p = ast_pool -> NewParenthesizedExpression();
javaact.cpp:    p -> left_parenthesis_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
javaact.cpp:    p -> right_parenthesis_token = Token(4);
javaact.cpp:    AstThisExpression* p = ast_pool -> NewThisExpression(Token(3));
javaact.cpp:    p -> base_opt = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(1)));
javaact.cpp:    AstClassLiteral* p = ast_pool -> NewClassLiteral(Token(4));
javaact.cpp:    p -> type = MakeArrayType(1);
javaact.cpp:    AstClassCreationExpression* p = ast_pool -> NewClassCreationExpression();
javaact.cpp:    p -> new_token = Token(1);
javaact.cpp:    p -> class_type = DYNAMIC_CAST<AstTypeName*> (Sym(2));
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(3));
javaact.cpp:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(4));
javaact.cpp:    if (p -> class_body_opt)
javaact.cpp:        p -> class_body_opt -> identifier_token =
javaact.cpp:            p -> class_type -> IdentifierToken();
javaact.cpp:    AstClassCreationExpression* p = ast_pool -> NewClassCreationExpression();
javaact.cpp:    p -> new_token = Token(1);
javaact.cpp:    p -> type_arguments_opt = MakeExplicitTypeArguments(2);
javaact.cpp:    p -> class_type = DYNAMIC_CAST<AstTypeName*> (Sym(3));
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(4));
javaact.cpp:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(5));
javaact.cpp:    if (p -> class_body_opt)
javaact.cpp:        p -> class_body_opt -> identifier_token =
javaact.cpp:            p -> class_type -> IdentifierToken();
javaact.cpp:    AstClassCreationExpression* p = ast_pool -> NewClassCreationExpression();
javaact.cpp:    p -> base_opt = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> new_token = Token(3);
javaact.cpp:    p -> type_arguments_opt = MakeExplicitTypeArguments(4);
javaact.cpp:    p -> class_type = ast_pool -> NewTypeName(MakeSimpleName(5));
javaact.cpp:    p -> class_type -> type_arguments_opt = MakeExplicitTypeArguments(6);
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(7));
javaact.cpp:    p -> class_body_opt = DYNAMIC_CAST<AstClassBody*> (Sym(8));
javaact.cpp:    if (p -> class_body_opt)
javaact.cpp:        p -> class_body_opt -> identifier_token = Token(5);
javaact.cpp:    AstArrayCreationExpression* p = ast_pool -> NewArrayCreationExpression();
javaact.cpp:    p -> new_token = Token(1);
javaact.cpp:    p -> array_type = DYNAMIC_CAST<AstType*> (Sym(2));
javaact.cpp:    p -> AllocateDimExprs(tail -> index + 1);
javaact.cpp:        root = root -> next;
javaact.cpp:        p -> AddDimExpr(DYNAMIC_CAST<AstDimExpr*> (root -> element));
javaact.cpp:    p -> brackets_opt = DYNAMIC_CAST<AstBrackets*> (Sym(4));
javaact.cpp:    AstArrayCreationExpression* p = ast_pool -> NewArrayCreationExpression();
javaact.cpp:    p -> new_token = Token(1);
javaact.cpp:    p -> array_type = MakeArrayType(2);
javaact.cpp:    p -> array_initializer_opt = DYNAMIC_CAST<AstArrayInitializer*> (Sym(4));
javaact.cpp:    AstDimExpr* p = ast_pool -> NewDimExpr();
javaact.cpp:    p -> left_bracket_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
javaact.cpp:    p -> right_bracket_token = Token(3);
javaact.cpp:    Sym(1) = ast_pool -> NewBrackets(Token(1), Token(2));
javaact.cpp:    p -> right_bracket_token = Token(2);
javaact.cpp:    p -> dims++;
javaact.cpp:    Sym(1) = ast_pool -> NewSuperExpression(Token(1));
javaact.cpp:    AstSuperExpression* p = ast_pool -> NewSuperExpression(Token(4));
javaact.cpp:    p -> base_opt = ast_pool -> NewTypeName(DYNAMIC_CAST<AstName*> (Sym(1)));
javaact.cpp:    AstFieldAccess* p = ast_pool -> NewFieldAccess();
javaact.cpp:    p -> base = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> identifier_token = Token(4);
javaact.cpp:    AstMethodInvocation* p = ast_pool -> NewMethodInvocation(Token(1));
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(2));
javaact.cpp:    AstMethodInvocation* p = ast_pool -> NewMethodInvocation(Token(4));
javaact.cpp:    p -> base_opt = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> type_arguments_opt = MakeExplicitTypeArguments(3);
javaact.cpp:    p -> arguments = DYNAMIC_CAST<AstArguments*> (Sym(5));
javaact.cpp:    AstArrayAccess* p = ast_pool -> NewArrayAccess();
javaact.cpp:    p -> base = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> left_bracket_token = Token(2);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:    p -> right_bracket_token = Token(4);
javaact.cpp:        ast_pool -> NewPostUnaryExpression(AstPostUnaryExpression::PLUSPLUS);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> post_operator_token = Token(2);
javaact.cpp:        ast_pool -> NewPostUnaryExpression(AstPostUnaryExpression::MINUSMINUS);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> post_operator_token = Token(2);
javaact.cpp:    switch (lex_stream -> Kind(Token(1)))
javaact.cpp:    AstPreUnaryExpression* p = ast_pool -> NewPreUnaryExpression(tag);
javaact.cpp:    p -> pre_operator_token = Token(1);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(2));
javaact.cpp:    AstCastExpression* p = ast_pool -> NewCastExpression();
javaact.cpp:    p -> left_parenthesis_token = Token(1);
javaact.cpp:    p -> type = type;
javaact.cpp:    p -> right_parenthesis_token = Token(tokennum);
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(tokennum + 1));
javaact.cpp:    while (p -> base_opt)
javaact.cpp:        p = p -> base_opt;
javaact.cpp:    p -> base_opt = MakeTypeArguments(2);
javaact.cpp:    switch (lex_stream -> Kind(Token(2)))
javaact.cpp:    AstBinaryExpression* p = ast_pool -> NewBinaryExpression(tag);
javaact.cpp:    p -> left_expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> binary_operator_token = Token(2);
javaact.cpp:    p -> right_expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:    AstInstanceofExpression* p = ast_pool -> NewInstanceofExpression();
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> instanceof_token = Token(2);
javaact.cpp:    p -> type = DYNAMIC_CAST<AstType*> (Sym(3));
javaact.cpp:    AstConditionalExpression* p = ast_pool -> NewConditionalExpression();
javaact.cpp:    p -> test_expression = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> question_token = Token(2);
javaact.cpp:    p -> true_expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:    p -> colon_token = Token(4);
javaact.cpp:    p -> false_expression = DYNAMIC_CAST<AstExpression*> (Sym(5));
javaact.cpp:    switch (lex_stream -> Kind(Token(2)))
javaact.cpp:        ast_pool -> NewAssignmentExpression(tag, Token(2));
javaact.cpp:    p -> left_hand_side = DYNAMIC_CAST<AstExpression*> (Sym(1));
javaact.cpp:    p -> expression = DYNAMIC_CAST<AstExpression*> (Sym(3));
javaact.cpp:// is turned on, we skip to the end-of-file token.
javaact.cpp:        lex_stream -> Reset(lex_stream -> NumTokens() - 1);
javaact.cpp:        if (lex_stream -> Kind(token) == TK_LBRACE)
javaact.cpp:            lex_stream -> Reset(lex_stream -> MatchingBrace(token));
javaact.cpp:    AstWildcard* p = ast_pool -> NewWildcard(Token(1));
javaact.cpp:        p -> extends_token_opt = Token(2);
javaact.cpp:        p -> bounds_opt = DYNAMIC_CAST<AstType*> (Sym(4));
javaact.cpp:        p -> super_token_opt = Token(3);
javaact.cpp:        p -> bounds_opt = DYNAMIC_CAST<AstType*> (Sym(4));
javaact.cpp:    AstTypeParameter* p = ast_pool -> NewTypeParameter(Token(1));
javaact.cpp:        p -> AllocateBounds(tail -> index + 1);
javaact.cpp:            p -> AddBound(DYNAMIC_CAST<AstTypeName*> (root -> element));
javaact.cpp:            root = root -> next;
astGeneration/javaact.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
astGeneration/javaact.h:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
Binary file javaact.o matches
javadcl.h:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
javadcl.h:            -9,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,-146,-26,-11,0,-306,-4,0,
javadcl.h:            -590,0,0,0,-15,0,-2,0,0,-16,
javadcl.h:            0,0,0,0,0,-22,0,0,-10,0,
javadcl.h:            0,0,0,0,0,-182,0,0,0,-472,
javadcl.h:            0,0,0,0,-180,-596,0,-62,0,-187,
javadcl.h:            -54,0,0,-12,-602,-503,0,0,0,0,
javadcl.h:            0,-473,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,-75,0,0,0,0,0,0,0,
javadcl.h:            0,-214,0,0,0,0,0,-184,0,-56,
javadcl.h:            0,0,0,0,0,0,-308,-24,0,0,
javadcl.h:            -373,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-581,0,
javadcl.h:            -517,0,0,-662,-501,0,-3,0,-13,0,
javadcl.h:            0,0,0,-502,0,0,0,0,0,0,
javadcl.h:            -647,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,-14,0,0,0,-114,-18,0,0,0,
javadcl.h:            -242,0,0,0,0,0,-516,0,-538,0,
javadcl.h:            0,0,0,0,0,-19,-67,0,0,0,
javadcl.h:            0,0,0,-289,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,-5,0,0,-47,0,-48,
javadcl.h:            0,0,-326,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,-563,0,0,0,0,0,-51,
javadcl.h:            0,0,0,0,0,0,0,0,0,-232,
javadcl.h:            -32,0,-150,0,0,0,0,-148,0,0,
javadcl.h:            0,0,0,0,0,-74,0,-64,-76,0,
javadcl.h:            0,0,0,0,0,0,0,0,-69,0,
javadcl.h:            0,0,0,-288,-20,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-488,0,-319,
javadcl.h:            0,0,-65,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-8,0,0,
javadcl.h:            0,0,-21,0,0,-164,0,0,0,0,
javadcl.h:            0,0,-80,0,0,-35,-27,-328,0,-294,
javadcl.h:            -331,-83,0,-36,-29,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-587,0,
javadcl.h:            0,-7,0,0,0,-30,0,-293,0,0,
javadcl.h:            0,0,-285,0,-113,0,0,0,0,0,
javadcl.h:            0,0,0,0,-449,0,0,-513,0,-38,
javadcl.h:            0,0,-41,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-325,0,0,
javadcl.h:            0,0,0,0,-189,-206,-60,-208,0,0,
javadcl.h:            0,0,-181,0,0,-42,-520,-43,0,-230,
javadcl.h:            0,0,-44,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,-441,0,0,-420,0,
javadcl.h:            0,0,0,0,0,0,0,0,-564,0,
javadcl.h:            0,0,-594,0,-518,-77,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-45,-97,0,-84,
javadcl.h:            0,0,-49,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,-556,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-489,-512,0,0,
javadcl.h:            0,0,0,0,0,-50,0,0,-597,-82,
javadcl.h:            -318,0,-52,0,0,0,0,-53,0,-55,
javadcl.h:            -204,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-639,0,
javadcl.h:            -600,0,-623,0,-625,0,0,0,0,0,
javadcl.h:            0,0,0,-628,0,0,0,-428,0,0,
javadcl.h:            0,0,0,-640,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-663,-543,0,0,
javadcl.h:            0,0,0,0,0,-629,0,0,-188,-632,
javadcl.h:            0,0,0,0,0,0,0,-633,-57,-569,
javadcl.h:            -470,-88,-471,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-670,0,
javadcl.h:            -635,0,-636,-172,-322,-330,0,0,-58,0,
javadcl.h:            0,0,-437,0,-59,-580,-61,-611,0,0,
javadcl.h:            0,0,0,-672,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-71,0,0,
javadcl.h:            0,0,0,0,0,-582,0,-491,0,-583,
javadcl.h:            -677,0,0,0,0,0,0,0,-66,-68,
javadcl.h:            -70,-78,-613,0,-85,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-681,0,
javadcl.h:            -86,0,-87,-100,0,-186,-79,-103,0,0,
javadcl.h:            -292,-417,-104,-105,-106,-107,-457,-320,0,0,
javadcl.h:            0,0,0,-39,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,-72,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-89,0,0,0,
javadcl.h:            0,0,-574,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,-91,0,-108,-63,0,0,
javadcl.h:            0,0,0,0,-37,0,0,0,0,0,
javadcl.h:            -487,-92,-140,-588,0,0,-109,0,0,0,
javadcl.h:            0,0,0,-452,0,-544,-96,0,0,-304,
javadcl.h:            0,0,-99,0,-17,0,0,0,-178,-291,
javadcl.h:            0,0,0,0,0,0,0,-454,-163,0,
javadcl.h:            0,-302,-167,0,0,0,0,0,0,0,
javadcl.h:            0,0,-81,0,-110,0,-547,0,0,0,
javadcl.h:            0,0,0,0,0,0,-309,-482,-505,0,
javadcl.h:            -111,0,0,0,0,0,-409,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-177,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-410,-73,
javadcl.h:            0,0,0,0,-411,-112,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-371,
javadcl.h:            0,0,0,0,0,0,-421,0,0,0,
javadcl.h:            0,0,0,0,-678,-115,0,-116,-117,0,
javadcl.h:            -118,0,-370,-630,-430,-676,-413,0,0,0,
javadcl.h:            -508,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,-551,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,-205,0,0,0,0,
javadcl.h:            0,0,-535,-119,0,-120,-122,-127,-128,-129,
javadcl.h:            -132,-133,-134,0,-135,-136,-137,-138,-139,-141,
javadcl.h:            -142,0,-530,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-557,0,
javadcl.h:            0,-90,-93,-123,-124,-458,-160,0,-648,-656,
javadcl.h:            -143,0,-145,-151,-152,-156,-165,-169,-170,-171,
javadcl.h:            -174,-175,-176,-414,-433,-434,-435,0,0,0,
javadcl.h:            0,0,0,-641,0,0,0,0,0,0,
javadcl.h:            0,-162,-179,-185,-190,-195,0,-196,-199,-200,
javadcl.h:            -203,-207,-231,-233,-234,-235,-236,-276,-280,-281,
javadcl.h:            0,0,0,0,0,0,0,0,-415,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-282,
javadcl.h:            -283,0,0,0,0,-284,-453,0,0,-286,
javadcl.h:            -287,-296,-436,0,0,-498,0,0,-321,0,
javadcl.h:            0,0,0,0,-173,0,0,0,0,-570,
javadcl.h:            0,-191,0,0,0,-484,-297,0,0,0,
javadcl.h:            0,0,0,0,0,-609,0,-539,-298,0,
javadcl.h:            0,-485,-561,-591,-592,-299,-300,0,-301,-621,
javadcl.h:            0,0,0,-228,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,-303,-307,0,0,0,
javadcl.h:            -310,0,0,0,-595,-598,0,-311,0,0,
javadcl.h:            -446,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-147,0,0,0,
javadcl.h:            0,-312,0,0,0,0,0,0,0,0,
javadcl.h:            -599,-627,0,-313,-314,-601,0,-674,0,0,
javadcl.h:            0,0,0,-192,0,0,0,0,0,0,
javadcl.h:            -316,0,0,0,-324,-327,0,0,0,0,
javadcl.h:            0,0,0,0,0,-337,-338,-631,-634,0,
javadcl.h:            0,0,-144,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-197,0,
javadcl.h:            0,0,0,0,-339,-344,-345,0,0,-657,
javadcl.h:            0,0,-346,-348,0,-658,-349,0,0,-504,
javadcl.h:            0,0,0,0,0,-350,0,0,0,0,
javadcl.h:            -351,-352,0,0,0,0,0,0,0,0,
javadcl.h:            -353,-354,-355,-356,0,0,-357,0,0,-542,
javadcl.h:            0,0,0,0,0,-198,0,0,0,0,
javadcl.h:            -202,0,0,0,0,0,-358,0,0,0,
javadcl.h:            -359,-360,-361,-362,0,0,-363,0,0,-364,
javadcl.h:            -365,0,-366,-367,-368,-369,0,-477,0,0,
javadcl.h:            0,0,0,0,-46,0,0,0,0,0,
javadcl.h:            0,-183,0,-305,0,0,-374,0,0,0,
javadcl.h:            0,0,-323,0,0,0,-332,0,-375,-333,
javadcl.h:            -334,-335,-336,0,-376,-377,0,-378,-379,0,
javadcl.h:            -380,-381,0,0,-382,-383,-384,-385,-386,-387,
javadcl.h:            -388,-389,0,0,0,0,0,0,0,-390,
javadcl.h:            0,-34,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-391,0,0,
javadcl.h:            0,0,-392,-393,0,0,0,0,-394,-395,
javadcl.h:            0,0,-396,-397,-149,0,0,0,-398,0,
javadcl.h:            0,-98,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-340,-399,-343,
javadcl.h:            -400,-401,-402,-403,0,-404,-405,-406,0,-407,
javadcl.h:            -412,-416,-427,-429,-431,-432,-438,-439,-443,0,
javadcl.h:            -444,-445,-448,0,0,0,0,0,0,0,
javadcl.h:            0,-159,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,-479,-450,0,-455,-459,-419,
javadcl.h:            -425,-460,0,0,0,-461,-462,-467,0,0,
javadcl.h:            -468,-475,0,0,0,0,-478,-483,0,-486,
javadcl.h:            -492,0,-494,0,0,0,0,-423,0,0,
javadcl.h:            0,0,0,-426,0,0,0,0,-495,-496,
javadcl.h:            0,0,0,0,-497,-499,0,0,-622,0,
javadcl.h:            -500,0,0,0,-506,0,0,-329,0,0,
javadcl.h:            0,0,-507,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-511,0,
javadcl.h:            0,-522,-523,0,-456,0,-529,-533,0,0,
javadcl.h:            -534,-553,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,-440,0,0,-540,0,-528,
javadcl.h:            0,-541,0,0,0,0,-550,0,0,0,
javadcl.h:            -559,-560,0,0,0,0,-562,-571,0,-573,
javadcl.h:            0,0,-578,0,0,0,0,0,-579,-584,
javadcl.h:            0,0,0,-638,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-465,
javadcl.h:            0,0,0,0,-466,0,0,0,0,0,
javadcl.h:            -476,0,0,0,0,-493,-515,-585,0,0,
javadcl.h:            0,0,0,-586,-589,0,-593,-603,-604,-605,
javadcl.h:            0,-606,-607,-608,-610,-612,0,-614,-615,-620,
javadcl.h:            -624,0,0,0,-31,0,0,0,0,0,
javadcl.h:            -521,0,0,0,0,-524,-527,0,0,0,
javadcl.h:            0,-531,-532,0,0,0,-536,0,-552,0,
javadcl.h:            0,-576,0,0,-642,-643,0,-645,-646,-649,
javadcl.h:            -651,0,0,-654,-655,-659,-660,0,0,-661,
javadcl.h:            -665,-673,0,-675,0,-679,-680,0,0,-33,
javadcl.h:            0,0,0,0,0,0,0,0,0,-121,
javadcl.h:            0,0,0,0,0,0,0,0,0,-153,
javadcl.h:            0,0,0,0,0,0,0,0,0,-154,
javadcl.h:            0,0,0,0,0,0,0,0,0,-157,
javadcl.h:            0,0,0,0,0,0,0,0,0,-158,
javadcl.h:            0,0,0,0,0,0,0,0,0,-161,
javadcl.h:            0,0,0,0,0,0,0,0,0,-166,
javadcl.h:            0,0,0,0,0,0,0,0,0,-201,
javadcl.h:            0,0,0,0,0,0,0,0,0,-227,
javadcl.h:            0,0,0,0,0,0,0,0,0,-255,
javadcl.h:            0,0,0,0,0,0,0,0,0,-277,
javadcl.h:            0,0,0,0,0,0,0,0,0,-290,
javadcl.h:            0,0,0,0,0,0,0,0,0,-347,
javadcl.h:            0,-256,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-577,0,0,
javadcl.h:            0,0,-616,-619,0,0,0,0,-653,-664,
javadcl.h:            0,0,0,0,0,0,0,-372,0,0,
javadcl.h:            0,0,0,0,0,0,0,-408,0,0,
javadcl.h:            0,0,0,0,0,0,0,-422,0,0,
javadcl.h:            0,0,0,0,0,0,0,-537,0,0,
javadcl.h:            0,0,0,0,0,0,0,-554,0,0,
javadcl.h:            0,0,0,0,0,0,0,-555,0,0,
javadcl.h:            0,0,0,0,0,0,0,-637,0,0,
javadcl.h:            0,0,0,0,0,0,0,-155,0,0,
javadcl.h:            0,0,0,0,0,0,-474,0,0,0,
javadcl.h:            0,0,0,-480,0,0,0,0,0,0,
javadcl.h:            -481,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-278,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-229,0,
javadcl.h:            0,0,0,0,0,0,0,0,-257,0,
javadcl.h:            0,0,0,0,0,0,0,0,-279,0,
javadcl.h:            0,0,0,0,0,0,0,0,-225,0,
javadcl.h:            0,0,0,0,0,-253,0,0,0,0,
javadcl.h:            0,0,-258,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-226,
javadcl.h:            0,0,0,0,0,-254,0,0,0,0,
javadcl.h:            0,-259,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-222,0,0,
javadcl.h:            0,0,-250,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-260,0,0,
javadcl.h:            0,0,-223,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,-224,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,-251,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,-252,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-261,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-262,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-215,0,
javadcl.h:            0,0,0,0,0,0,0,0,-216,0,
javadcl.h:            0,0,0,0,0,0,0,0,-217,0,
javadcl.h:            0,0,0,0,0,0,0,0,-218,0,
javadcl.h:            0,0,0,0,0,0,0,0,-243,0,
javadcl.h:            0,0,0,0,0,0,0,0,-244,0,
javadcl.h:            0,0,0,0,0,0,0,0,-245,0,
javadcl.h:            0,0,0,0,0,0,0,0,-246,0,
javadcl.h:            0,0,0,0,0,0,0,0,-264,0,
javadcl.h:            0,0,0,0,0,0,0,0,-265,0,
javadcl.h:            0,0,0,0,0,0,0,0,-266,0,
javadcl.h:            0,0,0,0,0,0,0,0,-267,0,
javadcl.h:            0,0,0,0,0,0,0,0,-219,0,
javadcl.h:            0,0,0,0,0,0,0,-220,0,0,
javadcl.h:            0,0,0,0,0,0,-221,0,0,0,
javadcl.h:            0,0,0,0,0,-247,0,0,0,0,
javadcl.h:            0,0,0,0,-248,0,0,0,0,0,
javadcl.h:            0,0,0,-249,0,0,0,0,0,0,
javadcl.h:            0,0,-268,0,0,0,0,0,0,0,
javadcl.h:            0,-269,0,0,0,0,0,0,0,0,
javadcl.h:            -270,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-666,0,0,-558,
javadcl.h:            0,0,0,0,0,0,-652,0,0,0,
javadcl.h:            0,0,0,-671,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-315,0,0,-667,
javadcl.h:            0,-668,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,-209,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-210,0,0,0,
javadcl.h:            0,-237,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-238,
javadcl.h:            0,0,0,0,0,0,0,-271,0,0,
javadcl.h:            0,0,0,0,0,-272,0,0,0,0,
javadcl.h:            0,0,0,-40,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-94,
javadcl.h:            0,0,0,0,0,-95,0,0,0,0,
javadcl.h:            0,-101,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-102,0,0,
javadcl.h:            0,0,0,-125,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-126,
javadcl.h:            0,0,0,0,0,-130,0,0,0,0,
javadcl.h:            0,-131,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-211,0,0,
javadcl.h:            0,0,0,-212,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-213,
javadcl.h:            0,0,0,0,0,-239,0,0,0,0,
javadcl.h:            0,-240,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-241,0,0,
javadcl.h:            0,0,0,-273,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-274,
javadcl.h:            0,0,0,0,0,-275,0,0,0,0,
javadcl.h:            0,-469,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-424,0,0,
javadcl.h:            -464,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,-626,0,0,0,0,0,0,
javadcl.h:            0,-263,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-650,0,0,
javadcl.h:            0,0,0,0,0,0,-1,0,0,0,
javadcl.h:            0,0,0,0,0,-194,0,0,0,0,
javadcl.h:            -575,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,-418,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-572,0,0,
javadcl.h:            0,0,0,0,-193,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-644,0,0,0,
javadcl.h:            0,0,0,-23,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,-447,0,0,
javadcl.h:            0,0,-545,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-490,0,
javadcl.h:            0,0,-341,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-669,0,0,0,
javadcl.h:            0,0,0,0,0,0,-317,0,0,0,
javadcl.h:            0,0,0,0,-514,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,0,-463,
javadcl.h:            0,0,0,0,0,0,0,0,-28,0,
javadcl.h:            0,0,0,0,0,0,0,-168,0,0,
javadcl.h:            0,-295,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-442,0,
javadcl.h:            0,-25,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,-6,0,0,0,
javadcl.h:            0,0,0,0,-546,0,0,0,0,0,
javadcl.h:            -519,0,0,0,0,0,0,0,0,0,
javadcl.h:            0,0,0,0,0,0,0,0,-548,0,
javadcl.h:            0,0,0,0,0,0,0,-549,0,0,
javadcl.h:            0,0,0,0,0,-617,0,0,0,0,
javadcl.h:            -618,0,0,0,0,0,0,0,0,0,
javadcl.h:            -525,0,0,0,0,0,0,0,-526,0,
javadcl.h:            0,0,0,0,-565,0,0,0,0,0,
javadcl.h:            -566,0,0,0,0,0,0,0,-567,0,
javadcl.h:            0,-568,0,0,0,0,0,0,0,-342,
javadcl.h:            0,0,0,0,0,0,0,-451,0,0,
javadcl.h:            0,0,0,0,0,-509,0,0,0,0,
javadcl.h:            0,0,0,0,-510,0,0,0,0,0,
javadcl.h:const   signed short *CLASS_HEADER base_check = &(check_table[0]) - (NUM_RULES + 1);
javadcl.h:            '-','-','=','=','<','=','>','=','!','=',
javadcl.h:            '<','<','>','>','>','>','>','+','=','-',
javadcl.h:            '>','>','=','|','|','&','&','+','-','!',
orchestration/javadef.h:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
astGeneration/javaprs.h:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
astGeneration/javaprs.h:    static int original_state(int state) { return -base_check[state]; }
orchestration/javasym.h:// DO NOT MODIFY THIS FILE - it is generated using jikespg on java.g.
Binary file jikes matches
declarations/jikes/jikes.cpp:    files = compiler -> parseOptions(argc, argv);
declarations/jikes/jikes.cpp:    if (compiler -> getOptions() -> help)
declarations/jikes/jikes.cpp:               "-bootclasspath path location of system classes [default '']\n"
declarations/jikes/jikes.cpp:               "-classpath path     location of user classes and source files [default .]\n"
declarations/jikes/jikes.cpp:               "-d dir              write class files in directory dir [default .]\n"
declarations/jikes/jikes.cpp:               "-debug              no effect (ignored for compatibility)\n"
declarations/jikes/jikes.cpp:               "-depend | -Xdepend  recompile all used classes\n"
declarations/jikes/jikes.cpp:               "-deprecation        report uses of deprecated features\n"
declarations/jikes/jikes.cpp:               "-encoding encoding  use specified encoding to read source files\n"
declarations/jikes/jikes.cpp:               "-extdirs path       location of zip/jar files with platform extensions\n"
declarations/jikes/jikes.cpp:               "-g | -g:none | -g:{lines,vars,source}\n"
declarations/jikes/jikes.cpp:               "-J...               no effect (ignored for compatibility)\n"
declarations/jikes/jikes.cpp:               "-nowarn             javac-compatible equivalent of +Z0\n"
declarations/jikes/jikes.cpp:               "-nowrite            do not write any class files, useful with -verbose\n"
declarations/jikes/jikes.cpp:               "-O                  optimize bytecode (presently does nothing)\n"
declarations/jikes/jikes.cpp:               "-source release     interpret source by Java SDK release rules\n"
declarations/jikes/jikes.cpp:               "-sourcepath path    location of user source files [default '']\n"
declarations/jikes/jikes.cpp:               "-target release     output bytecode for Java SDK release rules\n"
declarations/jikes/jikes.cpp:               "-verbose            list files read and written\n"
declarations/jikes/jikes.cpp:               "-Werror             javac-compatible equivalent of +Z2\n"
declarations/jikes/jikes.cpp:               "-Xstdout            redirect output listings to stdout\n"
declarations/jikes/jikes.cpp:               "-Xswitchcheck       warn about fallthrough between switch statement cases\n"
declarations/jikes/jikes.cpp:               "+D                  report errors immediately in emacs-form without buffering\n"
declarations/jikes/jikes.cpp:               "+E                  list errors in emacs-form\n"
declarations/jikes/jikes.cpp:               "+P                  pedantic compilation - issues lots of warnings\n"
declarations/jikes/jikes.cpp:               "+O numbytes         call no-op op_trap() for bytecodes of the given length\n"
declarations/jikes/jikes.cpp:               "-help | --help      display this message and exit\n"
declarations/jikes/jikes.cpp:               "-version | --version  display version and contact information, and exit\n");
declarations/jikes/jikes.cpp:    else if (compiler -> getOptions() -> version)
declarations/jikes/jikes.cpp:        return_code = compiler -> compile(files);
declarations/jikes/jikes.cpp:        printf("For more help, try -help or -version.\n");
Binary file jikes.o matches
declarations/jikes/jikesapi.cpp:            Coutput << bad_options[i] -> GetErrorMessage() << endl;
declarations/jikes/jikesapi.cpp:        int n = args -> argc - opt -> first_file_index;
declarations/jikes/jikesapi.cpp:            const char *o = args -> argv[opt -> first_file_index + i];
declarations/jikes/jikesapi.cpp:    int return_code = control -> return_code;
declarations/jikes/jikesapi.cpp:    Coutput << error -> getErrorReport() << endl;
declarations/jikes/jikesapi.cpp:    if (result && (result->getBuffer() == NULL))
declarations/jikes/jikesapi.cpp:    if (result && (! result -> isValid()))
declarations/jikes/jikesapi.cpp:        maxSize -= size;
declarations/jikes/jikesapi.cpp:    JikesAPI::getInstance() -> stat(fileName, &status);
declarations/jikes/jikesapi.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/jikes/jikesapi.h:    char* extdirs;       // Location of external drop-in jars
declarations/jikes/jikesapi.h:    // 0 if false, non-zero if true
Binary file jikesapi.o matches
declarations/platform/long.cpp:    // But, since not all compilers follow these rules, we special-case on
declarations/platform/long.cpp:        return BaseLong((HighWord() << n) | (lo >> (32 - n)), lo << n);
declarations/platform/long.cpp:    return BaseLong(LowWord() << (n - 32), 0);
declarations/platform/long.cpp:BaseLong BaseLong::operator- () const
declarations/platform/long.cpp:BaseLong BaseLong::operator- (const BaseLong op) const
declarations/platform/long.cpp:    return *this + (-op);
declarations/platform/long.cpp:BaseLong &BaseLong::operator-= (const BaseLong op)
declarations/platform/long.cpp:    return *this = *this - op;
declarations/platform/long.cpp:BaseLong BaseLong::operator-- (int)
declarations/platform/long.cpp:    *this -= 1;
declarations/platform/long.cpp:BaseLong BaseLong::operator-- ()
declarations/platform/long.cpp:    return *this -= 1;
declarations/platform/long.cpp:            remainder_high -= divisor.LowWord();
declarations/platform/long.cpp:            remainder -= divisor;
declarations/platform/long.cpp:    // But, since not all compilers follow these rules, we special-case on
declarations/platform/long.cpp:        return ULongInt(hi >> n, (hi << (32 - n)) | (LowWord() >> n));
declarations/platform/long.cpp:    return ULongInt(0, HighWord() >> (n - 32));
declarations/platform/long.cpp:    u8 a = negative_dividend ? -(i8) value.words : value.words,
declarations/platform/long.cpp:       b = negative_divisor  ? -(i8) op.value.words : op.value.words;
declarations/platform/long.cpp:    return LongInt((negative_dividend ^ negative_divisor) ? -(a / b) : a / b);
declarations/platform/long.cpp:    BaseLong a = (negative_dividend ? -(*this) : (BaseLong) *this),
declarations/platform/long.cpp:             b = (negative_divisor  ? -(op)    : (BaseLong) op),
declarations/platform/long.cpp:    return (negative_dividend ^ negative_divisor ? -quotient : quotient);
declarations/platform/long.cpp:    u8 a = negative_dividend ? -(i8) value.words : value.words,
declarations/platform/long.cpp:       b = negative_divisor  ? -(i8) op.value.words : op.value.words;
declarations/platform/long.cpp:    return LongInt(negative_dividend ? -(a % b) : a % b);
declarations/platform/long.cpp:    BaseLong a = (negative_dividend ? -(*this) : (BaseLong) *this),
declarations/platform/long.cpp:             b = (negative_divisor  ? -(op)    : (BaseLong) op),
declarations/platform/long.cpp:    return (negative_dividend ? -remainder : remainder);
declarations/platform/long.cpp:    // Correct compilers treat x >> 0 as x, and x >> 32+ as x<0 ? -1 : 0.
declarations/platform/long.cpp:    // But, since not all compilers follow these rules, we special-case on
declarations/platform/long.cpp:         return LongInt(hi >> n, (hi << (32 - n)) | (LowWord() >> n));
declarations/platform/long.cpp:    return LongInt(shift, hi >> (n - 32));
declarations/platform/long.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/platform/long.h:    BaseLong operator-(const BaseLong) const; // binary subtraction
declarations/platform/long.h:    BaseLong operator-() const;     // unary minus
declarations/platform/long.h:    BaseLong& operator-=(const BaseLong); // subtract and assign
declarations/platform/long.h:    BaseLong operator--(int);      // postfix decrement
declarations/platform/long.h:    BaseLong operator--();     // prefix decrement
declarations/platform/long.h:    bool operator&&(const BaseLong) const; // logical AND (not short-circuit)
declarations/platform/long.h:    bool operator<(const LongInt) const; // less-than
declarations/platform/long.h:    bool operator>(const LongInt) const; // greater-than
declarations/platform/long.h:    bool operator<=(const LongInt) const; // less-than or equal
declarations/platform/long.h:    bool operator>=(const LongInt) const; // greater-than or equal
declarations/platform/long.h:    bool operator<(const ULongInt) const; // less-than
declarations/platform/long.h:    bool operator>(const ULongInt) const; // greater-than
declarations/platform/long.h:    bool operator<=(const ULongInt) const; // less-than or equal
declarations/platform/long.h:    bool operator>=(const ULongInt) const; // greater-than or equal
Binary file long.o matches
astGeneration/lookup.cpp:    prime_index = -1;
astGeneration/lookup.cpp:        int i = hash(element -> device, element -> inode);
astGeneration/lookup.cpp:        element -> next = base[i];
astGeneration/lookup.cpp:    for (Element* element = base[k]; element; element = element -> next)
astGeneration/lookup.cpp:        if (element -> device == device && element -> inode == inode)
astGeneration/lookup.cpp:            return element -> directory_symbol;
astGeneration/lookup.cpp:    element -> next = base[k];
astGeneration/lookup.cpp:    for (entry = base[k]; entry; entry = entry -> next)
astGeneration/lookup.cpp:        if (len == entry -> length &&
astGeneration/lookup.cpp:            memcmp(entry -> name, str, len * sizeof(char)) == 0)
astGeneration/lookup.cpp:            return entry -> IsDummy() ? (DirectoryEntry*) NULL : entry;
astGeneration/lookup.cpp:        int k = Hash(e -> name, e -> length) % hash_size;
astGeneration/lookup.cpp:        e -> next = base[k];
astGeneration/lookup.cpp:    for (entry = base[k]; entry; entry = entry -> next)
astGeneration/lookup.cpp:        if (len == entry -> length &&
astGeneration/lookup.cpp:            memcmp(entry -> name, str, len * sizeof(char)) == 0)
astGeneration/lookup.cpp:    entry -> Initialize(directory_symbol, str, len);
astGeneration/lookup.cpp:    entry -> next = base[k];
astGeneration/lookup.cpp:    return entry ? entry -> Image() : entry;
astGeneration/lookup.cpp:    int length = image -> length;
astGeneration/lookup.cpp:        lower_name[i] = Case::ToAsciiLower(image -> name[i]);
astGeneration/lookup.cpp:    for (entry = base[k]; entry; entry = entry -> next)
astGeneration/lookup.cpp:        if (length == entry -> length &&
astGeneration/lookup.cpp:            memcmp(entry -> name, lower_name, length * sizeof(char)) == 0)
astGeneration/lookup.cpp:        folded_entry -> Initialize(image, lower_name, length);
astGeneration/lookup.cpp:        folded_entry -> next = base[k];
astGeneration/lookup.cpp:        char* dirname = this -> directory -> DirectoryName();
astGeneration/lookup.cpp:        int length = this -> directory -> DirectoryNameLength() +
astGeneration/lookup.cpp:            this -> length + 1; // +1 for '/'
astGeneration/lookup.cpp:        if (dirname[this -> directory -> DirectoryNameLength() - 1] != U_SLASH)
astGeneration/lookup.cpp:        strcat(file_name, this -> name);
astGeneration/lookup.cpp:        if (JikesAPI::getInstance() -> stat(file_name, &status) == 0)
astGeneration/lookup.cpp:        int k = ns -> hash_address % hash_size;
astGeneration/lookup.cpp:        ns -> next = base[k];
astGeneration/lookup.cpp:    for (symbol = base[k]; symbol; symbol = (NameSymbol*) symbol -> next)
astGeneration/lookup.cpp:        if (hash_address == symbol -> hash_address &&
astGeneration/lookup.cpp:            len == symbol -> NameLength() &&
astGeneration/lookup.cpp:            memcmp(symbol -> Name(), str, len * sizeof(wchar_t)) == 0)
astGeneration/lookup.cpp:    symbol -> Initialize(str, len, hash_address, index);
astGeneration/lookup.cpp:    symbol -> next = base[k];
astGeneration/lookup.cpp:        int k = type -> hash_address % hash_size;
astGeneration/lookup.cpp:        type -> next_type = base[k];
astGeneration/lookup.cpp:    for (TypeSymbol* type = base[k]; type; type = type -> next_type)
astGeneration/lookup.cpp:        assert(type -> fully_qualified_name);
astGeneration/lookup.cpp:        Utf8LiteralValue* fully_qualified_name = type -> fully_qualified_name;
astGeneration/lookup.cpp:        if (len == fully_qualified_name -> length &&
astGeneration/lookup.cpp:            memcmp(fully_qualified_name -> value, str,
astGeneration/lookup.cpp:    assert(type && type -> fully_qualified_name);
astGeneration/lookup.cpp:    unsigned hash_address = Hash(type -> fully_qualified_name -> value,
astGeneration/lookup.cpp:                                 type -> fully_qualified_name -> length);
astGeneration/lookup.cpp:    for (TypeSymbol* t = base[k]; t; t = t -> next_type)
astGeneration/lookup.cpp:    type -> hash_address = hash_address;
astGeneration/lookup.cpp:    type -> next_type = base[k];
astGeneration/lookup.cpp:    const wchar_t* name = literal -> Name() + 1;
astGeneration/lookup.cpp:    int len = literal -> NameLength() - 2; // discard ''
astGeneration/lookup.cpp:        return literal -> value = bad_value;
astGeneration/lookup.cpp:        return literal -> value = FindOrInsert((i4) name[0]);
astGeneration/lookup.cpp:    i4 value = -1;
astGeneration/lookup.cpp:                    value = value * 8 + name[i] - U_0;
astGeneration/lookup.cpp:    return literal -> value = (value < 0 || value > 65535 ? bad_value
astGeneration/lookup.cpp:    const wchar_t* head = literal -> Name() + 1; // point to X
astGeneration/lookup.cpp:    const wchar_t* tail = &literal -> Name()[literal -> NameLength() - 1];
astGeneration/lookup.cpp:    head--;
astGeneration/lookup.cpp:    for (int i = 0; i < 32 && tail > head; i += 4, tail--)
astGeneration/lookup.cpp:    const wchar_t* head = literal -> Name(); // point to initial '0'
astGeneration/lookup.cpp:    const wchar_t* tail = &head[literal -> NameLength() - 1];
astGeneration/lookup.cpp:    head--;
astGeneration/lookup.cpp:    for (int i = 0; i < 30 && tail > head; i += 3, tail--)
astGeneration/lookup.cpp:        u4 d = *tail - U_0;
astGeneration/lookup.cpp:        u4 d = *tail - U_0;
astGeneration/lookup.cpp:            tail--;
astGeneration/lookup.cpp:    const wchar_t* name = literal -> Name();
astGeneration/lookup.cpp:        literal -> value = (name[1] == U_x || name[1] == U_X
astGeneration/lookup.cpp:            int digit = *p - U_0;
astGeneration/lookup.cpp:        literal -> value = (*p ? bad_value : FindOrInsert(value));
astGeneration/lookup.cpp:    return literal -> value;
astGeneration/lookup.cpp:    if (literal -> value && literal -> value != bad_value)
astGeneration/lookup.cpp:        IntLiteralValue* int_literal = (IntLiteralValue*) literal -> value;
astGeneration/lookup.cpp:        return FindOrInsert(- int_literal -> value);
astGeneration/lookup.cpp:    const wchar_t* name = literal -> Name();
astGeneration/lookup.cpp:        return FindOrInsert(- int_literal -> value);
astGeneration/lookup.cpp:        int digit = *p - U_0;
astGeneration/lookup.cpp:    return *p ? bad_value : FindOrInsert(- value);
astGeneration/lookup.cpp:        int k = ((unsigned) ilv -> value) % hash_size;
astGeneration/lookup.cpp:        ilv -> next = base[k];
astGeneration/lookup.cpp:    for (lit = base[k]; lit; lit = (IntLiteralValue*) lit -> next)
astGeneration/lookup.cpp:        if (lit -> value == value)
astGeneration/lookup.cpp:    for (lit = base[k]; lit; lit = (IntLiteralValue*) lit -> next)
astGeneration/lookup.cpp:        if (lit -> value == value)
astGeneration/lookup.cpp:    lit -> Initialize(value, symbol_pool.Length());
astGeneration/lookup.cpp:    lit -> next = base[k];
astGeneration/lookup.cpp:    const wchar_t* head = literal -> Name() + 1; // point to X
astGeneration/lookup.cpp:    // -2 to skip the 'L' suffix
astGeneration/lookup.cpp:    const wchar_t* tail = &literal -> Name()[literal -> NameLength() - 2];
astGeneration/lookup.cpp:    head--;
astGeneration/lookup.cpp:    for (int i = 0; i < 32 && tail > head; i += 4, tail--)
astGeneration/lookup.cpp:    for (int j = 0; j < 32 && tail > head; j += 4, tail--)
astGeneration/lookup.cpp:    const wchar_t* head = literal -> Name(); // point to initial '0'
astGeneration/lookup.cpp:    // -2 to skip the 'L' suffix
astGeneration/lookup.cpp:    const wchar_t* tail = &head[literal -> NameLength() - 2];
astGeneration/lookup.cpp:    head--;
astGeneration/lookup.cpp:    for (int i = 0; i < 63 && tail > head; i += 3, tail--)
astGeneration/lookup.cpp:        ULongInt d = (u4) (*tail - U_0);
astGeneration/lookup.cpp:        u4 d = *tail - U_0;
astGeneration/lookup.cpp:            tail--;
astGeneration/lookup.cpp:    const wchar_t* name = literal -> Name();
astGeneration/lookup.cpp:        literal -> value = (name[1] == U_x || name[1] == U_X
astGeneration/lookup.cpp:            u4 digit = *p - U_0;
astGeneration/lookup.cpp:        literal -> value = (*p != U_L && *p != U_l ? bad_value
astGeneration/lookup.cpp:    return literal -> value;
astGeneration/lookup.cpp:    if (literal -> value && literal -> value != bad_value)
astGeneration/lookup.cpp:        LongLiteralValue* long_literal = (LongLiteralValue*) literal -> value;
astGeneration/lookup.cpp:        return FindOrInsert(- long_literal -> value);
astGeneration/lookup.cpp:    const wchar_t* name = literal -> Name();
astGeneration/lookup.cpp:        return FindOrInsert(- long_literal -> value);
astGeneration/lookup.cpp:        u4 digit = *p - U_0;
astGeneration/lookup.cpp:    return *p != U_L && *p != U_l ? bad_value : FindOrInsert(- value);
astGeneration/lookup.cpp:        int k = Hash(llv -> value) % hash_size;
astGeneration/lookup.cpp:        llv -> next = base[k];
astGeneration/lookup.cpp:    for (lit = base[k]; lit; lit = (LongLiteralValue*) lit -> next)
astGeneration/lookup.cpp:        if (lit -> value == value)
astGeneration/lookup.cpp:    lit -> Initialize(value, symbol_pool.Length());
astGeneration/lookup.cpp:    lit -> next = base[k];
astGeneration/lookup.cpp:    char* name = new char[literal -> NameLength() + 1];
astGeneration/lookup.cpp:    for (unsigned i = 0; i < literal -> NameLength(); i++)
astGeneration/lookup.cpp:        name[i] = (char) literal -> Name()[i];
astGeneration/lookup.cpp:    name[literal -> NameLength()] = U_NULL;
astGeneration/lookup.cpp:    literal -> value = (value.IsNaN() ? bad_value : FindOrInsert(value));
astGeneration/lookup.cpp:    return literal -> value;
astGeneration/lookup.cpp:        int k = Hash(flv -> value) % hash_size;
astGeneration/lookup.cpp:        flv -> next = base[k];
astGeneration/lookup.cpp:    for (lit = base[k]; lit; lit = (FloatLiteralValue*) lit -> next)
astGeneration/lookup.cpp:        if (lit -> value.equals(value))
astGeneration/lookup.cpp:    lit -> Initialize(value, symbol_pool.Length());
astGeneration/lookup.cpp:    lit -> next = base[k];
astGeneration/lookup.cpp:    char* name = new char[literal -> NameLength() + 1];
astGeneration/lookup.cpp:    for (unsigned i = 0; i < literal -> NameLength(); i++)
astGeneration/lookup.cpp:        name[i] = (char) literal -> Name()[i];
astGeneration/lookup.cpp:    name[literal -> NameLength()] = U_NULL;
astGeneration/lookup.cpp:    literal -> value = (value.IsNaN() ? bad_value : FindOrInsert(value));
astGeneration/lookup.cpp:    return literal -> value;
astGeneration/lookup.cpp:        int k = Hash(dlv -> value) % hash_size;
astGeneration/lookup.cpp:        dlv -> next = base[k];
astGeneration/lookup.cpp:    for (lit = base[k]; lit; lit = (DoubleLiteralValue*) lit -> next)
astGeneration/lookup.cpp:        if (lit -> value.equals(value))
astGeneration/lookup.cpp:    lit -> Initialize(value, symbol_pool.Length());
astGeneration/lookup.cpp:    lit -> next = base[k];
astGeneration/lookup.cpp:    const wchar_t* name = literal -> Name() + 1;
astGeneration/lookup.cpp:    int literal_length = literal -> NameLength() - 2; // discard ""
astGeneration/lookup.cpp:    int i = -1;
astGeneration/lookup.cpp:                ch = name[i] - U_0;
astGeneration/lookup.cpp:                ch = ch * 8 + name[i] - U_0;
astGeneration/lookup.cpp:                ch = ch * 8 + name[++i] - U_0;
astGeneration/lookup.cpp:                ch = -1;
astGeneration/lookup.cpp:            ch = -1;
astGeneration/lookup.cpp:    literal -> value = (i < literal_length ? bad_value
astGeneration/lookup.cpp:    return literal -> value;
astGeneration/lookup.cpp:        int k = ulv -> hash_address % hash_size;
astGeneration/lookup.cpp:        ulv -> next = base[k];
astGeneration/lookup.cpp:    for (lit = base[k]; lit; lit = (Utf8LiteralValue*) lit -> next)
astGeneration/lookup.cpp:        if (hash_address == lit -> hash_address &&
astGeneration/lookup.cpp:            len == lit -> length &&
astGeneration/lookup.cpp:            memcmp(lit -> value, str, len * sizeof(char)) == 0)
astGeneration/lookup.cpp:    lit -> Initialize(str, len, hash_address, symbol_pool.Length());
astGeneration/lookup.cpp:    lit -> next = base[k];
astGeneration/lookup.cpp:    unsigned count = utf8_literals -> Length();
astGeneration/lookup.cpp:        if (! leftmost_constant_expr -> NullLiteralCast())
astGeneration/lookup.cpp:            leftmost_constant_expr -> value = (*utf8_literals)[0];
astGeneration/lookup.cpp:            length += (*utf8_literals)[i] -> length;
astGeneration/lookup.cpp:            assert(literal -> value);
astGeneration/lookup.cpp:            memcpy(&str[index], literal -> value,
astGeneration/lookup.cpp:                   literal -> length * sizeof(char));
astGeneration/lookup.cpp:            index += literal -> length;
astGeneration/lookup.cpp:        leftmost_constant_expr -> value = FindOrInsert(str, length);
astGeneration/lookup.cpp:    utf8_literals -> Reset();
astGeneration/lookup.cpp:    if (expression -> IsConstant())
astGeneration/lookup.cpp:        // constants with blank strings, and later we replace the left-most
astGeneration/lookup.cpp:            DYNAMIC_CAST<Utf8LiteralValue*> (expression -> value);
astGeneration/lookup.cpp:        assert(literal -> value);
astGeneration/lookup.cpp:        utf8_literals -> Next() = literal;
astGeneration/lookup.cpp:            expression -> value = FindOrInsert("", 0);
astGeneration/lookup.cpp:    AstBinaryExpression* binary_expr = expression -> BinaryExpressionCast();
astGeneration/lookup.cpp:    AstCastExpression* cast_expr = expression -> CastExpressionCast();
astGeneration/lookup.cpp:        expression -> ParenthesizedExpressionCast();
astGeneration/lookup.cpp:    AstNullLiteral* null_expr = expression -> NullLiteralCast();
astGeneration/lookup.cpp:        AstExpression* left  = binary_expr -> left_expression;
astGeneration/lookup.cpp:        AstExpression* right = binary_expr -> right_expression;
astGeneration/lookup.cpp:        if (left -> IsConstant() ||
astGeneration/lookup.cpp:            left -> Type() == expression -> Type())
astGeneration/lookup.cpp:        if ((right -> IsConstant() ||
astGeneration/lookup.cpp:             right -> Type() == expression -> Type()) &&
astGeneration/lookup.cpp:                ! left -> NullLiteralCast() && ! right -> NullLiteralCast())
astGeneration/lookup.cpp:                right -> symbol = expression -> Type();
astGeneration/lookup.cpp:    else if (cast_expr && EndsInKnownString(cast_expr -> expression))
astGeneration/lookup.cpp:        if (leftmost_constant_expr == cast_expr -> expression &&
astGeneration/lookup.cpp:            cast_expr -> expression -> Type() == cast_expr -> Type())
astGeneration/lookup.cpp:    else if (paren_expr && EndsInKnownString(paren_expr -> expression))
astGeneration/lookup.cpp:        if (leftmost_constant_expr == paren_expr -> expression &&
astGeneration/lookup.cpp:            ! leftmost_constant_expr -> NullLiteralCast())
astGeneration/lookup.cpp:        // part of a chain of strings, as it is not a compile-time constant.
astGeneration/lookup.cpp:        utf8_literals -> Next() = FindOrInsert(null_literal, 4);
astGeneration/lookup.cpp:        else expression -> value = FindOrInsert("", 0);
astGeneration/lookup.cpp:// number of utf8 literals. Note that it even flattens non-constant expressions
astGeneration/lookup.cpp:// get in the way.  After this method, expression -> IsConstant() will return
astGeneration/lookup.cpp:        int k = ls -> hash_address % hash_size;
astGeneration/lookup.cpp:        ls -> next = base[k];
astGeneration/lookup.cpp:    for (symbol = base[k]; symbol; symbol = (LiteralSymbol*) symbol -> next)
astGeneration/lookup.cpp:        if (hash_address == symbol -> hash_address &&
astGeneration/lookup.cpp:            len == symbol -> NameLength() &&
astGeneration/lookup.cpp:            memcmp(symbol -> Name(), str, len * sizeof(wchar_t)) == 0)
astGeneration/lookup.cpp:    symbol -> Initialize(str, hash_address, len);
astGeneration/lookup.cpp:    symbol -> next = base[k];
astGeneration/lookup.cpp:// JLS2 6.8 describes the well-established Java naming conventions.
declarations/symbol/lookup.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/symbol/lookup.h:        while (--len >= 0)
declarations/symbol/lookup.h:            hash_value = (hash_value << 5) - hash_value + *head++;
declarations/symbol/lookup.h:        while (--len >= 0)
declarations/symbol/lookup.h:            hash_value = (hash_value << 5) - hash_value + *head++;
declarations/symbol/lookup.h:        Initialize(entry -> directory, name_, length_);
declarations/symbol/lookup.h:// treat filenames in a case-insensitive fashion.
declarations/symbol/lookup.h:        return Utf8_literal ? Utf8_literal -> value : (char*) NULL;
declarations/symbol/lookup.h:        return Utf8_literal ? Utf8_literal -> length : 0;
declarations/symbol/lookup.h:    return (unsigned) Identity() -> index;
Binary file lookup.o matches
declarations/lpginput.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
Binary file lpginput.o matches
orchestration/modifier.cpp:// . Modifiers not in the recommended order (controlled by +Pmodifier-order).
orchestration/modifier.cpp://   +Predundant-modifiers).
orchestration/modifier.cpp:    for (unsigned i = 0; i < modifiers -> NumModifiers(); i++)
orchestration/modifier.cpp:        Ast* mod = modifiers -> Modifier(i);
orchestration/modifier.cpp:        AstAnnotation* annotation = mod -> AnnotationCast();
orchestration/modifier.cpp:        AstModifierKeyword* keyword = mod -> ModifierKeywordCast();
orchestration/modifier.cpp:                               lex_stream -> NameString(annotation -> name ->
orchestration/modifier.cpp:        switch (lex_stream -> Kind(keyword -> modifier_token))
orchestration/modifier.cpp:                           lex_stream -> NameString(keyword -> modifier_token),
orchestration/modifier.cpp:                           lex_stream -> NameString(keyword ->
orchestration/modifier.cpp:                               lex_stream -> NameString(keyword ->
orchestration/modifier.cpp:                               lex_stream -> NameString(keyword ->
orchestration/modifier.cpp:                                   lex_stream -> NameString(keyword ->
orchestration/modifier.cpp:    return ProcessModifiers(package -> modifiers_opt, L"a package", 0);
orchestration/modifier.cpp:// Process modifiers of top-level types.
orchestration/modifier.cpp:    AstClassDeclaration* class_decl = decl -> ClassDeclarationCast();
orchestration/modifier.cpp:    AstEnumDeclaration* enum_decl = decl -> EnumDeclarationCast();
orchestration/modifier.cpp:        decl -> InterfaceDeclarationCast();
orchestration/modifier.cpp:        decl -> AnnotationDeclarationCast();
orchestration/modifier.cpp:        context = L"a top-level class";
orchestration/modifier.cpp:        for (unsigned i = 0; i < enum_decl -> NumEnumConstants(); i++)
orchestration/modifier.cpp:            if (enum_decl -> EnumConstant(i) -> class_body_opt)
orchestration/modifier.cpp:            ? L"a top-level enumeration (all enum constants without a body)"
orchestration/modifier.cpp:            : L"a top-level enumeration (some enum constants with a body)";
orchestration/modifier.cpp:            context = L"a top-level interface";
orchestration/modifier.cpp:            context = L"a top-level annotation type";
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt, context, valid_flags,
orchestration/modifier.cpp:    AstClassDeclaration* class_decl = decl -> ClassDeclarationCast();
orchestration/modifier.cpp:    AstEnumDeclaration* enum_decl = decl -> EnumDeclarationCast();
orchestration/modifier.cpp:        for (unsigned i = 0; i < enum_decl -> NumEnumConstants(); i++)
orchestration/modifier.cpp:            if (enum_decl -> EnumConstant(i) -> class_body_opt)
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt, context, valid_flags,
orchestration/modifier.cpp:    AstClassDeclaration* class_decl = decl -> ClassDeclarationCast();
orchestration/modifier.cpp:    AstEnumDeclaration* enum_decl = decl -> EnumDeclarationCast();
orchestration/modifier.cpp:        decl -> InterfaceDeclarationCast();
orchestration/modifier.cpp:        decl -> AnnotationDeclarationCast();
orchestration/modifier.cpp:        if (containing_type -> ACC_INTERFACE())
orchestration/modifier.cpp:            for (unsigned i = 0; i < enum_decl -> NumEnumConstants(); i++)
orchestration/modifier.cpp:                if (enum_decl -> EnumConstant(i) -> class_body_opt)
orchestration/modifier.cpp:        if (containing_type -> ACC_INTERFACE())
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt, context, valid_flags,
orchestration/modifier.cpp:    return ProcessModifiers(field_declaration -> modifiers_opt,
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt, L"a local variable",
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt, L"a formal parameter",
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt, L"a class's member method",
orchestration/modifier.cpp:    return ProcessModifiers(method_declaration -> modifiers_opt,
orchestration/modifier.cpp:    return ProcessModifiers(constructor_declaration -> modifiers_opt,
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt,
orchestration/modifier.cpp:    return ProcessModifiers(initializer -> modifiers_opt,
orchestration/modifier.cpp:    return ProcessModifiers(decl -> modifiers_opt, L"an enum constant", 0,
Binary file modifier.o matches
declarations/op.cpp:        {"iconst_m1", "push int constant -1", 0},
declarations/op.cpp:        {"invokespecial", "invoke constructor, private, or superclass instance method; dispatch based on compile-time type", 2},
declarations/op.cpp:            constant_pool[info_index] -> Describe(constant_pool);
declarations/op.cpp:    assert(sizeof(int) == 4 && "Debugger must have 32-bit int");
declarations/op.cpp:                        Coutput << "       <non-zero padding: " << au1 << '>'
declarations/op.cpp:                len =  high - low + 1;
declarations/op.cpp:                    len--;
declarations/op.cpp:                        Coutput << "       <non-zero padding: " << au1 << '>'
declarations/op.cpp:                    npairs--;
declarations/op.cpp:                    Coutput << "       <non-zero padding: " << au1 << '>'
declarations/op.cpp:   -1, // OP_IALOAD
declarations/op.cpp:   -1, // OP_FALOAD
declarations/op.cpp:   -1, // OP_AALOAD
declarations/op.cpp:   -1, // OP_BALOAD
declarations/op.cpp:   -1, // OP_CALOAD
declarations/op.cpp:   -1, // OP_SALOAD
declarations/op.cpp:   -1, // OP_ISTORE
declarations/op.cpp:   -2, // OP_LSTORE
declarations/op.cpp:   -1, // OP_FSTORE
declarations/op.cpp:   -2, // OP_DSTORE
declarations/op.cpp:   -1, // OP_ASTORE
declarations/op.cpp:   -1, // OP_ISTORE_0
declarations/op.cpp:   -1, // OP_ISTORE_1
declarations/op.cpp:   -1, // OP_ISTORE_2
declarations/op.cpp:   -1, // OP_ISTORE_3
declarations/op.cpp:   -2, // OP_LSTORE_0
declarations/op.cpp:   -2, // OP_LSTORE_1
declarations/op.cpp:   -2, // OP_LSTORE_2
declarations/op.cpp:   -2, // OP_LSTORE_3
declarations/op.cpp:   -1, // OP_FSTORE_0
declarations/op.cpp:   -1, // OP_FSTORE_1
declarations/op.cpp:   -1, // OP_FSTORE_2
declarations/op.cpp:   -1, // OP_FSTORE_3
declarations/op.cpp:   -2, // OP_DSTORE_0
declarations/op.cpp:   -2, // OP_DSTORE_1
declarations/op.cpp:   -2, // OP_DSTORE_2
declarations/op.cpp:   -2, // OP_DSTORE_3
declarations/op.cpp:   -1, // OP_ASTORE_0
declarations/op.cpp:   -1, // OP_ASTORE_1
declarations/op.cpp:   -1, // OP_ASTORE_2
declarations/op.cpp:   -1, // OP_ASTORE_3
declarations/op.cpp:   -3, // OP_IASTORE
declarations/op.cpp:   -4, // OP_LASTORE
declarations/op.cpp:   -3, // OP_FASTORE
declarations/op.cpp:   -4, // OP_DASTORE
declarations/op.cpp:   -3, // OP_AASTORE
declarations/op.cpp:   -3, // OP_BASTORE
declarations/op.cpp:   -3, // OP_CASTORE
declarations/op.cpp:   -3, // OP_SASTORE
declarations/op.cpp:   -1, // OP_POP
declarations/op.cpp:   -2, // OP_POP2
declarations/op.cpp:   -1, // OP_IADD
declarations/op.cpp:   -2, // OP_LADD
declarations/op.cpp:   -1, // OP_FADD
declarations/op.cpp:   -2, // OP_DADD
declarations/op.cpp:   -1, // OP_ISUB
declarations/op.cpp:   -2, // OP_LSUB
declarations/op.cpp:   -1, // OP_FSUB
declarations/op.cpp:   -2, // OP_DSUB
declarations/op.cpp:   -1, // OP_IMUL
declarations/op.cpp:   -2, // OP_LMUL
declarations/op.cpp:   -1, // OP_FMUL
declarations/op.cpp:   -2, // OP_DMUL
declarations/op.cpp:   -1, // OP_IDIV
declarations/op.cpp:   -2, // OP_LDIV
declarations/op.cpp:   -1, // OP_FDIV
declarations/op.cpp:   -2, // OP_DDIV
declarations/op.cpp:   -1, // OP_IREM
declarations/op.cpp:   -2, // OP_LREM
declarations/op.cpp:   -1, // OP_FREM
declarations/op.cpp:   -2, // OP_DREM
declarations/op.cpp:   -1, // OP_ISHL
declarations/op.cpp:   -1, // OP_LSHL
declarations/op.cpp:   -1, // OP_ISHR
declarations/op.cpp:   -1, // OP_LSHR
declarations/op.cpp:   -1, // OP_IUSHR
declarations/op.cpp:   -1, // OP_LUSHR
declarations/op.cpp:   -1, // OP_IAND
declarations/op.cpp:   -2, // OP_LAND
declarations/op.cpp:   -1, // OP_IOR
declarations/op.cpp:   -2, // OP_LOR
declarations/op.cpp:   -1, // OP_IXOR
declarations/op.cpp:   -2, // OP_LXOR
declarations/op.cpp:   -1, // OP_L2I
declarations/op.cpp:   -1, // OP_L2F
declarations/op.cpp:   -1, // OP_D2I
declarations/op.cpp:   -1, // OP_D2F
declarations/op.cpp:   -3, // OP_LCMP
declarations/op.cpp:   -1, // OP_FCMPL
declarations/op.cpp:   -1, // OP_FCMPG
declarations/op.cpp:   -3, // OP_DCMPL
declarations/op.cpp:   -3, // OP_DCMPG
declarations/op.cpp:   -1, // OP_IFEQ
declarations/op.cpp:   -1, // OP_IFNE
declarations/op.cpp:   -1, // OP_IFLT
declarations/op.cpp:   -1, // OP_IFGE
declarations/op.cpp:   -1, // OP_IFGT
declarations/op.cpp:   -1, // OP_IFLE
declarations/op.cpp:   -2, // OP_IF_ICMPEQ
declarations/op.cpp:   -2, // OP_IF_ICMPNE
declarations/op.cpp:   -2, // OP_IF_ICMPLT
declarations/op.cpp:   -2, // OP_IF_ICMPGE
declarations/op.cpp:   -2, // OP_IF_ICMPGT
declarations/op.cpp:   -2, // OP_IF_ICMPLE
declarations/op.cpp:   -2, // OP_IF_ACMPEQ
declarations/op.cpp:   -2, // OP_IF_ACMPNE
declarations/op.cpp:   -1, // OP_TABLESWITCH
declarations/op.cpp:   -1, // OP_LOOKUPSWITCH
declarations/op.cpp:   -1, // OP_IRETURN
declarations/op.cpp:   -2, // OP_LRETURN
declarations/op.cpp:   -1, // OP_FRETURN
declarations/op.cpp:   -2, // OP_DRETURN
declarations/op.cpp:   -1, // OP_ARETURN
declarations/op.cpp:   -1, // OP_PUTSTATIC, caller must adjust -1 if long or double
declarations/op.cpp:   -2, // OP_PUTFIELD, caller must adjust -1 if long or double
declarations/op.cpp:   -1, // OP_INVOKEVIRTUAL,  caller must adjust +return-args_length
declarations/op.cpp:   -1, // OP_INVOKESPECIAL,  caller must adjust +return-args_length
declarations/op.cpp:    0, // OP_INVOKESTATIC,   caller must adjust +return-args_length
declarations/op.cpp:   -1, // OP_INVOKEINTERFACE, caller must adjust +return-args_length
declarations/op.cpp:   -1, // OP_ATHROW
declarations/op.cpp:   -1, // OP_MONITORENTER
declarations/op.cpp:   -1, // OP_MONITOREXIT
declarations/op.cpp:    0, // OP_MULTIANEWARRAY, caller must adjust 1-dims
declarations/op.cpp:   -1, // OP_IFNULL
declarations/op.cpp:   -1, // OP_IFNONNULL
declarations/op.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
Binary file op.o matches
orchestration/option.cpp:                end--;
orchestration/option.cpp:            s << "\"-source\" only recognizes Java releases 1.3 (JLS 2 "
orchestration/option.cpp:        s << "\"-source\" only recognizes Java releases 1.3 (JLS 2 features) "
orchestration/option.cpp:        s << "\"-target\" only recognizes Java releases 1.1, 1.2, 1.3, 1.4, "
orchestration/option.cpp:        s << "The directory specified in the \"-d\" option, \"" << name
orchestration/option.cpp:        // Under Cygwin, we convert a Windows-style path into a UNIX-style
orchestration/option.cpp:        if (arguments.argv[i][0] == '-')
orchestration/option.cpp:            if (strcmp(arguments.argv[i], "-bootclasspath") == 0 ||
orchestration/option.cpp:                strcmp(arguments.argv[i], "--bootclasspath") == 0)
orchestration/option.cpp:                // Create a clean copy of the -bootclasspath argument so we
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-classpath") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--classpath") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "-cp") == 0)
orchestration/option.cpp:                // Create a clean copy of the -classpath argument so we can
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-d") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--target-directory") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-debug") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-depend") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--depend") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "-Xdepend") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-deprecation") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--deprecation") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-encoding") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--encoding") == 0)
orchestration/option.cpp:                                    "-encoding");
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-extdirs") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--extdirs") == 0)
orchestration/option.cpp:                // Create a clean copy of the -extdirs argument so we can
orchestration/option.cpp:                // This defaults to SOURCE | LINES if no -g option was
orchestration/option.cpp:                // explicitly specified. "-g" is equivalent to
orchestration/option.cpp:                // "-g:source,lines,vars".
orchestration/option.cpp:                if (! strcmp(arguments.argv[i], "-g:none"))
orchestration/option.cpp:                else if (! strcmp(arguments.argv[i], "-g:source") )
orchestration/option.cpp:                else if (! strcmp(arguments.argv[i], "-g:lines"))
orchestration/option.cpp:                else if (! strcmp(arguments.argv[i], "-g:vars"))
orchestration/option.cpp:                else if (! strcmp(arguments.argv[i], "-g:source,lines") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:lines,source"))
orchestration/option.cpp:                else if (! strcmp(arguments.argv[i], "-g:source,vars") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:vars,source"))
orchestration/option.cpp:                else if (! strcmp(arguments.argv[i], "-g:lines,vars") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:vars,lines"))
orchestration/option.cpp:                else if (! strcmp(arguments.argv[i], "-g") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:source,lines,vars") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:source,vars,lines") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:lines,source,vars") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:lines,vars,source") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:vars,source,lines") ||
orchestration/option.cpp:                         ! strcmp(arguments.argv[i], "-g:vars,lines,source"))
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-help") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--help") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "-h") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "-?") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-nowarn") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--nowarn") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "-q") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-Werror") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-nowrite") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--nowrite") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-O") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--optimize") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-source") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--source") == 0)
orchestration/option.cpp:                                        "-source");
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-sourcepath") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--sourcepath") == 0)
orchestration/option.cpp:                // Create a clean copy of the -sourcepath argument so we can
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-target") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--target") == 0)
orchestration/option.cpp:                                        "-target");
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-verbose") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--verbose") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "-v") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-version") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--version") == 0 ||
orchestration/option.cpp:                     strcmp(arguments.argv[i], "-V") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-Xstdout") == 0)
orchestration/option.cpp:                // FIXME: Javac 1.3 takes an argument to -Xstdout, as the name
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "-Xswitchcheck") == 0)
orchestration/option.cpp:                // Note that we've already consumed -Xdepend, -Xstdout,
orchestration/option.cpp:                // and -Xswitchcheck.
orchestration/option.cpp:            else if (arguments.argv[i][1] != '-')
orchestration/option.cpp:             (arguments.argv[i][0] == '-' && arguments.argv[i][1] == '-')))
orchestration/option.cpp:                strcmp(arguments.argv[i], "--incremental") == 0)
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--noassert") == 0)
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--nobytecode") == 0)
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--dump-errors") == 0)
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--emacs") == 0)
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--full-dependence") == 0)
orchestration/option.cpp:                        keyword_map[i].length = image - name - 1;
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--makefile") == 0)
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--pedantic") == 0)
orchestration/option.cpp:                     strncmp(arguments.argv[i], "--tab", 5) == 0)
orchestration/option.cpp:                if (arguments.argv[i][1] == '-')
orchestration/option.cpp:                    int digit = *p - '0';
orchestration/option.cpp:                     strcmp(arguments.argv[i], "--unzip-dependence") == 0)
orchestration/option.cpp:            else if (strcmp(arguments.argv[i], "--zero-cautions") == 0)
orchestration/option.cpp:    // Specify defaults for -source and -target.
orchestration/option.cpp:    for (int k = filename_index.Length() - 1; k >= 0; k--)
orchestration/option.cpp:        first_file_index--;
declarations/option.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
Binary file option.o matches
orchestration/parser.cpp:        free_list_nodes = free_list_nodes -> next;
orchestration/parser.cpp:    else p = list_node_pool -> NewListNode();
orchestration/parser.cpp:        AstListNode* root = tail -> next;
orchestration/parser.cpp:        tail -> next = free_list_nodes;
orchestration/parser.cpp:    lex_stream_ -> Reset();
orchestration/parser.cpp:    if (lex_stream_ -> PackageToken())
orchestration/parser.cpp:        list_node_pool = new StoragePool(lex_stream_ -> NumTokens());
orchestration/parser.cpp:                ast -> CompilationUnitCast();
orchestration/parser.cpp:                ! compilation_unit -> BadCompilationUnitCast())
orchestration/parser.cpp:                    compilation_unit -> package_declaration_opt;
orchestration/parser.cpp:    lex_stream_ -> Reset();
orchestration/parser.cpp:    body_pool = new StoragePool(lex_stream_ -> NumTokens());
orchestration/parser.cpp:    list_node_pool = new StoragePool(lex_stream_ -> NumTokens());
orchestration/parser.cpp:        compilation_unit = ast -> CompilationUnitCast();
orchestration/parser.cpp:            ! compilation_unit -> BadCompilationUnitCast())
orchestration/parser.cpp:            if (compilation_unit -> NumTypeDeclarations() == 0)
orchestration/parser.cpp:                compilation_unit -> MarkEmpty();
orchestration/parser.cpp:         compilation_unit -> ast_pool = body_pool;
orchestration/parser.cpp:    TokenObject curtok = lex_stream -> Gettoken();
orchestration/parser.cpp:              current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:    state_stack_top = -1;
orchestration/parser.cpp:            state_stack_top--; // make reduction look like a shift-reduce
orchestration/parser.cpp:            curtok = lex_stream -> Gettoken();
orchestration/parser.cpp:            current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:            act -= ERROR_ACTION;
orchestration/parser.cpp:            curtok = lex_stream -> Gettoken();
orchestration/parser.cpp:            current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:            state_stack_top -= (rhs[act] - 1);
orchestration/parser.cpp:            (this ->* rule_action[act])();
orchestration/parser.cpp:        if (parse_stack[0] && parse_stack[0] -> CompilationUnitCast())
orchestration/parser.cpp:            ((AstCompilationUnit*) parse_stack[0]) -> MarkBad();
orchestration/parser.cpp:    assert(class_body -> UnparsedClassBodyCast());
orchestration/parser.cpp:    ast_pool = class_body -> pool;
orchestration/parser.cpp:    body_pool = class_body -> pool;
orchestration/parser.cpp:    list_node_pool = new StoragePool(lex_stream_ -> NumTokens());
orchestration/parser.cpp:    class_body -> MarkParsed();
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumConstructors(); i++)
orchestration/parser.cpp:            class_body -> Constructor(i);
orchestration/parser.cpp:        if (constructor_decl -> constructor_symbol)
orchestration/parser.cpp:            AstMethodBody* block = constructor_decl -> constructor_body;
orchestration/parser.cpp:            end_token = block -> right_brace_token; // last token in the body
orchestration/parser.cpp:            AstMethodBody* new_body = ParseSegment(block -> left_brace_token);
orchestration/parser.cpp:            else constructor_decl -> constructor_body = new_body;
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumMethods(); i++)
orchestration/parser.cpp:        AstMethodDeclaration* method_decl = class_body -> Method(i);
orchestration/parser.cpp:        if (method_decl -> method_symbol && method_decl -> method_body_opt)
orchestration/parser.cpp:            AstMethodBody* block = method_decl -> method_body_opt;
orchestration/parser.cpp:            end_token = block -> right_brace_token;
orchestration/parser.cpp:            AstMethodBody* new_block = ParseSegment(block -> left_brace_token);
orchestration/parser.cpp:            else method_decl -> method_body_opt = new_block;
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumNestedClasses(); i++)
orchestration/parser.cpp:            ! Body(class_body -> NestedClass(i) -> class_body);
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumNestedInterfaces(); i++)
orchestration/parser.cpp:            ! Body(class_body -> NestedInterface(i) -> class_body);
orchestration/parser.cpp:    ast_pool = class_body -> pool;
orchestration/parser.cpp:    body_pool = class_body -> pool;
orchestration/parser.cpp:    list_node_pool = new StoragePool(stream -> NumTokens());
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumStaticInitializers(); i++)
orchestration/parser.cpp:         AstMethodBody* block = class_body -> StaticInitializer(i) -> block;
orchestration/parser.cpp:         end_token = block -> right_brace_token; // last token in the body
orchestration/parser.cpp:         class_body -> StaticInitializer(i) -> block =
orchestration/parser.cpp:             ParseSegment(block -> left_brace_token);
orchestration/parser.cpp:        if (! class_body -> StaticInitializer(i) -> block)
orchestration/parser.cpp:            class_body -> StaticInitializer(i) -> block = block;
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumInstanceInitializers(); i++)
orchestration/parser.cpp:        AstMethodBody* block = class_body -> InstanceInitializer(i) -> block;
orchestration/parser.cpp:        end_token = block -> right_brace_token; // last token in the body
orchestration/parser.cpp:        class_body -> InstanceInitializer(i) -> block =
orchestration/parser.cpp:            ParseSegment(block -> left_brace_token);
orchestration/parser.cpp:        if (! class_body -> InstanceInitializer(i) -> block)
orchestration/parser.cpp:            class_body -> InstanceInitializer(i) -> block = block;
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumNestedClasses(); i++)
orchestration/parser.cpp:            ! Initializer(class_body -> NestedClass(i) -> class_body);
orchestration/parser.cpp:    for (i = 0; i < class_body -> NumNestedInterfaces(); i++)
orchestration/parser.cpp:            ! Initializer(class_body -> NestedInterface(i) -> class_body);
orchestration/parser.cpp:    lex_stream -> Reset(start_token);
orchestration/parser.cpp:    state_stack_top = -1;
orchestration/parser.cpp:            state_stack_top--; // make reduction look like a shift-reduce
orchestration/parser.cpp:            curtok = lex_stream -> Gettoken(end_token);
orchestration/parser.cpp:            current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:            act -= ERROR_ACTION;
orchestration/parser.cpp:            curtok = lex_stream -> Gettoken(end_token);
orchestration/parser.cpp:            current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:            state_stack_top -= (rhs[act] - 1);
orchestration/parser.cpp:            (this ->* rule_action[act])();
orchestration/parser.cpp:        for (k = state_stack_top - 1;
orchestration/parser.cpp:             k >= 0 && location_stack[k] == Loc(curtok); k--);
orchestration/parser.cpp:        curtok = lex_stream -> Gettoken(end_token);
orchestration/parser.cpp:        int act = stack[state_stack_top--];
orchestration/parser.cpp:        int current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:                state_stack_top--; // make reduction look like a shift-reduce
orchestration/parser.cpp:                curtok = lex_stream -> Gettoken(end_token);
orchestration/parser.cpp:                current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:                act -= ERROR_ACTION;
orchestration/parser.cpp:                curtok = lex_stream -> Gettoken(end_token);
orchestration/parser.cpp:                current_kind = lex_stream -> Kind(curtok);
orchestration/parser.cpp:                state_stack_top -= (rhs[act] - 1);
orchestration/parser.cpp:                (this ->* rule_action[act])();
orchestration/parser.cpp:        buffer[0] = lex_stream -> Previous(buffer[1]);
orchestration/parser.cpp:            buffer[k] = lex_stream -> Next(buffer[k - 1]);
orchestration/parser.cpp:        for (last_index = MAX_DISTANCE - 1;
orchestration/parser.cpp:                 lex_stream -> Kind(buffer[last_index]) == EOFT_SYMBOL;
orchestration/parser.cpp:             last_index--);
orchestration/parser.cpp:        error_token = buffer[MAX_DISTANCE - MIN_DISTANCE + 2];
orchestration/parser.cpp:    lex_stream -> Reset(buffer[repair.buffer_position]);
orchestration/parser.cpp:         top >= 0 && repair.num_deletions >= stack_deletions; top--)
orchestration/parser.cpp:                 repair.num_deletions >= (stack_deletions + i - 1); i++)
orchestration/parser.cpp:            int j = ParseCheck(stck, top, lex_stream -> Kind(buffer[i]),
orchestration/parser.cpp:            if ((j - i + 1) > MIN_DISTANCE)
orchestration/parser.cpp:                int k = stack_deletions + i - 1;
orchestration/parser.cpp:                    (j - k) > (repair.distance - repair.num_deletions))
orchestration/parser.cpp:        ct = lex_stream -> Kind(buffer[indx]);
orchestration/parser.cpp:        lex_stream -> Reset(lex_stream -> Next(buffer[indx]));
orchestration/parser.cpp:        lhs_symbol = first_token - NT_OFFSET;
orchestration/parser.cpp:        temp_stack_top = stack_top - 1;
orchestration/parser.cpp:        indx = buffer_position - 1;
orchestration/parser.cpp:        lex_stream -> Reset(buffer[buffer_position]);
orchestration/parser.cpp:            temp_stack_top--;
orchestration/parser.cpp:                 act > ERROR_ACTION)        /*shift-reduce action*/
orchestration/parser.cpp:            ct = lex_stream -> Kind(buffer[indx]);
orchestration/parser.cpp:            lex_stream -> Reset(lex_stream -> Next(buffer[indx]));
orchestration/parser.cpp:                 act -= ERROR_ACTION;
orchestration/parser.cpp:            temp_stack_top -= (rhs[act]-1);
astGeneration/parser.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
astGeneration/parser.h:        return location_stack[state_stack_top + (i - 1)];
astGeneration/parser.h:    inline Ast*& Sym(int i) { return parse_stack[state_stack_top + (i - 1)]; }
astGeneration/parser.h:    // delete AST subtrees from the parse stack - those corresponding to
Binary file parser.o matches
declarations/platform/platform.cpp:    for (ptr = s; *ct && n-- > 0; ptr++, ct++)
declarations/platform/platform.cpp:    while (n-- > 0)
declarations/platform/platform.cpp:    return (*cs == *ct ? 0 : (*cs < *ct ? -1 : 1));
declarations/platform/platform.cpp:    while (*cs == *ct && *cs && *ct && n-- > 0)
declarations/platform/platform.cpp:    return (n <= 0 || *cs == *ct ? 0 : (*cs < *ct ? -1 : 1));
declarations/platform/platform.cpp:        stat_struct -> st_ino += name[strlen(name) - 1];
declarations/platform/platform.cpp:    for (int i = strlen(filename); i >= 0; i--)
declarations/platform/platform.cpp:// Given three strings, return a newly-allocated string which is their
declarations/platform/platform.cpp:    // The below is more efficient than this commented-out code.
declarations/platform/platform.cpp:    u4 n = num < 0 ? - num : num;
declarations/platform/platform.cpp:        *--str = U_0 + n % 10;
declarations/platform/platform.cpp:        *--str = U_MINUS;
declarations/platform/platform.cpp:        *--str = c < 10 ? U_0 + c : U_a - 10 + c;
declarations/platform/platform.cpp:    u4 n = num < 0 ? - num : num;
declarations/platform/platform.cpp:        *--wstr = U_0 + n % 10;
declarations/platform/platform.cpp:        *--wstr = U_MINUS;
declarations/platform/platform.cpp:    ULongInt n = num < 0 ? (ULongInt) - num : (ULongInt) num;
declarations/platform/platform.cpp:        *--str = U_0 + (n % 10).LowWord();
declarations/platform/platform.cpp:        *--str = U_MINUS;
declarations/platform/platform.cpp:        *--str = U_0 + (n % 10).LowWord();
declarations/platform/platform.cpp:        *--str = c < 10 ? U_0 + c : U_a - 10 + c;
declarations/platform/platform.cpp:    base = str - 1;
declarations/platform/platform.cpp:        *base-- = U_x;
declarations/platform/platform.cpp:    // Therefore, f == f1 * 2**i, and i == be + bbits - 1.
declarations/platform/platform.cpp:    denorm = i <= -IEEEfloat::Bias();
declarations/platform/platform.cpp:    // log(x)   ~=~ log(1.5) + (x-1.5)/1.5
declarations/platform/platform.cpp:    //          ~=~ log(1.5)/log(10) + (x-1.5)/(1.5*log(10))
declarations/platform/platform.cpp:    // k = i*0.30103 + ( 0.17609125 + (f1-1.5)*0.28952965 );
declarations/platform/platform.cpp:    // The error in the first-order Taylor series approximation
declarations/platform/platform.cpp:    // and 152 * 0.30103 * 2^-23 ~=~ 5.5e-6,
declarations/platform/platform.cpp:    // adding 1e-5 to the constant term more than suffices.
declarations/platform/platform.cpp:    fs = IEEEfloat(i) * 0.30103f + 0.1761f + (f1 - 1.5f) * 0.28952965f;
declarations/platform/platform.cpp:    f1 = f.IsNegative() ? -f : f;
declarations/platform/platform.cpp:        k--;
declarations/platform/platform.cpp:            k--;
declarations/platform/platform.cpp:            f1 -= fs * (i4) dig;
declarations/platform/platform.cpp:        s2 = -be;
declarations/platform/platform.cpp:        b2 -= k;
declarations/platform/platform.cpp:        b5 = -k;
declarations/platform/platform.cpp:               : 2 + IEEEfloat::FractSize() - bbits;
declarations/platform/platform.cpp:        b2 -= i;
declarations/platform/platform.cpp:        m2 -= i;
declarations/platform/platform.cpp:        s2 -= i;
declarations/platform/platform.cpp:        if ((j = b5 - m5) != 0)
declarations/platform/platform.cpp:    if ((i = ((s5 ? 32 - S.hi0bits() : 1) + s2) & 0x1f) != 0)
declarations/platform/platform.cpp:        i = 32 - i;
declarations/platform/platform.cpp:        i -= 4;
declarations/platform/platform.cpp:        k--;
declarations/platform/platform.cpp:        BigInt delta = S - mhi;
declarations/platform/platform.cpp:        while (*--s == U_9)
declarations/platform/platform.cpp:    length = s - str + 1; // strlen(str) + '.'
declarations/platform/platform.cpp:    case -3: case -2: case -1:
declarations/platform/platform.cpp:        if (*(s - 1) == U_0)
declarations/platform/platform.cpp:            length--;
declarations/platform/platform.cpp:            s--;
declarations/platform/platform.cpp:        s--;
declarations/platform/platform.cpp:        length += -exp;
declarations/platform/platform.cpp:            *(s + (neg ? 2 : 1) - exp) = *s;
declarations/platform/platform.cpp:        while (s-- != str);
declarations/platform/platform.cpp:        for (i = (neg ? 1 : 0); i < (neg ? 2 : 1) - exp; i++)
declarations/platform/platform.cpp:            str[length++ - 1] = U_0;
declarations/platform/platform.cpp:        s = &str[length - 2];
declarations/platform/platform.cpp:        while (s-- != str + exp + 1);
declarations/platform/platform.cpp:            while (s-- != str);
declarations/platform/platform.cpp:            str[length++ - 1] = U_0;
declarations/platform/platform.cpp:            length++; // exponent '-'
declarations/platform/platform.cpp:            exp = -exp;
declarations/platform/platform.cpp:            *--s = exp % 10 + U_0;
declarations/platform/platform.cpp:            *--s = U_MINUS;
declarations/platform/platform.cpp:        *--s = U_E;
declarations/platform/platform.cpp:        --s;
declarations/platform/platform.cpp:            *s = *(s - (neg ? 2 : 1)); // shift digits right, to add '.'
declarations/platform/platform.cpp:        while (--s != str + (neg ? 2 : 1));
declarations/platform/platform.cpp:    // Therefore, d == d1 * 2**i, and i == be + bbits - 1.
declarations/platform/platform.cpp:    denorm = i <= -IEEEdouble::Bias();
declarations/platform/platform.cpp:    // log(x)   ~=~ log(1.5) + (x-1.5)/1.5
declarations/platform/platform.cpp:    //          ~=~ log(1.5)/log(10) + (x-1.5)/(1.5*log(10))
declarations/platform/platform.cpp:    //   + ( 0.176091259055681 + (d2-1.5)*0.289529654602168 );
declarations/platform/platform.cpp:    // The error in the first-order Taylor series approximation
declarations/platform/platform.cpp:    // and 1077 * 0.30103 * 2^-52 ~=~ 7.2e-14,
declarations/platform/platform.cpp:    // adding 1e-13 to the constant term more than suffices.
declarations/platform/platform.cpp:        + (d1 - 1.5) * 0.289529654602168;
declarations/platform/platform.cpp:    d1 = d.IsNegative() ? -d : d;
declarations/platform/platform.cpp:        k--;
declarations/platform/platform.cpp:            k--;
declarations/platform/platform.cpp:            d1 -= ds * (i4) dig;
declarations/platform/platform.cpp:        s2 = -be;
declarations/platform/platform.cpp:        b2 -= k;
declarations/platform/platform.cpp:        b5 = -k;
declarations/platform/platform.cpp:               : 2 + IEEEdouble::FractSize() - bbits;
declarations/platform/platform.cpp:        b2 -= i;
declarations/platform/platform.cpp:        m2 -= i;
declarations/platform/platform.cpp:        s2 -= i;
declarations/platform/platform.cpp:        if ((j = b5 - m5) != 0)
declarations/platform/platform.cpp:    if ((i = ((s5 ? 32 - S.hi0bits() : 1) + s2) & 0x1f) != 0)
declarations/platform/platform.cpp:        i = 32 - i;
declarations/platform/platform.cpp:        i -= 4;
declarations/platform/platform.cpp:        k--;
declarations/platform/platform.cpp:        BigInt delta = S - mhi;
declarations/platform/platform.cpp:        while (*--s == U_9)
declarations/platform/platform.cpp:    length = s - str + 1; // strlen(str) + '.'
declarations/platform/platform.cpp:    case -3: case -2: case -1:
declarations/platform/platform.cpp:        if (*(s - 1) == U_0)
declarations/platform/platform.cpp:            length--;
declarations/platform/platform.cpp:            s--;
declarations/platform/platform.cpp:        s--;
declarations/platform/platform.cpp:        length += -exp;
declarations/platform/platform.cpp:            *(s + (neg ? 2 : 1) - exp) = *s;
declarations/platform/platform.cpp:        while (s-- != str);
declarations/platform/platform.cpp:        for (i = (neg ? 1 : 0); i < (neg ? 2 : 1) - exp; i++)
declarations/platform/platform.cpp:            str[length++ - 1] = U_0;
declarations/platform/platform.cpp:        s = &str[length - 2];
declarations/platform/platform.cpp:        while (s-- != str + exp + 1);
declarations/platform/platform.cpp:            while (s-- != str);
declarations/platform/platform.cpp:            str[length++ - 1] = U_0;
declarations/platform/platform.cpp:            length++; // exponent '-'
declarations/platform/platform.cpp:            exp = -exp;
declarations/platform/platform.cpp:            *--s = exp % 10 + U_0;
declarations/platform/platform.cpp:            *--s = U_MINUS;
declarations/platform/platform.cpp:        *--s = U_E;
declarations/platform/platform.cpp:        --s;
declarations/platform/platform.cpp:            *s = *(s - (neg ? 2 : 1)); // shift digits right, to add '.'
declarations/platform/platform.cpp:        while (--s != str + (neg ? 2 : 1));
declarations/platform/platform.cpp:    if (os -> flags() & os -> dec)
declarations/platform/platform.cpp:    else if (os -> flags() & os -> oct)
declarations/platform/platform.cpp:        *os << (os -> flags() & os -> showbase
declarations/platform/platform.cpp:    else if (os -> flags() & os -> hex)
declarations/platform/platform.cpp:        *os << (os -> flags() & os -> showbase
declarations/platform/platform.cpp:         os -> flush();
declarations/platform/platform.cpp:    if (os -> flags() & os -> dec)
declarations/platform/platform.cpp:    else if (os -> flags() & os -> oct)
declarations/platform/platform.cpp:        *os << (os -> flags() & os -> showbase
declarations/platform/platform.cpp:    else if (os -> flags() & os -> hex)
declarations/platform/platform.cpp:        *os << (os -> flags() & os -> showbase
declarations/platform/platform.cpp:        os -> flush();
declarations/platform/platform.cpp:const wchar_t StringConstant::US_MINUS[] = {U_MI, U_NU}; // L"-"
declarations/platform/platform.cpp:const wchar_t StringConstant::US_MINUS_EQUAL[] = {U_MI, U_EQ, U_NU}; // L"-="
declarations/platform/platform.cpp:const wchar_t StringConstant::US_MINUS_MINUS[] = {U_MI, U_MI, U_NU}; // L"--"
declarations/platform/platform.cpp:const wchar_t StringConstant::US_MI[] = {U_MI, U_NU}; // L"-"
declarations/platform/platform.cpp:    "Jikes Compiler - " JIKES_VERSION_STRING
declarations/platform/platform.cpp:    "\nCopyright (C) IBM Corporation 1997-2003, 2004.\n"
declarations/platform/platform.cpp:    "- Licensed Materials - Program Property of IBM - All Rights Reserved.\n";
declarations/platform/platform.cpp:    U_MINUS, U_I, U_n, U_f, U_i, U_n, U_i, U_t, U_y, U_NU}; // "-Infinity"
declarations/platform/platform.cpp:    U_MINUS, U_0, U_DOT, U_0, U_NU}; // "-0.0"
declarations/platform/platform.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/platform/platform.h:// the code for non-ascii platforms. At some point we'll want to be able to
declarations/platform/platform.h:// like, pull a cvs tree with the tag v1-06.
declarations/platform/platform.h:// the value are 16-bits or U8S_ for 8 bits. The initial underscore is
declarations/platform/platform.h:// All string-related values are represented internally in ASCII/UNICODE
declarations/platform/platform.h:    U_MINUS = 45,             U_MI = U_MINUS,             // L'-'
declarations/platform/platform.h:    static const wchar_t US_MINUS[]; // L"-"
declarations/platform/platform.h:    static const wchar_t US_MINUS_EQUAL[]; // L"-="
declarations/platform/platform.h:    static const wchar_t US_MINUS_MINUS[]; // L"--"
declarations/platform/platform.h:    static const wchar_t US_MI[]; // L"-"
declarations/platform/platform.h:    static const char U8S_neg_Infinity[]; // "-Infinity"
declarations/platform/platform.h:    static const char U8S_neg_Zero[]; // "-0.0"
declarations/platform/platform.h:    IntToString(u4, int width); // Unsigned zero-padded hexadecimal.
declarations/platform/platform.h:    int Length() { return (&info[TAIL_INDEX]) - str; }
declarations/platform/platform.h:    int Length() { return (&winfo[TAIL_INDEX]) - wstr; }
declarations/platform/platform.h:    int Length() { return (&info[TAIL_INDEX]) - str; }
declarations/platform/platform.h:                for (int i = 3; i >= 0; i--)
declarations/platform/platform.h:                        str[i] = U_A - 10 + d;
declarations/platform/platform.h:    char fill(char c) { return os -> fill(c); }
declarations/platform/platform.h:        os -> flush();
declarations/platform/platform.h:        return os -> width(w);
Binary file platform.o matches
orchestration/scanner.cpp:    current_token_index = lex -> GetNextToken(); // Get 0th token.
orchestration/scanner.cpp:    current_token = &(lex -> token_stream[current_token_index]);
orchestration/scanner.cpp:    current_token -> SetKind(0);
orchestration/scanner.cpp:        LexStream::Comment* current_comment = &(lex -> comment_stream.Next());
orchestration/scanner.cpp:        current_comment -> string = NULL;
orchestration/scanner.cpp:        current_comment -> length = 0;
orchestration/scanner.cpp:        current_comment -> previous_token = BAD_TOKEN;
orchestration/scanner.cpp:        current_comment -> location = 0;
orchestration/scanner.cpp:    lex -> line_location.Next() = 0; // Mark starting location of line # 0
orchestration/scanner.cpp:    lex -> CompressSpace();
orchestration/scanner.cpp:    file_symbol -> lex_stream = lex;
orchestration/scanner.cpp:    lex -> ReadInput();
orchestration/scanner.cpp:    cursor = lex -> InputBuffer();
orchestration/scanner.cpp:        lex -> CompressSpace();
orchestration/scanner.cpp:            lex -> SortMessages();
orchestration/scanner.cpp:            for (unsigned i = 0; i < lex -> bad_tokens.Length(); i++)
orchestration/scanner.cpp:                JikesAPI::getInstance() ->
orchestration/scanner.cpp:                    reportError(&(lex -> bad_tokens[i]));
orchestration/scanner.cpp:        lex -> DestroyInput(); // get rid of input buffer
orchestration/scanner.cpp:    file_symbol -> lex_stream = lex;
orchestration/scanner.cpp:    input_buffer_tail = &cursor[lex -> InputBufferLength()];
orchestration/scanner.cpp:        if (! current_token_index || current_token -> Kind())
orchestration/scanner.cpp:                lex -> GetNextToken(cursor - lex -> InputBuffer());
orchestration/scanner.cpp:            current_token = &(lex -> token_stream[current_token_index]);
orchestration/scanner.cpp:            current_token -> ResetInfoAndSetLocation(cursor -
orchestration/scanner.cpp:                                                     lex -> InputBuffer());
orchestration/scanner.cpp:            current_token -> SetDeprecated();
orchestration/scanner.cpp:        (this ->* classify_token[*cursor < 128 ? *cursor : 128])();
orchestration/scanner.cpp:    lex -> line_location.Next() = input_buffer_tail - lex -> InputBuffer();
orchestration/scanner.cpp:    current_token -> SetKind(TK_EOF);
orchestration/scanner.cpp:    assert(current_token_index == lex -> token_stream.Length() - 1);
orchestration/scanner.cpp:        lex -> token_stream[left_brace].SetRightBrace(current_token_index);
orchestration/scanner.cpp:    const wchar_t* start = cursor - 1;
orchestration/scanner.cpp:    current_token -> SetKind(0);
orchestration/scanner.cpp:        current_comment = &(lex -> comment_stream.Next());
orchestration/scanner.cpp:        current_comment -> string = NULL;
orchestration/scanner.cpp:        current_comment -> previous_token = current_token_index - 1;
orchestration/scanner.cpp:        current_comment -> location = start - lex -> InputBuffer();
orchestration/scanner.cpp:                lex -> line_location.Next() = cursor - lex -> InputBuffer();
orchestration/scanner.cpp:                        current_comment -> length = cursor - start;
orchestration/scanner.cpp:                    if (cursor[-1] == U_AT &&
orchestration/scanner.cpp:        if (current_token -> Deprecated())
orchestration/scanner.cpp:                        current_comment -> length = cursor - start;
orchestration/scanner.cpp:                lex -> line_location.Next() = cursor - lex -> InputBuffer();
orchestration/scanner.cpp:    lex -> ReportMessage(StreamError::UNTERMINATED_COMMENT,
orchestration/scanner.cpp:                         start - lex -> InputBuffer(),
orchestration/scanner.cpp:                         cursor - lex -> InputBuffer() - 1);
orchestration/scanner.cpp:        current_comment -> length = cursor - 1 - start;
orchestration/scanner.cpp:    if (current_token -> Deprecated())
orchestration/scanner.cpp:    current_token -> SetKind(0);
orchestration/scanner.cpp:        LexStream::Comment* current_comment = &(lex -> comment_stream.Next());
orchestration/scanner.cpp:        current_comment -> string = NULL;
orchestration/scanner.cpp:        current_comment -> previous_token = current_token_index - 1;
orchestration/scanner.cpp:        current_comment -> location = current_token -> Location();
orchestration/scanner.cpp:        current_comment -> length = (cursor - lex -> InputBuffer()) -
orchestration/scanner.cpp:            current_comment -> location;
orchestration/scanner.cpp:// first non-space character following its initial position.
orchestration/scanner.cpp:    if (current_token -> Deprecated())
orchestration/scanner.cpp:    current_token -> SetKind(0);
orchestration/scanner.cpp:            lex -> line_location.Next() = cursor + 1 - lex -> InputBuffer();
orchestration/scanner.cpp:    current_token -> SetKind(TK_CharacterLiteral);
orchestration/scanner.cpp:            lex -> ReportMessage(StreamError::ESCAPE_EXPECTED,
orchestration/scanner.cpp:                                 current_token -> Location() + 1,
orchestration/scanner.cpp:                                 current_token -> Location() + 1);
orchestration/scanner.cpp:            lex -> ReportMessage(StreamError::EMPTY_CHARACTER_CONSTANT,
orchestration/scanner.cpp:                                 current_token -> Location(),
orchestration/scanner.cpp:                                 current_token -> Location() + 1);
orchestration/scanner.cpp:            ptr--;
orchestration/scanner.cpp:                lex -> ReportMessage(StreamError::ESCAPE_EXPECTED,
orchestration/scanner.cpp:                                     current_token -> Location() + 1,
orchestration/scanner.cpp:                                     current_token -> Location() + 1);
orchestration/scanner.cpp:                ptr--;
orchestration/scanner.cpp:            ptr--;
orchestration/scanner.cpp:            lex -> ReportMessage(StreamError::INVALID_ESCAPE_SEQUENCE,
orchestration/scanner.cpp:                                 current_token -> Location() + 1,
orchestration/scanner.cpp:                                 current_token -> Location() + ptr - cursor);
orchestration/scanner.cpp:        ptr--;
orchestration/scanner.cpp:        // user tried to do a multiple character alpha-numeric string.
orchestration/scanner.cpp:            ptr--;
orchestration/scanner.cpp:            lex -> ReportMessage((*ptr != U_SINGLE_QUOTE || ptr == cursor
orchestration/scanner.cpp:                                 current_token -> Location(),
orchestration/scanner.cpp:                                 ptr - lex -> InputBuffer());
orchestration/scanner.cpp:    current_token ->
orchestration/scanner.cpp:                                                         ptr - cursor));
orchestration/scanner.cpp:    current_token -> SetKind(TK_StringLiteral);
orchestration/scanner.cpp:                ptr--;
orchestration/scanner.cpp:                lex -> ReportMessage(StreamError::INVALID_ESCAPE_SEQUENCE,
orchestration/scanner.cpp:                                     ptr - lex -> InputBuffer() - 1,
orchestration/scanner.cpp:                                     (ptr - lex -> InputBuffer() -
orchestration/scanner.cpp:        ptr--;
orchestration/scanner.cpp:        lex -> ReportMessage(StreamError::UNTERMINATED_STRING_CONSTANT,
orchestration/scanner.cpp:                             current_token -> Location(),
orchestration/scanner.cpp:                             ptr - lex -> InputBuffer());
orchestration/scanner.cpp:    current_token ->
orchestration/scanner.cpp:                                                           ptr - cursor));
orchestration/scanner.cpp:// Note that the use of that check is a time-optimization that is not
orchestration/scanner.cpp:    int len = ptr - cursor;
orchestration/scanner.cpp:    current_token -> SetKind(len < 13 ? (scan_keyword[len])(cursor)
orchestration/scanner.cpp:    if (current_token -> Kind() == TK_assert &&
orchestration/scanner.cpp:        lex -> ReportMessage(StreamError::DEPRECATED_IDENTIFIER_ASSERT,
orchestration/scanner.cpp:                             current_token -> Location(),
orchestration/scanner.cpp:                             current_token -> Location() + len - 1);
orchestration/scanner.cpp:        current_token -> SetKind(TK_Identifier);
orchestration/scanner.cpp:    if (current_token -> Kind() == TK_enum &&
orchestration/scanner.cpp:        lex -> ReportMessage(StreamError::DEPRECATED_IDENTIFIER_ENUM,
orchestration/scanner.cpp:                             current_token -> Location(),
orchestration/scanner.cpp:                             current_token -> Location() + len - 1);
orchestration/scanner.cpp:        current_token -> SetKind(TK_Identifier);
orchestration/scanner.cpp:        lex -> ReportMessage(StreamError::DOLLAR_IN_IDENTIFIER,
orchestration/scanner.cpp:                             current_token -> Location(),
orchestration/scanner.cpp:                             current_token -> Location() + len - 1);
orchestration/scanner.cpp:    if (current_token -> Kind() == TK_Identifier)
orchestration/scanner.cpp:        current_token -> SetSymbol(control.FindOrInsertName(cursor, len));
orchestration/scanner.cpp:                current_token -> SetKind(control.option.keyword_map[i].key);
orchestration/scanner.cpp:    else if (current_token -> Kind() == TK_class ||
orchestration/scanner.cpp:             current_token -> Kind() == TK_enum ||
orchestration/scanner.cpp:             current_token -> Kind() == TK_interface)
orchestration/scanner.cpp:        // If this is a top-level type keyword (not in braces), we keep track
orchestration/scanner.cpp:            lex -> type_index.Next() = current_token_index;
orchestration/scanner.cpp:    else if (current_token -> Kind() == TK_package && ! lex -> package)
orchestration/scanner.cpp:        lex -> package = current_token_index;
orchestration/scanner.cpp:    int len = ptr - cursor;
orchestration/scanner.cpp:        lex -> ReportMessage(StreamError::DOLLAR_IN_IDENTIFIER,
orchestration/scanner.cpp:                             current_token -> Location(),
orchestration/scanner.cpp:                             current_token -> Location() + len - 1);
orchestration/scanner.cpp:    current_token -> SetKind(TK_Identifier);
orchestration/scanner.cpp:    current_token -> SetSymbol(control.FindOrInsertName(cursor, len));
orchestration/scanner.cpp:            current_token -> SetKind(control.option.keyword_map[i].key);
orchestration/scanner.cpp:// This procedure is invoked when CURSOR points directly to '0' - '9' or '.'.
orchestration/scanner.cpp:    const wchar_t* ptr = cursor - 1;
orchestration/scanner.cpp:    //    '.', we have a floating-point constant. We scan the sequence of
orchestration/scanner.cpp:    // 2) Otherwise, we have an integer literal. If the initial (non-empty)
orchestration/scanner.cpp:    //    for nicer parsing, we simply complain about non-octal digits rather
orchestration/scanner.cpp:        current_token -> SetKind(TK_DoubleLiteral);
orchestration/scanner.cpp:        current_token -> SetKind(TK_IntegerLiteral);
orchestration/scanner.cpp:                    current_token -> SetKind(TK_DoubleLiteral);
orchestration/scanner.cpp:                        lex -> ReportMessage(StreamError::INVALID_FLOATING_HEX_EXPONENT,
orchestration/scanner.cpp:                                             current_token -> Location(),
orchestration/scanner.cpp:                                             ptr - 1 - lex -> InputBuffer());
orchestration/scanner.cpp:                            tmp++; // Skip the '+' or '-'.
orchestration/scanner.cpp:                            tmp--;
orchestration/scanner.cpp:                        lex -> ReportMessage(StreamError::INVALID_FLOATING_HEX_MANTISSA,
orchestration/scanner.cpp:                                             current_token -> Location(),
orchestration/scanner.cpp:                                             tmp - lex -> InputBuffer());
orchestration/scanner.cpp:                            tmp++; // Skip the '+' or '-'.
orchestration/scanner.cpp:                            tmp--;
orchestration/scanner.cpp:                        lex -> ReportMessage(StreamError::INVALID_FLOATING_HEX_MANTISSA,
orchestration/scanner.cpp:                                             current_token -> Location(),
orchestration/scanner.cpp:                                             tmp - lex -> InputBuffer());
orchestration/scanner.cpp:                        tmp = (*ptr == U_l || *ptr == U_L) ? ptr : ptr - 1;
orchestration/scanner.cpp:                        lex -> ReportMessage(StreamError::INVALID_HEX_CONSTANT,
orchestration/scanner.cpp:                                             current_token -> Location(),
orchestration/scanner.cpp:                                             tmp - lex -> InputBuffer());
orchestration/scanner.cpp:                    tmp = (*ptr == U_l || *ptr == U_L) ? ptr : ptr - 1;
orchestration/scanner.cpp:                    lex -> ReportMessage(StreamError::INVALID_OCTAL_CONSTANT,
orchestration/scanner.cpp:                                         current_token -> Location(),
orchestration/scanner.cpp:                                         tmp - lex -> InputBuffer());
orchestration/scanner.cpp:    // floating-point constant. If that's the case, the literal is
orchestration/scanner.cpp:    // hexadecimal constant being used as the prefix of a floating-point
orchestration/scanner.cpp:    // are both tokenized as a single floating-point constant 19.0. Note that
orchestration/scanner.cpp:        current_token -> SetKind(TK_DoubleLiteral);
orchestration/scanner.cpp:                tmp++; // Skip the '+' or '-'.
orchestration/scanner.cpp:                tmp--;
orchestration/scanner.cpp:            lex -> ReportMessage(StreamError::INVALID_FLOATING_HEX_PREFIX,
orchestration/scanner.cpp:                                 current_token -> Location(),
orchestration/scanner.cpp:                                 tmp - lex -> InputBuffer());
orchestration/scanner.cpp:            ptr++; // Skip the '+' or '-'.
orchestration/scanner.cpp:                ? ptr : ptr - 1;
orchestration/scanner.cpp:            lex -> ReportMessage(StreamError::INVALID_FLOATING_EXPONENT,
orchestration/scanner.cpp:                                 current_token -> Location(),
orchestration/scanner.cpp:                                 tmp - lex -> InputBuffer());
orchestration/scanner.cpp:        len = ++ptr - cursor;
orchestration/scanner.cpp:        current_token ->
orchestration/scanner.cpp:        current_token -> SetKind(TK_FloatLiteral);
orchestration/scanner.cpp:        len = ++ptr - cursor;
orchestration/scanner.cpp:        current_token ->
orchestration/scanner.cpp:        current_token -> SetKind(TK_DoubleLiteral);
orchestration/scanner.cpp:    else if (current_token -> Kind() == TK_IntegerLiteral)
orchestration/scanner.cpp:                lex -> ReportMessage(StreamError::FAVOR_CAPITAL_L_SUFFIX,
orchestration/scanner.cpp:                                     current_token -> Location(),
orchestration/scanner.cpp:                                     ptr - lex -> InputBuffer());
orchestration/scanner.cpp:            len = ++ptr - cursor;
orchestration/scanner.cpp:            current_token ->
orchestration/scanner.cpp:            current_token -> SetKind(TK_LongLiteral);
orchestration/scanner.cpp:            len = ptr - cursor;
orchestration/scanner.cpp:            current_token ->
orchestration/scanner.cpp:        assert(current_token -> Kind() == TK_DoubleLiteral);
orchestration/scanner.cpp:        len = ptr - cursor;
orchestration/scanner.cpp:        current_token ->
orchestration/scanner.cpp:    current_token -> SetKind(TK_COLON);
orchestration/scanner.cpp:        current_token -> SetKind(TK_PLUS_PLUS);
orchestration/scanner.cpp:        current_token -> SetKind(TK_PLUS_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_PLUS);
orchestration/scanner.cpp:        current_token -> SetKind(TK_MINUS_MINUS);
orchestration/scanner.cpp:        current_token -> SetKind(TK_MINUS_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_MINUS);
orchestration/scanner.cpp:        current_token -> SetKind(TK_MULTIPLY_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_MULTIPLY);
orchestration/scanner.cpp:        current_token -> SetKind(TK_DIVIDE_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_DIVIDE);
orchestration/scanner.cpp:        current_token -> SetKind(TK_LESS_EQUAL);
orchestration/scanner.cpp:            current_token -> SetKind(TK_LEFT_SHIFT_EQUAL);
orchestration/scanner.cpp:        else current_token -> SetKind(TK_LEFT_SHIFT);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_LESS);
orchestration/scanner.cpp:    current_token -> SetKind(TK_GREATER);
orchestration/scanner.cpp:        current_token -> SetKind(TK_GREATER_EQUAL);
orchestration/scanner.cpp:            current_token -> SetKind(TK_RIGHT_SHIFT_EQUAL);
orchestration/scanner.cpp:                current_token -> SetKind(TK_UNSIGNED_RIGHT_SHIFT_EQUAL);
orchestration/scanner.cpp:            else current_token -> SetKind(TK_UNSIGNED_RIGHT_SHIFT);
orchestration/scanner.cpp:        else current_token -> SetKind(TK_RIGHT_SHIFT);
orchestration/scanner.cpp:        current_token -> SetKind(TK_AND_AND);
orchestration/scanner.cpp:        current_token -> SetKind(TK_AND_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_AND);
orchestration/scanner.cpp:        current_token -> SetKind(TK_OR_OR);
orchestration/scanner.cpp:        current_token -> SetKind(TK_OR_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_OR);
orchestration/scanner.cpp:        current_token -> SetKind(TK_XOR_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_XOR);
orchestration/scanner.cpp:        current_token -> SetKind(TK_NOT_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_NOT);
orchestration/scanner.cpp:        current_token -> SetKind(TK_EQUAL_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_EQUAL);
orchestration/scanner.cpp:        current_token -> SetKind(TK_REMAINDER_EQUAL);
orchestration/scanner.cpp:    else current_token -> SetKind(TK_REMAINDER);
orchestration/scanner.cpp:        current_token -> SetKind(TK_ELLIPSIS);
orchestration/scanner.cpp:        current_token -> SetKind(TK_DOT);
orchestration/scanner.cpp:    current_token -> SetKind(TK_SEMICOLON);
orchestration/scanner.cpp:    current_token -> SetKind(TK_COMMA);
orchestration/scanner.cpp:    current_token -> SetKind(TK_LBRACE);
orchestration/scanner.cpp:        lex -> token_stream[left_brace].SetRightBrace(current_token_index);
orchestration/scanner.cpp:    current_token -> SetKind(TK_RBRACE);
orchestration/scanner.cpp:    current_token -> SetKind(TK_LPAREN);
orchestration/scanner.cpp:    current_token -> SetKind(TK_RPAREN);
orchestration/scanner.cpp:    current_token -> SetKind(TK_LBRACKET);
orchestration/scanner.cpp:    current_token -> SetKind(TK_RBRACKET);
orchestration/scanner.cpp:    current_token -> SetKind(TK_TWIDDLE);
orchestration/scanner.cpp:    current_token -> SetKind(TK_AT);
orchestration/scanner.cpp:    current_token -> SetKind(TK_QUESTION);
orchestration/scanner.cpp:    if (Code::IsAlpha(cursor)) // Some kind of non-ascii unicode letter
orchestration/scanner.cpp:// any concluding ctrl-z, so we don't need to worry about seeing that as a
orchestration/scanner.cpp:    current_token -> SetKind(0);
orchestration/scanner.cpp:    lex -> ReportMessage(StreamError::BAD_TOKEN, current_token -> Location(),
orchestration/scanner.cpp:                         cursor - lex -> InputBuffer() - 1);
scanner.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
scanner.h:                table.Reset(table.Length() - 1);
scanner.h:            return table.Length() > 0 ? table[table.Length() - 1] : 0;
Binary file scanner.o matches
declarations/segment.cpp:        array -= offset;
declarations/segment.cpp:               (base_size - old_base_size) * sizeof(PairSegment*));
declarations/segment.cpp:    return base[k] -> Image(target);
declarations/segment.cpp:        array -= offset;
declarations/segment.cpp:               (base_size - old_base_size) * sizeof(TripletSegment *));
declarations/segment.cpp:    return base[k] -> Image(target)[target2];
declarations/segment.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/segment.h:        MASK = ~ (BLKSIZE - 1)
declarations/segment.h:// A map of int -> u2 pairs.
declarations/segment.h:        MASK = ~ (BLKSIZE - 1)
declarations/segment.h:// A map of (int, int) -> u2 triplets.
Binary file segment.o matches
astGeneration/semantic.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
astGeneration/semantic.h:    void Pop() { if (table.Length() > 0) table.Reset(table.Length() - 1); }
astGeneration/semantic.h:                                ? table[table.Length() - 1] : NULL);
astGeneration/semantic.h:        for (int i = table.Length() - 1; i >= 0; i--)
astGeneration/semantic.h:                table[i] -> FindVariableSymbol(name_symbol);
astGeneration/semantic.h:        for (int i = table.Length() - 1; i >= 0; i--)
astGeneration/semantic.h:            TypeSymbol* symbol = table[i] -> FindTypeSymbol(name_symbol);
astGeneration/semantic.h:        for (int i = table.Length() - 1; i >= 0; i--)
astGeneration/semantic.h:            LabelSymbol* label = table[i] -> FindLabelSymbol(name_symbol);
astGeneration/semantic.h:            info.Reset(info.Length() - 1);
astGeneration/semantic.h:        return info.Length() ? info[info.Length() - 1] : T();
astGeneration/semantic.h:            block.Reset(len - 1);
astGeneration/semantic.h:            index.Reset(len - 1);
astGeneration/semantic.h:                            ? block[block.Length() - 1] : NULL);
astGeneration/semantic.h:        return index[index.Length() - 1];
astGeneration/semantic.h:            info.Reset(info.Length() - 1);
astGeneration/semantic.h:        return info[info.Length() - 1];
astGeneration/semantic.h:            top_index--;
astGeneration/semantic.h:        return block[top_index - 1];
astGeneration/semantic.h:        return break_pairs[top_index - 1];
astGeneration/semantic.h:        return continue_pairs[top_index - 1];
astGeneration/semantic.h:        clone -> this_method = this_method;
astGeneration/semantic.h:        clone -> this_variable = this_variable;
astGeneration/semantic.h:        clone -> explicit_constructor = explicit_constructor;
astGeneration/semantic.h:        clone -> args = args;
astGeneration/semantic.h:            clone -> symbol_table.Push(symbol_table[i]);
astGeneration/semantic.h:        clone -> next = next;
astGeneration/semantic.h:        return ((this_variable && this_variable -> ACC_STATIC()) ||
astGeneration/semantic.h:                (this_method && this_method -> ACC_STATIC()) ||
astGeneration/semantic.h:        info.Reset(info.Length() - 1);
astGeneration/semantic.h:        return info[info.Length() - 1];
astGeneration/semantic.h:          lex_stream(file_symbol_ -> lex_stream),
astGeneration/semantic.h:          compilation_unit(file_symbol_ -> compilation_unit),
astGeneration/semantic.h:          directory_symbol(file_symbol_ -> directory_symbol),
astGeneration/semantic.h:          this_package(file_symbol_ -> package)
astGeneration/semantic.h:        // DefiniteStatement. Therefore, they are diverted to the no-op
astGeneration/semantic.h:    // Report a multi-token semantic warning or error.
astGeneration/semantic.h:        error -> Report(kind, ltok, rtok, s1, s2, s3, s4, s5, s6, s7, s8, s9);
astGeneration/semantic.h:        error -> Report(kind, ast -> LeftToken(), ast -> RightToken(),
astGeneration/semantic.h:    // Report a single-token semantic warning or error.
astGeneration/semantic.h:        error -> Report(kind, tok, tok, s1, s2, s3, s4, s5, s6, s7, s8, s9);
astGeneration/semantic.h:    unsigned NumErrors() { return (error ? error -> num_errors : 0); }
astGeneration/semantic.h:    // Implemented in decl.cpp - performs first pass over .java file.
astGeneration/semantic.h:    // Implemented in init.cpp - determines values of final fields.
astGeneration/semantic.h:    // Implemented in class.cpp - reads in a .class file.
astGeneration/semantic.h:    // Implemented in expr.cpp - semantic checks of expressions
astGeneration/semantic.h:    // Implemented in decl.cpp - clean up after parsing
astGeneration/semantic.h:    // Implemented in decl.cpp - process a .java file for declarations
astGeneration/semantic.h:    // Implemented in body.cpp - process method bodies and field initializers
astGeneration/semantic.h:    // Used in the handling of imports - see decl.cpp
astGeneration/semantic.h:        return ThisType() -> IsDeprecated() ||
astGeneration/semantic.h:            (ThisMethod() && ThisMethod() -> IsDeprecated()) ||
astGeneration/semantic.h:            (ThisVariable() && ThisVariable() -> IsDeprecated());
astGeneration/semantic.h:    TypeSymbol* ThisType() { return state_stack.Top() -> Type(); }
astGeneration/semantic.h:    MethodSymbol*& ThisMethod() { return state_stack.Top() -> this_method; }
astGeneration/semantic.h:        return state_stack.Top() -> this_variable;
astGeneration/semantic.h:        return state_stack.Top() -> explicit_constructor;
astGeneration/semantic.h:        return state_stack.Top() -> symbol_table;
astGeneration/semantic.h:        return state_stack.Top() -> try_exception_table_stack;
astGeneration/semantic.h:        return state_stack.Top() -> try_statement_stack;
astGeneration/semantic.h:        return state_stack.Top() -> breakable_statement_stack;
astGeneration/semantic.h:        return state_stack.Top() -> continuable_statement_stack;
astGeneration/semantic.h:        return state_stack.Top() -> abrupt_finally_stack;
astGeneration/semantic.h:        return state_stack.Top() -> block_stack;
astGeneration/semantic.h:        return state_stack.Top() -> GetEnvironment(ast);
astGeneration/semantic.h:        return state_stack.Top() -> StaticRegion();
astGeneration/semantic.h:        return state_stack.Top() -> definitely_assigned_variables;
astGeneration/semantic.h:    DefinitePair*& Universe() { return state_stack.Top() -> universe; }
astGeneration/semantic.h:    BitSet*& BlankFinals() { return state_stack.Top() -> blank_finals; }
astGeneration/semantic.h:        return state_stack.Top() -> reachable_assignments;
astGeneration/semantic.h:        return state_stack.Top() -> definite_block_stack;
astGeneration/semantic.h:        return state_stack.Top() -> definite_final_assignment_stack;
astGeneration/semantic.h:        return state_stack.Top() -> final_fields;
astGeneration/semantic.h:        return state_stack.Top() -> processing_simple_assignment;
astGeneration/semantic.h:    // Implemented in expr.cpp - semantic checks of expressions
astGeneration/semantic.h:    // Implemented in decl.cpp - nested class processing
astGeneration/semantic.h:        ReportTypeInaccessible(ast -> LeftToken(), ast -> RightToken(), type);
astGeneration/semantic.h:    // Implemented in modifier.cpp - process declaration modifiers
astGeneration/semantic.h:    // Implemented in decl.cpp - process declarations
astGeneration/semantic.h:    // Implemented in decl.cpp - process initializers
astGeneration/semantic.h:    // Implemented in expr.cpp - expression processing
astGeneration/semantic.h:    // Implemented in definite.cpp - definite (un)assignment analysis
astGeneration/semantic.h:    // Implemented in body.cpp - method bodies and statements
astGeneration/semantic.h:    // Implemented in expr.cpp - expression processing
astGeneration/semantic.h:        (this ->* ProcessExprOrStmt[stmt -> kind])(stmt);
astGeneration/semantic.h:        if (expr -> symbol)
astGeneration/semantic.h:            // already processed, make sure it was compiler-generated
astGeneration/semantic.h:            assert(expr -> generated);
astGeneration/semantic.h:        else (this ->* ProcessExprOrStmt[expr -> kind])(expr);
astGeneration/semantic.h:    // Implemented in body.cpp - statement processing
astGeneration/semantic.h:        assert(ast -> IsExplicitConstructorInvocation());
astGeneration/semantic.h:        statement -> can_complete_normally = statement -> is_reachable;
astGeneration/semantic.h:                       statement -> LeftToken(),
astGeneration/semantic.h:                       statement -> RightToken());
astGeneration/semantic.h:    // Implemented in expr.cpp - expression processing
astGeneration/semantic.h:    // Implemented in decl.cpp - inheritance of declared members
astGeneration/semantic.h:    // Implemented in class.cpp - reads in a .class file.
astGeneration/semantic.h:    // Implemented in depend.cpp - class dependence tracking.
set.cpp:        unsigned i = shadow -> Identity() -> index % hash_size;
set.cpp:        shadow -> next = base[i];
set.cpp:            Symbol* symbol = shadow -> symbol;
set.cpp:                 symbol = (Symbol*) (k < shadow -> NumConflicts()
set.cpp:                                     ? shadow -> Conflict(k++) : NULL))
set.cpp:            Symbol* symbol = shadow -> symbol;
set.cpp:                 symbol = (Symbol*) (k < shadow -> NumConflicts()
set.cpp:                                     ? shadow -> Conflict(k++) : NULL))
set.cpp:            Symbol* symbol = shadow -> symbol;
set.cpp:                 symbol = (Symbol*) (k < shadow -> NumConflicts()
set.cpp:                                     ? shadow -> Conflict(k++) : NULL))
set.cpp:        Symbol* symbol = shadow -> symbol;
set.cpp:             symbol = (Symbol*) (k < shadow -> NumConflicts()
set.cpp:                                 ? shadow -> Conflict(k++) : NULL))
set.cpp:    const NameSymbol* name_symbol = element -> Identity();
set.cpp:    unsigned i = name_symbol -> index % hash_size;
set.cpp:    for (shadow = base[i]; shadow; previous = shadow, shadow = shadow -> next)
set.cpp:        if (shadow -> Identity() == name_symbol)
set.cpp:            Symbol* symbol = shadow -> symbol;
set.cpp:                 symbol = (Symbol*) (k < shadow -> NumConflicts()
set.cpp:                                     ? shadow -> Conflict(k++) : NULL))
set.cpp:                if (shadow -> NumConflicts() == 0)
set.cpp:                shadow -> RemoveConflict(k - 1);
set.cpp:             base[i] = shadow -> next;
set.cpp:        else previous -> next = shadow -> next;
set.cpp:        unsigned last_index = symbol_pool.Length() - 1;
set.cpp:        if (shadow -> pool_index != last_index)
set.cpp:            symbol_pool[last_index] -> pool_index = shadow -> pool_index;
set.cpp:            symbol_pool[shadow -> pool_index] = symbol_pool[last_index];
set.cpp:            element -> domain_element -> Identity() -> index % hash_size;
set.cpp:        element -> next = base[k];
set.cpp:    unsigned k = symbol -> Identity() -> index % hash_size;
set.cpp:    for (element = base[k]; element; element = element -> next)
set.cpp:        if (element -> domain_element == symbol)
set.cpp:        element -> domain_element = symbol;
set.cpp:        element -> next = base[k];
set.cpp:    element -> image = image;
set.cpp:    prime_index = -1;
declarations/set.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/set.h:    inline const NameSymbol* Identity() { return symbol -> Identity(); }
declarations/set.h:        return conflict ? conflict -> Length() : 0;
declarations/set.h:            conflict -> Next() = conflict_symbol;
declarations/set.h:        unsigned last_index = conflict -> Length() - 1;
declarations/set.h:        conflict -> Reset(last_index);
declarations/set.h:        for (unsigned k = 0; k < conflict -> Length(); k++)
declarations/set.h:        prime_index = -1;
declarations/set.h:            Symbol* symbol = shadow -> symbol;
declarations/set.h:                 symbol = (Symbol*) (k < shadow -> NumConflicts()
declarations/set.h:                                     ? shadow -> Conflict(k++) : NULL))
declarations/set.h:    // Empty out the set in question - i.e., remove all its elements
declarations/set.h:            this -> SetEmpty();
declarations/set.h:            this -> Union(rhs);
declarations/set.h:        const NameSymbol* name_symbol = element -> Identity();
declarations/set.h:        for (ShadowSymbol* shadow = base[name_symbol -> index % hash_size];
declarations/set.h:             shadow; shadow = shadow -> next)
declarations/set.h:            if (shadow -> Identity() == name_symbol)
declarations/set.h:                return shadow -> NumConflicts() + 1;
declarations/set.h:        const NameSymbol* name_symbol = element -> Identity();
declarations/set.h:        for (ShadowSymbol* shadow = base[name_symbol -> index % hash_size];
declarations/set.h:             shadow; shadow = shadow -> next)
declarations/set.h:            if (shadow -> Identity() == name_symbol)
declarations/set.h:                Symbol* symbol = shadow -> symbol;
declarations/set.h:                     symbol = (Symbol*) (k < shadow -> NumConflicts()
declarations/set.h:                                         ? shadow -> Conflict(k++) : NULL))
declarations/set.h:        const NameSymbol* name_symbol = element -> Identity();
declarations/set.h:        unsigned i = name_symbol -> index % hash_size;
declarations/set.h:        for (shadow = base[i]; shadow; shadow = shadow -> next)
declarations/set.h:            if (shadow -> Identity() == name_symbol)
declarations/set.h:                shadow -> AddConflict(element);
declarations/set.h:        shadow -> pool_index = symbol_pool.Length();
declarations/set.h:        shadow -> next = base[i];
declarations/set.h:            ? symbol_pool[main_index] -> symbol : (Symbol*) NULL;
declarations/set.h:             if (sub_index < symbol_pool[main_index] -> NumConflicts())
declarations/set.h:                 symbol = symbol_pool[main_index] -> Conflict(sub_index++);
declarations/set.h:                           ? symbol_pool[main_index] -> symbol
declarations/set.h:// Single-value Mapping from a name_symbol into a symbol with that name.
declarations/set.h:        for (ShadowSymbol* shadow = base[name_symbol -> index % hash_size];
declarations/set.h:             shadow; shadow = shadow -> next)
declarations/set.h:            if (shadow -> Identity() == name_symbol)
declarations/set.h:                return shadow -> symbol;
declarations/set.h:        for (shadow = base[element -> Identity() -> index % hash_size];
declarations/set.h:             shadow; shadow = shadow -> next)
declarations/set.h:            if (shadow -> Identity() == element -> Identity())
declarations/set.h:            shadow -> symbol = element;
declarations/set.h:// Single-value Mapping from an arbitrary key to an arbitrary value, based
declarations/set.h:        unsigned k = key -> HashCode() % hash_size;
declarations/set.h:        for (Element* element = base[k]; element; element = element -> next)
declarations/set.h:            if (element -> key == key)
declarations/set.h:                return element -> value;
declarations/set.h:// Single-value Mapping from an arbitrary symbol into another arbitrary symbol.
declarations/set.h:        unsigned k = symbol -> Identity() -> index % hash_size;
declarations/set.h:        for (Element* element = base[k]; element; element = element -> next)
declarations/set.h:            if (element -> domain_element == symbol)
declarations/set.h:                return element -> image;
declarations/set.h:        memset(s, 0, (set_size + cell_size - 1) / cell_size * sizeof(CELL));
declarations/set.h:               (set_size + cell_size - 1) / cell_size * sizeof(CELL));
declarations/set.h:    // It hashes a bitset into a location within the range <1..table_size-1>.
declarations/set.h:        for (int i = ((int) set_size - 1) / cell_size; i >= 0; i--)
declarations/set.h:                   (set_size + cell_size - 1) / cell_size * sizeof(CELL));
declarations/set.h:        int num_cells = (set_size + cell_size - 1) / cell_size;
declarations/set.h:        int num_cells = (set_size + cell_size - 1) / cell_size;
declarations/set.h:        int num_cells = (set_size + cell_size - 1) / cell_size;
declarations/set.h:        int i = ((int) set_size - 1) / cell_size;
declarations/set.h:             (i % cell_size ? ((CELL) 1 << (i % cell_size)) - (CELL) 1
declarations/set.h:        while (--i >= 0)
declarations/set.h:        for (int i = ((int) set_size - 1) / cell_size; i >= 0; i--)
declarations/set.h:        for (int i = ((int) set_size - 1) / cell_size; i >= 0; i--)
declarations/set.h:    BitSet operator-(const BitSet& rhs) const
declarations/set.h:        return BitSet(*this) -= rhs;
declarations/set.h:    BitSet& operator-=(const BitSet& rhs)
declarations/set.h:        for (int i = ((int) set_size - 1) / cell_size; i >= 0; i--)
declarations/set.h:            int new_cell_count = (new_size + cell_size - 1) / cell_size;
declarations/set.h:            int old_cell_count = (max_set_size + cell_size - 1) / cell_size;
declarations/set.h:            int i = (new_size - 1) / cell_size;
declarations/set.h:            while (i > ((int) set_size + cell_size - 1) / cell_size - 1)
declarations/set.h:                s[i--] = init == EMPTY ? (CELL) 0 : ~((CELL) 0);
declarations/set.h:                             ? ((CELL) 1 << (set_size % cell_size)) - (CELL) 1
declarations/set.h:                                 - (CELL) 1)
declarations/set.h:    inline DefinitePair operator-(const DefinitePair& rhs) const
declarations/set.h:        return DefinitePair(*this) -= rhs;
declarations/set.h:    inline DefinitePair& operator-=(const DefinitePair& rhs)
declarations/set.h:        da_set -= rhs.da_set;
declarations/set.h:        du_set -= rhs.du_set;
declarations/set.h:        unsigned k = element -> key -> HashCode() % hash_size;
declarations/set.h:        element -> next = base[k];
declarations/set.h:    unsigned k = key -> HashCode() % hash_size;
declarations/set.h:    for (element = base[k]; element; element = element -> next)
declarations/set.h:        if (element -> key == key)
declarations/set.h:        element -> key = key;
declarations/set.h:        element -> next = base[k];
declarations/set.h:    element -> value = value;
declarations/set.h:    static int prime_index = -1;
Binary file set.o matches
declarations/spell.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/spell.h:            //  ;      <---->     ,
declarations/spell.h:            //  ;      <---->     :
declarations/spell.h:            //  .      <---->     ,
declarations/spell.h:            //  '      <---->     "
declarations/spell.h:                if ((len1 - i1) > (len2 - i2))
declarations/spell.h:                else if ((len2 - i2) > (len1 - i1))
orchestration/stream.cpp:    return lex_stream -> FileName();
orchestration/stream.cpp:            L"as it is now a keyword. Use -source 1.4 if you intended "
orchestration/stream.cpp:            L"as it will be a keyword once -source 1.5 is implemented.";
orchestration/stream.cpp:            L"discouraged, since it can conflict with compiler-generated "
orchestration/stream.cpp:        left_line_no = lex_stream -> FindLine(start_location);
orchestration/stream.cpp:        left_column_no = lex_stream -> FindColumn(start_location - 1) + 1;
orchestration/stream.cpp:        right_line_no = lex_stream -> FindLine(end_location);
orchestration/stream.cpp:        right_column_no = lex_stream -> FindColumn(end_location);
orchestration/stream.cpp:    lex_stream -> OutputSource(this, s);
orchestration/stream.cpp:    , _decoder((iconv_t) - 1)
orchestration/stream.cpp:    bool supported = tmp -> SetEncoding(encoding);
orchestration/stream.cpp:        _decoder = (iconv_t)-1;
orchestration/stream.cpp:            int(before - data_buffer)
orchestration/stream.cpp:    if (n == (size_t) -1)
orchestration/stream.cpp:                    (int) (before - data_buffer));
orchestration/stream.cpp:        control.line_count += (line_location.Length() - 3);
orchestration/stream.cpp:    unsigned location = tokens[i].Location() - 1 +
orchestration/stream.cpp:         ? tokens[i].additional_info.symbol -> NameLength()
orchestration/stream.cpp:        ? tokens[i].additional_info.symbol -> Name()
orchestration/stream.cpp:        ? tokens[i].additional_info.symbol -> NameLength()
orchestration/stream.cpp:                       locations[line_no + 1] - 2); // ignore the \n
orchestration/stream.cpp:        ? symbol -> LiteralCast() : (class LiteralSymbol*) NULL;
orchestration/stream.cpp:        ? symbol -> NameCast() : (class NameSymbol*) NULL;
orchestration/stream.cpp:char* LexStream::FileName() { return file_symbol -> FileName(); }
orchestration/stream.cpp:    return file_symbol -> FileNameLength();
orchestration/stream.cpp:            s.width(Tab::TabSize() - offset % Tab::TabSize());
orchestration/stream.cpp:            offset = Tab::TabSize() - 1;
orchestration/stream.cpp:    int left_line_no = err -> getLeftLineNo();
orchestration/stream.cpp:    int left_column_no = err -> getLeftColumnNo();
orchestration/stream.cpp:    int right_line_no = err -> getRightLineNo();
orchestration/stream.cpp:    int right_column_no = err -> getRightColumnNo();
orchestration/stream.cpp:            s.width(right_column_no - left_column_no);
orchestration/stream.cpp:            s.fill('-');
orchestration/stream.cpp:    else // multi-line
orchestration/stream.cpp:        s.width(LineLength(left_line_no) - left_column_no);
orchestration/stream.cpp:        s.fill('-');
orchestration/stream.cpp:        s.fill('-');
orchestration/stream.cpp:    int hi = comment_stream.Length() - 1;
orchestration/stream.cpp:            else hi = mid - 1;
orchestration/stream.cpp:    int hi = line_location.Length() - 1;
orchestration/stream.cpp:        else hi = mid - 1;
orchestration/stream.cpp:    return locations[lo] > location ? lo - 1 : lo;
orchestration/stream.cpp:    if (file_symbol -> IsZip())
orchestration/stream.cpp:        if (zipfile -> Buffer() == NULL)
orchestration/stream.cpp:        else if (! file_symbol -> lex_stream)
orchestration/stream.cpp:            file_symbol -> lex_stream = this;
orchestration/stream.cpp:            ProcessInput(zipfile -> Buffer(),
orchestration/stream.cpp:                         file_symbol -> uncompressed_size);
orchestration/stream.cpp:        JikesAPI::getInstance() -> stat(FileName(), &status);
orchestration/stream.cpp:        file_symbol -> mtime = status.st_mtime; // actual time stamp of file read
orchestration/stream.cpp:        file_symbol -> lex_stream = this;
orchestration/stream.cpp:            JikesAPI::getInstance() -> read(FileName());
orchestration/stream.cpp:            ProcessInput(file -> getBuffer(), file -> getBufferSize());
orchestration/stream.cpp:    else if (file_symbol -> IsZip())
orchestration/stream.cpp:        if (zipfile -> Buffer() == NULL)
orchestration/stream.cpp:        else ProcessInput(zipfile -> Buffer(),
orchestration/stream.cpp:                          file_symbol -> uncompressed_size);
orchestration/stream.cpp:        JikesAPI::getInstance() -> stat(FileName(), &status);
orchestration/stream.cpp:        if (status.st_mtime == file_symbol -> mtime)
orchestration/stream.cpp:               JikesAPI::getInstance() -> read(FileName());
orchestration/stream.cpp:               ProcessInput(file -> getBuffer(), file -> getBufferSize());
orchestration/stream.cpp:        return ch - U_0;
orchestration/stream.cpp:                            *input_ptr = (*input_ptr << 4) + (ch - (U_a - 10));
orchestration/stream.cpp:                            *input_ptr = (*input_ptr << 4) + (ch - (U_A - 10));
orchestration/stream.cpp:                            *input_ptr = (*input_ptr << 4) + (ch - U_0);
orchestration/stream.cpp:                                          (unsigned) (input_ptr - input_buffer),
orchestration/stream.cpp:                                          (unsigned) (input_ptr - input_buffer) + (source_ptr - u_ptr));
orchestration/stream.cpp:        input_ptr--;
orchestration/stream.cpp:                      (unsigned) (input_ptr - input_buffer),
orchestration/stream.cpp:                      (unsigned) (input_ptr - input_buffer));
orchestration/stream.cpp:    input_buffer_length = input_ptr - input_buffer;
orchestration/stream.cpp:                size_t cursize = input_ptr - input_buffer;
orchestration/stream.cpp:                input_tail = input_buffer + newsize - 1;
orchestration/stream.cpp:                                      (unsigned) (escape_ptr - input_buffer),
orchestration/stream.cpp:                                      ((unsigned) (input_ptr - input_buffer) -
orchestration/stream.cpp:                                      (unsigned) (escape_ptr - input_buffer),
orchestration/stream.cpp:                                      ((unsigned) (input_ptr - input_buffer) -
orchestration/stream.cpp:                                      (unsigned) (escape_ptr - input_buffer),
orchestration/stream.cpp:                                      ((unsigned) (input_ptr - input_buffer) -
orchestration/stream.cpp:                    input_ptr = escape_ptr - 1; // Back up - see case QUOTE.
orchestration/stream.cpp:                                      (unsigned) (escape_ptr - input_buffer),
orchestration/stream.cpp:                                      ((unsigned) (input_ptr - input_buffer) -
orchestration/stream.cpp:                    // so that CR-CR-LF will be handled correctly.
orchestration/stream.cpp:                              (unsigned) (escape_ptr - input_buffer),
orchestration/stream.cpp:                              (unsigned) (input_ptr - input_buffer));
orchestration/stream.cpp:        input_ptr--;
orchestration/stream.cpp:                      (unsigned) (input_ptr - input_buffer),
orchestration/stream.cpp:                      (unsigned) (input_ptr - input_buffer));
orchestration/stream.cpp:    input_buffer_length = input_ptr - input_buffer;
orchestration/stream.cpp:     histack[top] = bad_tokens.Length() - 1;
orchestration/stream.cpp:         top--;
orchestration/stream.cpp:             // The array is most-likely almost sorted. Therefore,
orchestration/stream.cpp:             if ((i - lower) < (upper - i))
orchestration/stream.cpp:                 upper = i - 1;
orchestration/stream.cpp:                 histack[top] = i - 1;
orchestration/stream.cpp:                control.system_semantic ->
orchestration/stream.cpp:                    JikesAPI::getInstance() -> reportError(&bad_tokens[i]);
orchestration/stream.cpp:                JikesAPI::getInstance() -> reportError(&bad_tokens[i]);
declarations/stream.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/stream.h:        return _decoder != (iconv_t) -1;
declarations/stream.h:        source_tail = data_buffer + size - 1;
declarations/stream.h:        return ++i < token_stream.Length() ? i : token_stream.Length() - 1;
declarations/stream.h:    inline TokenIndex Previous(TokenIndex i) { return i <= 0 ? 0 : i - 1; }
declarations/stream.h:                        : token_stream.Length() - 1);
declarations/stream.h:        return tokens[i >= NumTokens() ? NumTokens() - 1 : i].Kind();
declarations/stream.h:        return input_buffer ? FindColumn(tokens[i].Location() - 1) + 1 : 0;
declarations/stream.h:        return i < 1 ? true : Line(i - 1) < Line(i);
declarations/stream.h:        return locations[line_no + 1] - 1;
declarations/stream.h:        while (Line(--start) == the_line);
declarations/stream.h:        return bad_tokens.Length() - NumBadTokens();
Binary file stream.o matches
astGeneration/symbol.cpp:        int length = (Type() -> ContainingPackage() -> PackageNameLength() +
astGeneration/symbol.cpp:                      Type() -> ExternalNameLength() +
astGeneration/symbol.cpp:                      (is_constructor ? containing_type -> NameLength()
astGeneration/symbol.cpp:            length += (formal -> Type() -> ContainingPackage() -> PackageNameLength() +
astGeneration/symbol.cpp:                       formal -> Type() -> ExternalNameLength() +
astGeneration/symbol.cpp:                       formal -> NameLength() + 4);
astGeneration/symbol.cpp:                length += (exception -> ContainingPackage() ->
astGeneration/symbol.cpp:                           exception -> ExternalNameLength() + 3);
astGeneration/symbol.cpp:            for (s2 = containing_type -> Name(); *s2; s2++)
astGeneration/symbol.cpp:            PackageSymbol* package = Type() -> ContainingPackage();
astGeneration/symbol.cpp:            wchar_t* package_name = package -> PackageName();
astGeneration/symbol.cpp:            if (package -> PackageNameLength() > 0 &&
astGeneration/symbol.cpp:            for (s2 = Type() -> ExternalName(); *s2; s2++)
astGeneration/symbol.cpp:                    formal -> Type() -> ContainingPackage();
astGeneration/symbol.cpp:                wchar_t* package_name = package -> PackageName();
astGeneration/symbol.cpp:                if (package -> PackageNameLength() > 0 &&
astGeneration/symbol.cpp:                for (s2 = formal -> Type() -> ExternalName(); *s2; s2++)
astGeneration/symbol.cpp:                if (k == num_parameters - 1 && ACC_VARARGS())
astGeneration/symbol.cpp:                    assert(s[-2] == U_LB && s[-1] == U_RB);
astGeneration/symbol.cpp:                    s[-2] = U_DOT;
astGeneration/symbol.cpp:                    s[-1] = U_DOT;
astGeneration/symbol.cpp:                for (s2 = formal -> Name(); *s2; s2++)
astGeneration/symbol.cpp:            s -= 2; // remove the last ',' and ' '
astGeneration/symbol.cpp:            s--; // remove the last ','
astGeneration/symbol.cpp:                PackageSymbol* package = exception -> ContainingPackage();
astGeneration/symbol.cpp:                wchar_t* package_name = package -> PackageName();
astGeneration/symbol.cpp:                if (package -> PackageNameLength() > 0 &&
astGeneration/symbol.cpp:                for (s2 = exception -> ExternalName(); *s2; s2++)
astGeneration/symbol.cpp:            s--; // remove the last ','
astGeneration/symbol.cpp:        assert((s - header) <= length);
astGeneration/symbol.cpp:        file_location = new FileLocation(containing_type -> file_symbol);
astGeneration/symbol.cpp:            declaration -> MethodDeclarationCast();
astGeneration/symbol.cpp:            declaration -> ConstructorDeclarationCast();
astGeneration/symbol.cpp:            new FileLocation((containing_type -> semantic_environment ->
astGeneration/symbol.cpp:                              sem -> lex_stream),
astGeneration/symbol.cpp:                              ? method_declaration -> LeftToken()
astGeneration/symbol.cpp:                              : constructor_declaration -> LeftToken()));
astGeneration/symbol.cpp:         method = method -> next_method)
astGeneration/symbol.cpp:        assert(method -> IsTyped());
astGeneration/symbol.cpp:        if (method -> NumFormalParameters() ==
astGeneration/symbol.cpp:            method_declarator -> NumFormalParameters())
astGeneration/symbol.cpp:            for (i = method -> NumFormalParameters() - 1; i >= 0; i--)
astGeneration/symbol.cpp:                    method_declarator -> FormalParameter(i);
astGeneration/symbol.cpp:                if (method -> FormalParameter(i) -> Type() !=
astGeneration/symbol.cpp:                    parameter -> formal_declarator -> symbol -> Type())
astGeneration/symbol.cpp:    semantic_environment -> sem -> ProcessTypeHeaders(declaration);
astGeneration/symbol.cpp:    semantic_environment -> sem -> ProcessMembers(declaration);
astGeneration/symbol.cpp:    semantic_environment -> sem -> CompleteSymbolTable(declaration);
astGeneration/symbol.cpp:    semantic_environment -> sem -> ProcessExecutableBodies(declaration);
astGeneration/symbol.cpp:            for (i = 0; i < table -> NumVariableSymbols(); i++)
astGeneration/symbol.cpp:                table -> VariableSym(i) -> declarator = NULL;
astGeneration/symbol.cpp:            for (i = 0; i < table -> NumMethodSymbols(); i++)
astGeneration/symbol.cpp:                table -> MethodSym(i) -> declaration = NULL;
astGeneration/symbol.cpp:            for (i = 0; i < table -> NumTypeSymbols(); i++)
astGeneration/symbol.cpp:                table -> TypeSym(i) -> declaration = NULL;
astGeneration/symbol.cpp:            for (i = 0; i < table -> NumAnonymousSymbols(); i++)
astGeneration/symbol.cpp:                table -> AnonymousSym(i) -> declaration = NULL;
astGeneration/symbol.cpp:        return base_type -> GetArrayType(sem, dims);
astGeneration/symbol.cpp:    TypeSymbol* previous_array_type = Array(array -> Length() - 1);
astGeneration/symbol.cpp:    wcscpy(name, previous_array_type -> ExternalName());
astGeneration/symbol.cpp:    for (unsigned num = array -> Length(),
astGeneration/symbol.cpp:             len = previous_array_type -> ExternalNameLength() + 2;
astGeneration/symbol.cpp:        NameSymbol* name_sym = sem -> control.FindOrInsertName(name, len);
astGeneration/symbol.cpp:        type -> MarkHeaderProcessed();
astGeneration/symbol.cpp:        type -> MarkConstructorMembersProcessed();
astGeneration/symbol.cpp:        type -> MarkMethodMembersProcessed();
astGeneration/symbol.cpp:        type -> MarkFieldMembersProcessed();
astGeneration/symbol.cpp:        type -> MarkLocalClassProcessingCompleted();
astGeneration/symbol.cpp:        type -> MarkSourceNoLongerPending();
astGeneration/symbol.cpp:        type -> outermost_type = type;
astGeneration/symbol.cpp:          type -> SetACC_PUBLIC();
astGeneration/symbol.cpp:          type -> SetACC_PROTECTED();
astGeneration/symbol.cpp:          type -> SetACC_PRIVATE();
astGeneration/symbol.cpp:        type -> SetACC_FINAL();
astGeneration/symbol.cpp:        type -> super = sem -> control.Object();
astGeneration/symbol.cpp:        type -> AddInterface(sem -> control.Serializable());
astGeneration/symbol.cpp:        type -> AddInterface(sem -> control.Cloneable());
astGeneration/symbol.cpp:        type -> base_type = this;
astGeneration/symbol.cpp:        type -> num_dimensions = num;
astGeneration/symbol.cpp:        type -> SetOwner(ContainingPackage());
astGeneration/symbol.cpp:        type -> table = new SymbolTable(2);
astGeneration/symbol.cpp:        type -> SetSignature(sem -> control);
astGeneration/symbol.cpp:            type -> InsertMethodSymbol(sem -> control.clone_name_symbol);
astGeneration/symbol.cpp:        method -> SetType(sem -> control.Object());
astGeneration/symbol.cpp:        method -> SetContainingType(type);
astGeneration/symbol.cpp:        method -> SetFlags(ACCESS_PUBLIC | ACCESS_FINAL);
astGeneration/symbol.cpp:        method -> SetBlockSymbol(new BlockSymbol(1));
astGeneration/symbol.cpp:        method -> SetSignature(sem -> control);
astGeneration/symbol.cpp:            type -> InsertVariableSymbol(sem -> control.length_name_symbol);
astGeneration/symbol.cpp:        symbol -> SetFlags(ACCESS_PUBLIC | ACCESS_FINAL);
astGeneration/symbol.cpp:        symbol -> SetOwner(type);
astGeneration/symbol.cpp:        symbol -> SetType(sem -> control.int_type);
astGeneration/symbol.cpp:        symbol -> MarkComplete();
astGeneration/symbol.cpp:        symbol -> MarkInitialized();
astGeneration/symbol.cpp:        type -> CompressSpace(); // space optimization
astGeneration/symbol.cpp:            new FileLocation(semantic_environment -> sem -> lex_stream,
astGeneration/symbol.cpp:                             declaration -> identifier_token);
astGeneration/symbol.cpp:        int signature_len = strlen(subtype -> SignatureString()) + 1;
astGeneration/symbol.cpp:        strcpy(type_signature + 1, subtype -> SignatureString());
astGeneration/symbol.cpp:        int len = ContainingPackage() -> PackageNameLength() +
astGeneration/symbol.cpp:        if (ContainingPackage() -> PackageNameLength() > 0 &&
astGeneration/symbol.cpp:        int i = symbol -> name_symbol -> index % hash_size;
astGeneration/symbol.cpp:        symbol -> next = base[i];
astGeneration/symbol.cpp:        if (symbol -> next != symbol) // not an overload
astGeneration/symbol.cpp:            int i = symbol -> name_symbol -> index % hash_size;
astGeneration/symbol.cpp:            symbol -> next = base[i];
astGeneration/symbol.cpp:        int i = symbol -> name_symbol -> index % hash_size;
astGeneration/symbol.cpp:        symbol -> next = base[i];
astGeneration/symbol.cpp:        if (! symbol -> BlockCast())
astGeneration/symbol.cpp:            int i = symbol -> Identity() -> index % hash_size;
astGeneration/symbol.cpp:            symbol -> next = base[i];
astGeneration/symbol.cpp:    prime_index = -1;
astGeneration/symbol.cpp:    package_name_length = (owner ? owner -> PackageNameLength() + 1 : 0) +
astGeneration/symbol.cpp:        wcscpy(package_name, owner -> PackageName());
astGeneration/symbol.cpp:    return local ? local -> Size() : 0;
astGeneration/symbol.cpp:        super -> subtypes -> RemoveElement(this);
astGeneration/symbol.cpp:        super -> dependents -> RemoveElement(this);
astGeneration/symbol.cpp:            interf -> subtypes -> RemoveElement(this);
astGeneration/symbol.cpp:            interf -> dependents -> RemoveElement(this);
astGeneration/symbol.cpp:    : max_variable_index(-1)
astGeneration/symbol.cpp:    , helper_variable_index(-1)
astGeneration/symbol.cpp:    PathSymbol* path_symbol = owner -> PathCast();
astGeneration/symbol.cpp:        if (strcmp(path_symbol -> Utf8Name(), ".") == 0)
astGeneration/symbol.cpp:            directory_name_length = path_symbol -> Utf8NameLength();
astGeneration/symbol.cpp:            strcpy(directory_name, path_symbol -> Utf8Name());
astGeneration/symbol.cpp:        DirectorySymbol* owner_directory = owner -> DirectoryCast();
astGeneration/symbol.cpp:        if (Name()[NameLength() - 1] == U_SLASH ||
astGeneration/symbol.cpp:            strcmp(owner_directory -> DirectoryName(), ".") == 0)
astGeneration/symbol.cpp:            int owner_length = owner_directory -> DirectoryNameLength();
astGeneration/symbol.cpp:            char* owner_name = owner_directory -> DirectoryName();
astGeneration/symbol.cpp:                (owner_name[owner_length - 1] != U_SLASH ? 1 : 0); // +1: '/'
astGeneration/symbol.cpp:            strcpy(directory_name, owner_directory -> DirectoryName());
astGeneration/symbol.cpp:            if (owner_name[owner_length - 1] != U_SLASH)
astGeneration/symbol.cpp:                unsigned length = strlen(entry -> d_name);
astGeneration/symbol.cpp:                     FileSymbol::IsJavaSuffix(&entry -> d_name[length - FileSymbol::java_suffix_length])) ||
astGeneration/symbol.cpp:                     FileSymbol::IsClassSuffix(&entry -> d_name[length - FileSymbol::class_suffix_length])) ||
astGeneration/symbol.cpp:                    (Case::Index(entry -> d_name, U_DOT) < 0 &&
astGeneration/symbol.cpp:                     SystemIsDirectory(entry -> d_name)))
astGeneration/symbol.cpp:                    int len = DirectoryNameLength() + strlen(entry -> d_name);
astGeneration/symbol.cpp:                            entry -> d_name);
astGeneration/symbol.cpp:                    if(JikesAPI::getInstance() -> stat(filename, &status) == 0)
astGeneration/symbol.cpp:                        entries -> InsertEntry(this, entry -> d_name, length);
astGeneration/symbol.cpp:        if (directory_name[dir_name_len - 1] != U_SLASH)
astGeneration/symbol.cpp:                                FileSymbol::IsJavaSuffix(&entry.cFileName[length - FileSymbol::java_suffix_length])),
astGeneration/symbol.cpp:                                 FileSymbol::IsClassSuffix(&entry.cFileName[length - FileSymbol::class_suffix_length]));
astGeneration/symbol.cpp:                        strcpy(&clean_name[length - FileSymbol::java_suffix_length],
astGeneration/symbol.cpp:                        strcpy(&clean_name[length - FileSymbol::class_suffix_length],
astGeneration/symbol.cpp:                        entries -> InsertEntry(this, clean_name, length);
astGeneration/symbol.cpp:                        entries -> InsertCaseInsensitiveEntry(entry);
astGeneration/symbol.cpp:    char* directory_name = directory_symbol -> DirectoryName();
astGeneration/symbol.cpp:    size_t directory_name_length = directory_symbol -> DirectoryNameLength();
astGeneration/symbol.cpp:        (path_symbol -> IsZip() ? 2 // For zip files, we need "()";
astGeneration/symbol.cpp:            directory_name[directory_name_length - 1] == U_SLASH ? 0 : 1)) +
astGeneration/symbol.cpp:        strcpy(file_name, directory_symbol -> DirectoryName());
astGeneration/symbol.cpp:        if (path_symbol -> IsZip())
astGeneration/symbol.cpp:        else if (directory_name[directory_name_length - 1] != U_SLASH)
astGeneration/symbol.cpp:    if (path_symbol -> IsZip())
astGeneration/symbol.cpp:        for (i = FileNameLength() - 1; i >= 0; i--)
astGeneration/symbol.cpp:        int file_name_length = FileNameLength() - file_name_start;
astGeneration/symbol.cpp:            control -> Utf8_pool.FindOrInsert(file_name + file_name_start,
astGeneration/symbol.cpp:        delete compilation_unit -> ast_pool;
astGeneration/symbol.cpp:    char* file_name = lex_stream -> FileName();
astGeneration/symbol.cpp:    unsigned length = lex_stream -> FileNameLength();
astGeneration/symbol.cpp:    IntToWstring line_no(lex_stream -> Line(token_index));
astGeneration/symbol.cpp:    if (semantic_environment -> sem -> control.option.directory)
astGeneration/symbol.cpp:        DirectorySymbol* output_directory = file_symbol -> OutputDirectory();
astGeneration/symbol.cpp:        int directory_length = output_directory -> DirectoryNameLength();
astGeneration/symbol.cpp:        char* directory_name = output_directory -> DirectoryName();
astGeneration/symbol.cpp:        if (directory_name[directory_length - 1] != U_SLASH)
astGeneration/symbol.cpp:            semantic_environment -> sem -> lex_stream -> FileName();
astGeneration/symbol.cpp:        for (n = semantic_environment -> sem -> lex_stream ->
astGeneration/symbol.cpp:                 FileNameLength() - 1;
astGeneration/symbol.cpp:             n >= 0; n--)
astGeneration/symbol.cpp:        NameSymbol* name_symbol = sem ->
astGeneration/symbol.cpp:        sem -> ProcessNestedType(this, name_symbol, tok);
astGeneration/symbol.cpp:                sem -> ReadTypeFromSignature(containing_type,
astGeneration/symbol.cpp:    int len = is_constructor ? 3 : 2 + strlen(Type() -> SignatureString());
astGeneration/symbol.cpp:    TypeSymbol* this0_type = containing_type -> EnclosingType();
astGeneration/symbol.cpp:        len += strlen(this0_type -> SignatureString());
astGeneration/symbol.cpp:        TypeSymbol* formal_type = FormalParameter(i) -> Type();
astGeneration/symbol.cpp:        len += strlen(formal_type -> SignatureString());
astGeneration/symbol.cpp:        for (i = 0; i < containing_type -> NumConstructorParameters(); i++)
astGeneration/symbol.cpp:                containing_type -> ConstructorParameter(i) -> Type();
astGeneration/symbol.cpp:            len += strlen(shadow_type -> SignatureString());
astGeneration/symbol.cpp:            len += strlen(placeholder -> SignatureString());
astGeneration/symbol.cpp:    if (block_symbol && variable_index > block_symbol -> max_variable_index)
astGeneration/symbol.cpp:        block_symbol -> max_variable_index = variable_index;
astGeneration/symbol.cpp:        for (const char* str = this0_type -> SignatureString();
astGeneration/symbol.cpp:        TypeSymbol* formal_type = FormalParameter(i) -> Type();
astGeneration/symbol.cpp:        for (const char* str = formal_type -> SignatureString();
astGeneration/symbol.cpp:        for (i = 0; i < containing_type -> NumConstructorParameters(); i++)
astGeneration/symbol.cpp:                containing_type -> ConstructorParameter(i) -> Type();
astGeneration/symbol.cpp:            for (const char* str = shadow_type -> SignatureString();
astGeneration/symbol.cpp:            for (const char* str = placeholder -> SignatureString();
astGeneration/symbol.cpp:        for (const char* str = Type() -> SignatureString(); *str; str++, s++)
astGeneration/symbol.cpp:        if (containing_type -> EnclosingType() &&
astGeneration/symbol.cpp:            ! containing_type -> EnclosingType() -> ACC_PRIVATE() &&
astGeneration/symbol.cpp:            Identity() == sem -> control.init_name_symbol)
astGeneration/symbol.cpp:            TypeSymbol* enclosing = sem -> ProcessSignature(containing_type,
astGeneration/symbol.cpp:            assert(enclosing == containing_type -> EnclosingType());
astGeneration/symbol.cpp:                sem -> control.MakeParameter(++num_parameters);
astGeneration/symbol.cpp:            symbol -> SetType(sem -> ProcessSignature(containing_type,
astGeneration/symbol.cpp:            symbol -> MarkComplete();
astGeneration/symbol.cpp:        if (Identity() == sem -> control.init_name_symbol)
astGeneration/symbol.cpp:            SetType(sem -> ProcessSignature(containing_type, signature,
astGeneration/symbol.cpp:            block_symbol -> InsertVariableSymbol((*formal_parameters)[k]);
astGeneration/symbol.cpp:        block_symbol -> CompressSpace(); // space optimization
astGeneration/symbol.cpp:    // Make a copy of each parameter into the new pared-down symbol table and
astGeneration/symbol.cpp:            block -> InsertVariableSymbol(formal_parameter -> Identity());
astGeneration/symbol.cpp:        symbol -> SetType(formal_parameter -> Type());
astGeneration/symbol.cpp:        symbol -> MarkComplete();
astGeneration/symbol.cpp:    block -> CompressSpace(); // space optimization
astGeneration/symbol.cpp:    if (IsLocal(sem -> ThisMethod()))
astGeneration/symbol.cpp:        assert(sem -> FinalFields());
astGeneration/symbol.cpp:        return local_variable_index + sem -> FinalFields() -> Length();
astGeneration/symbol.cpp:        file_location = new FileLocation(ContainingType() -> file_symbol);
astGeneration/symbol.cpp:            new FileLocation((ContainingType() -> semantic_environment ->
astGeneration/symbol.cpp:                              sem -> lex_stream),
astGeneration/symbol.cpp:                             declarator -> LeftToken());
astGeneration/symbol.cpp:        SetType(sem -> ProcessSignature((TypeSymbol*) owner, signature,
astGeneration/symbol.cpp:         env; env = env -> previous)
astGeneration/symbol.cpp:        if (env -> Type() == type)
astGeneration/symbol.cpp:// be properly set. Non-static nested classes, however, could have been
astGeneration/symbol.cpp:         env; env = env -> previous)
astGeneration/symbol.cpp:        if (exact ? (env -> Type() == type)
astGeneration/symbol.cpp:            : (env -> Type() -> IsSubclass(type)))
astGeneration/symbol.cpp:            return ! env -> StaticRegion();
astGeneration/symbol.cpp:        if (env -> Type() -> ACC_STATIC()) // No more enclosing levels exist.
astGeneration/symbol.cpp:    assert(semantic_environment && ! target_type -> IsArray());
astGeneration/symbol.cpp:         env; env = env -> previous)
astGeneration/symbol.cpp:        TypeSymbol* main_type = env -> Type();
astGeneration/symbol.cpp:             type; type = type -> owner -> TypeCast())
astGeneration/symbol.cpp:            if (main_type -> IsSubclass(type))
astGeneration/symbol.cpp:           ! semantic_environment -> previous -> StaticRegion());
astGeneration/symbol.cpp:    Control& control = semantic_environment -> sem -> control;
astGeneration/symbol.cpp:    variable_symbol -> SetType(ContainingType());
astGeneration/symbol.cpp:    variable_symbol -> SetFlags(ACCESS_FINAL | ACCESS_SYNTHETIC);
astGeneration/symbol.cpp:    variable_symbol -> SetOwner(this);
astGeneration/symbol.cpp:    variable_symbol -> MarkComplete();
astGeneration/symbol.cpp:    variable_symbol -> MarkInitialized();
astGeneration/symbol.cpp:    // Normally, the place-holder type for invoking private constructors can
astGeneration/symbol.cpp:    // initialization. But if we use the place-holder type to store the
astGeneration/symbol.cpp:    if (placeholder_type && (placeholder_type -> super !=
astGeneration/symbol.cpp:                             semantic_environment -> sem -> control.Object()))
astGeneration/symbol.cpp:        block_symbol -> max_variable_index = 2;
astGeneration/symbol.cpp:        class_literal_method -> SetType(control.Class());
astGeneration/symbol.cpp:        class_literal_method -> SetFlags(ACCESS_STATIC | ACCESS_SYNTHETIC);
astGeneration/symbol.cpp:        class_literal_method -> SetContainingType(this);
astGeneration/symbol.cpp:        class_literal_method -> SetBlockSymbol(block_symbol);
astGeneration/symbol.cpp:            block_symbol -> InsertVariableSymbol(control.MakeParameter(1));
astGeneration/symbol.cpp:        variable_symbol -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:        variable_symbol -> SetType(control.String());
astGeneration/symbol.cpp:        variable_symbol -> SetOwner(class_literal_method);
astGeneration/symbol.cpp:        variable_symbol -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:        variable_symbol -> MarkComplete();
astGeneration/symbol.cpp:        class_literal_method -> AddFormalParameter(variable_symbol);
astGeneration/symbol.cpp:            block_symbol -> InsertVariableSymbol(control.MakeParameter(2));
astGeneration/symbol.cpp:        variable_symbol -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:        variable_symbol -> SetType(control.boolean_type);
astGeneration/symbol.cpp:        variable_symbol -> SetOwner(class_literal_method);
astGeneration/symbol.cpp:        variable_symbol -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:        variable_symbol -> MarkComplete();
astGeneration/symbol.cpp:        class_literal_method -> AddFormalParameter(variable_symbol);
astGeneration/symbol.cpp:        class_literal_method -> SetSignature(control);
astGeneration/symbol.cpp:        semantic_environment -> sem -> AddDependence(this, control.Class());
astGeneration/symbol.cpp:        int length = fully_qualified_name -> length;
astGeneration/symbol.cpp:        char* slashed_name = fully_qualified_name -> value;
astGeneration/symbol.cpp:    assert(! type -> Primitive() && ! type -> Anonymous());
astGeneration/symbol.cpp:    Semantic* sem = semantic_environment -> sem;
astGeneration/symbol.cpp:    Control& control = sem -> control;
astGeneration/symbol.cpp:    // non-public members, so if the innermost non-local type is an interface,
astGeneration/symbol.cpp:    while (owner -> IsInner())
astGeneration/symbol.cpp:        owner = owner -> ContainingType();
astGeneration/symbol.cpp:    if (owner -> ACC_INTERFACE())
astGeneration/symbol.cpp:        owner = outermost_type -> FindOrInsertClassLiteralClass();
astGeneration/symbol.cpp:    owner -> FindOrInsertClassLiteralMethod(control);
astGeneration/symbol.cpp:    const char* signature = type -> SignatureString();
astGeneration/symbol.cpp:        int array_length = control.array_name_symbol -> NameLength();
astGeneration/symbol.cpp:        wcscpy(name, control.array_name_symbol -> Name());
astGeneration/symbol.cpp:        int class_length = control.class_name_symbol -> NameLength();
astGeneration/symbol.cpp:        wcscpy(name, control.class_name_symbol -> Name());
astGeneration/symbol.cpp:    VariableSymbol* variable_symbol = owner -> FindVariableSymbol(name_symbol);
astGeneration/symbol.cpp:        variable_symbol = owner -> InsertVariableSymbol(name_symbol);
astGeneration/symbol.cpp:        variable_symbol -> SetType(control.Class());
astGeneration/symbol.cpp:        variable_symbol -> SetFlags(ACCESS_STATIC | ACCESS_SYNTHETIC);
astGeneration/symbol.cpp:        variable_symbol -> SetOwner(owner);
astGeneration/symbol.cpp:        variable_symbol -> MarkComplete();
astGeneration/symbol.cpp:        owner -> AddClassLiteral(variable_symbol);
astGeneration/symbol.cpp:        Semantic* sem = semantic_environment -> sem;
astGeneration/symbol.cpp:        Control& control = sem -> control;
astGeneration/symbol.cpp:        assert_variable -> SetType(control.boolean_type);
astGeneration/symbol.cpp:        assert_variable -> SetFlags(ACCESS_PRIVATE | ACCESS_STATIC |
astGeneration/symbol.cpp:        assert_variable -> SetOwner(this);
astGeneration/symbol.cpp:        assert_variable -> MarkComplete();
astGeneration/symbol.cpp:        assert_variable -> MarkInitialized();
astGeneration/symbol.cpp:        sem -> GetStaticInitializerMethod();
astGeneration/symbol.cpp:    assert(IsLocal() && local -> IsLocal());
astGeneration/symbol.cpp:    Control& control = semantic_environment -> sem -> control;
astGeneration/symbol.cpp:        variable = (VariableSymbol*) local_shadow_map -> Image(local);
astGeneration/symbol.cpp:    // In 1.5 and later, we use the prefix "-" instead of "val$".
astGeneration/symbol.cpp:        int length = control.val_name_symbol -> NameLength() +
astGeneration/symbol.cpp:            local -> NameLength();
astGeneration/symbol.cpp:        wcscpy(name, control.val_name_symbol -> Name());
astGeneration/symbol.cpp:        wcscat(name, local -> Name());
astGeneration/symbol.cpp:        variable -> SetType(local -> Type());
astGeneration/symbol.cpp:        variable -> SetFlags(ACCESS_FINAL | ACCESS_SYNTHETIC);
astGeneration/symbol.cpp:        variable -> SetOwner(this);
astGeneration/symbol.cpp:        variable -> MarkComplete();
astGeneration/symbol.cpp:        variable -> MarkInitialized();
astGeneration/symbol.cpp:        if (ContainingType() == local -> ContainingType())
astGeneration/symbol.cpp:            variable -> accessed_local = local;
astGeneration/symbol.cpp:            variable -> accessed_local = semantic_environment -> sem ->
astGeneration/symbol.cpp:        local_shadow_map -> Map(local, variable);
astGeneration/symbol.cpp:    for (accessed = variable -> accessed_local;
astGeneration/symbol.cpp:         accessed = accessed -> accessed_local);
astGeneration/symbol.cpp:    Map<TypeSymbol, MethodSymbol>* map = read_methods -> Image(symbol);
astGeneration/symbol.cpp:        read_methods -> Add(symbol, map);
astGeneration/symbol.cpp:    map -> Add(base_type, method);
astGeneration/symbol.cpp:        Map<TypeSymbol, MethodSymbol>* map = read_methods -> Image(symbol);
astGeneration/symbol.cpp:            return map -> Image(base_type);
astGeneration/symbol.cpp:    Map<TypeSymbol, MethodSymbol>* map = write_methods -> Image(symbol);
astGeneration/symbol.cpp:        write_methods -> Add(symbol, map);
astGeneration/symbol.cpp:    map -> Add(base_type, method);
astGeneration/symbol.cpp:        Map<TypeSymbol, MethodSymbol>* map = write_methods -> Image(symbol);
astGeneration/symbol.cpp:            return map -> Image(base_type);
astGeneration/symbol.cpp:    assert(member -> Identity() !=
astGeneration/symbol.cpp:           semantic_environment -> sem -> control.init_name_symbol);
astGeneration/symbol.cpp:    TypeSymbol* containing_type = member -> containing_type;
astGeneration/symbol.cpp:    assert((member -> ACC_PRIVATE() && this == containing_type) ||
astGeneration/symbol.cpp:           (member -> ACC_PROTECTED() &&
astGeneration/symbol.cpp:            ! semantic_environment -> sem -> ProtectedAccessCheck(containing_type)) ||
astGeneration/symbol.cpp:           (base_type == super && ! member -> ACC_STATIC()));
astGeneration/symbol.cpp:        // In 1.5 and later, we use the prefix "-" instead of "access$".
astGeneration/symbol.cpp:        Semantic* sem = semantic_environment -> sem;
astGeneration/symbol.cpp:        Control& control = sem -> control;
astGeneration/symbol.cpp:        StoragePool* ast_pool = sem -> compilation_unit -> ast_pool;
astGeneration/symbol.cpp:        int length = control.access_name_symbol -> NameLength() +
astGeneration/symbol.cpp:        wcscpy(name, control.access_name_symbol -> Name());
astGeneration/symbol.cpp:        TokenIndex loc = declaration -> identifier_token;
astGeneration/symbol.cpp:        unsigned parameter_count = member -> NumFormalParameters();
astGeneration/symbol.cpp:        Table() -> AddMethodSymbol(read_method);
astGeneration/symbol.cpp:        read_method -> SetType(member -> Type());
astGeneration/symbol.cpp:        read_method -> SetFlags(ACCESS_STATIC | ACCESS_SYNTHETIC);
astGeneration/symbol.cpp:        if (member -> ACC_STRICTFP())
astGeneration/symbol.cpp:            read_method -> SetACC_STRICTFP();
astGeneration/symbol.cpp:        if (member -> ACC_FINAL() || ACC_FINAL())
astGeneration/symbol.cpp:            read_method -> SetACC_FINAL();
astGeneration/symbol.cpp:        read_method -> SetContainingType(this);
astGeneration/symbol.cpp:                            (member -> ACC_STATIC() ? 0 : 1));
astGeneration/symbol.cpp:        block_symbol -> max_variable_index = 0;
astGeneration/symbol.cpp:        read_method -> SetBlockSymbol(block_symbol);
astGeneration/symbol.cpp:        for (unsigned j = 0; j < member -> NumThrows(); j++)
astGeneration/symbol.cpp:            read_method -> AddThrows(member -> Throws(j));
astGeneration/symbol.cpp:        if (! member -> ACC_STATIC() && base_type == super)
astGeneration/symbol.cpp:            // Special case - for Outer.super.m() where m() is an instance
astGeneration/symbol.cpp:            base = ast_pool -> GenSuperExpression(loc);
astGeneration/symbol.cpp:        else base = ast_pool -> GenName(loc);
astGeneration/symbol.cpp:        AstArguments* args = ast_pool -> GenArguments(loc, loc);
astGeneration/symbol.cpp:        args -> AllocateArguments(parameter_count);
astGeneration/symbol.cpp:            ast_pool -> GenMethodInvocation(loc);
astGeneration/symbol.cpp:        method_invocation -> base_opt = base;
astGeneration/symbol.cpp:        method_invocation -> arguments = args;
astGeneration/symbol.cpp:        method_invocation -> symbol = member;
astGeneration/symbol.cpp:            ast_pool -> GenMethodDeclarator();
astGeneration/symbol.cpp:        method_declarator -> identifier_token = loc;
astGeneration/symbol.cpp:        method_declarator -> left_parenthesis_token = loc;
astGeneration/symbol.cpp:        method_declarator -> right_parenthesis_token = loc;
astGeneration/symbol.cpp:        if (member -> ACC_STATIC())
astGeneration/symbol.cpp:            method_declarator -> AllocateFormalParameters(parameter_count);
astGeneration/symbol.cpp:            base -> symbol = base_type;
astGeneration/symbol.cpp:            method_declarator -> AllocateFormalParameters(parameter_count + 1);
astGeneration/symbol.cpp:                block_symbol -> InsertVariableSymbol(instance_name);
astGeneration/symbol.cpp:            instance -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:            instance -> SetType(base_type == super ? this : base_type);
astGeneration/symbol.cpp:            instance -> SetOwner(read_method);
astGeneration/symbol.cpp:            instance -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:            instance -> MarkComplete();
astGeneration/symbol.cpp:            read_method -> AddFormalParameter(instance);
astGeneration/symbol.cpp:            base -> symbol = (base_type == super
astGeneration/symbol.cpp:            VariableSymbol* parm = block_symbol ->
astGeneration/symbol.cpp:                InsertVariableSymbol(member -> FormalParameter(i) -> Identity());
astGeneration/symbol.cpp:            parm -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:            parm -> SetType(member -> FormalParameter(i) -> Type());
astGeneration/symbol.cpp:            parm -> SetOwner(read_method);
astGeneration/symbol.cpp:            parm -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:            parm -> MarkComplete();
astGeneration/symbol.cpp:            if (control.IsDoubleWordType(parm -> Type()))
astGeneration/symbol.cpp:                block_symbol -> max_variable_index++;
astGeneration/symbol.cpp:            read_method -> AddFormalParameter(parm);
astGeneration/symbol.cpp:            AstName* simple_name = ast_pool -> GenName(loc);
astGeneration/symbol.cpp:            simple_name -> symbol = parm;
astGeneration/symbol.cpp:            args -> AddArgument(simple_name);
astGeneration/symbol.cpp:        read_method -> SetSignature(control);
astGeneration/symbol.cpp:            ast_pool -> GenReturnStatement();
astGeneration/symbol.cpp:        return_statement -> return_token = loc;
astGeneration/symbol.cpp:        return_statement -> semicolon_token = loc;
astGeneration/symbol.cpp:        return_statement -> is_reachable = true;
astGeneration/symbol.cpp:        AstMethodBody* block = ast_pool -> GenMethodBody();
astGeneration/symbol.cpp:        block -> left_brace_token = loc;
astGeneration/symbol.cpp:        block -> right_brace_token = loc;
astGeneration/symbol.cpp:        block -> block_symbol = new BlockSymbol(0);
astGeneration/symbol.cpp:        block -> is_reachable = true;
astGeneration/symbol.cpp:        if (member -> Type() == control.void_type)
astGeneration/symbol.cpp:                ast_pool -> GenExpressionStatement();
astGeneration/symbol.cpp:            expression_statement -> expression = method_invocation;
astGeneration/symbol.cpp:            expression_statement -> semicolon_token_opt = loc;
astGeneration/symbol.cpp:            expression_statement -> is_reachable = true;
astGeneration/symbol.cpp:            expression_statement -> can_complete_normally = true;
astGeneration/symbol.cpp:            block -> AllocateStatements(2);
astGeneration/symbol.cpp:            block -> AddStatement(expression_statement);
astGeneration/symbol.cpp:            return_statement -> expression_opt = method_invocation;
astGeneration/symbol.cpp:            block -> AllocateStatements(1);
astGeneration/symbol.cpp:        block -> AddStatement(return_statement);
astGeneration/symbol.cpp:            ast_pool -> GenMethodDeclaration();
astGeneration/symbol.cpp:        method_declaration -> method_symbol = read_method;
astGeneration/symbol.cpp:        method_declaration -> method_declarator = method_declarator;
astGeneration/symbol.cpp:        method_declaration -> method_body_opt = block;
astGeneration/symbol.cpp:        read_method -> declaration = method_declaration;
astGeneration/symbol.cpp:        read_method -> accessed_member = member;
astGeneration/symbol.cpp:    assert((ctor -> Identity() ==
astGeneration/symbol.cpp:            semantic_environment -> sem -> control.init_name_symbol) &&
astGeneration/symbol.cpp:           ctor -> ACC_PRIVATE() && this == ctor -> containing_type &&
astGeneration/symbol.cpp:        // We must create a synthetic place-holder class, and expand this to:
astGeneration/symbol.cpp:        // Here again, we create a place-holder class for now.  TODO:
astGeneration/symbol.cpp:        Semantic* sem = semantic_environment -> sem;
astGeneration/symbol.cpp:        if (sem -> error && sem -> error -> InClone())
astGeneration/symbol.cpp:        Control& control = sem -> control;
astGeneration/symbol.cpp:        StoragePool* ast_pool = sem -> compilation_unit -> ast_pool;
astGeneration/symbol.cpp:            new BlockSymbol(ctor -> NumFormalParameters() + 3);
astGeneration/symbol.cpp:        Table() -> AddMethodSymbol(read_method);
astGeneration/symbol.cpp:        read_method -> SetType(this);
astGeneration/symbol.cpp:        read_method -> SetContainingType(this);
astGeneration/symbol.cpp:        read_method -> SetBlockSymbol(block_symbol);
astGeneration/symbol.cpp:        read_method -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:        if (ctor -> ACC_STRICTFP())
astGeneration/symbol.cpp:            read_method -> SetACC_STRICTFP();
astGeneration/symbol.cpp:        for (unsigned j = 0; j < ctor -> NumThrows(); j++)
astGeneration/symbol.cpp:            read_method -> AddThrows(ctor -> Throws(j));
astGeneration/symbol.cpp:        block_symbol -> max_variable_index = 1;
astGeneration/symbol.cpp:        read_method -> SetExternalIdentity(ctor -> Identity());
astGeneration/symbol.cpp:        Ast* declaration = ctor -> declaration;
astGeneration/symbol.cpp:            ((AstConstructorDeclaration*) declaration) -> constructor_declarator;
astGeneration/symbol.cpp:        TokenIndex loc = declarator -> identifier_token;
astGeneration/symbol.cpp:            ast_pool -> GenMethodDeclarator();
astGeneration/symbol.cpp:        method_declarator -> identifier_token = loc;
astGeneration/symbol.cpp:        method_declarator -> left_parenthesis_token =
astGeneration/symbol.cpp:            declarator -> LeftToken();
astGeneration/symbol.cpp:        method_declarator -> right_parenthesis_token =
astGeneration/symbol.cpp:            declarator -> RightToken();
astGeneration/symbol.cpp:        AstArguments* args = ast_pool -> GenArguments(loc, loc);
astGeneration/symbol.cpp:        args -> AllocateArguments(ctor -> NumFormalParameters());
astGeneration/symbol.cpp:        AstThisCall* this_call = ast_pool -> GenThisCall();
astGeneration/symbol.cpp:        this_call -> this_token = loc;
astGeneration/symbol.cpp:        this_call -> arguments = args;
astGeneration/symbol.cpp:        this_call -> semicolon_token = loc;
astGeneration/symbol.cpp:        this_call -> symbol = ctor;
astGeneration/symbol.cpp:            this0_variable = block_symbol ->
astGeneration/symbol.cpp:            this0_variable -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:            this0_variable -> SetType(ContainingType());
astGeneration/symbol.cpp:            this0_variable -> SetOwner(read_method);
astGeneration/symbol.cpp:            this0_variable -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:            this0_variable -> MarkComplete();
astGeneration/symbol.cpp:        for (unsigned i = 0; i < ctor -> NumFormalParameters(); i++)
astGeneration/symbol.cpp:            parm = block_symbol -> InsertVariableSymbol(ctor -> FormalParameter(i) -> Identity());
astGeneration/symbol.cpp:            parm -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:            parm -> SetType(ctor -> FormalParameter(i) -> Type());
astGeneration/symbol.cpp:            parm -> SetOwner(read_method);
astGeneration/symbol.cpp:            parm -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:            parm -> MarkComplete();
astGeneration/symbol.cpp:            if (control.IsDoubleWordType(parm -> Type()))
astGeneration/symbol.cpp:                block_symbol -> max_variable_index++;
astGeneration/symbol.cpp:            read_method -> AddFormalParameter(parm);
astGeneration/symbol.cpp:                declarator -> FormalParameter(i) -> formal_declarator ->
astGeneration/symbol.cpp:            AstName* simple_name = ast_pool ->
astGeneration/symbol.cpp:                GenName(variable_declarator_name -> identifier_token);
astGeneration/symbol.cpp:            simple_name -> symbol = parm;
astGeneration/symbol.cpp:            args -> AddArgument(simple_name);
astGeneration/symbol.cpp:        read_method -> SetSignature(control,
astGeneration/symbol.cpp:                                    outermost_type -> GetPlaceholderType());
astGeneration/symbol.cpp:            ast_pool -> GenReturnStatement();
astGeneration/symbol.cpp:        return_statement -> return_token = loc;
astGeneration/symbol.cpp:        return_statement -> semicolon_token = loc;
astGeneration/symbol.cpp:        return_statement -> is_reachable = true;
astGeneration/symbol.cpp:        AstMethodBody* constructor_block = ast_pool -> GenMethodBody();
astGeneration/symbol.cpp:        constructor_block -> block_symbol = new BlockSymbol(0);
astGeneration/symbol.cpp:        constructor_block -> block_symbol -> max_variable_index =
astGeneration/symbol.cpp:            block_symbol -> max_variable_index;
astGeneration/symbol.cpp:        constructor_block -> left_brace_token = loc;
astGeneration/symbol.cpp:        constructor_block -> right_brace_token = loc;
astGeneration/symbol.cpp:        constructor_block -> AllocateStatements(1);
astGeneration/symbol.cpp:        constructor_block -> AddStatement(return_statement);
astGeneration/symbol.cpp:        constructor_block -> explicit_constructor_opt = this_call;
astGeneration/symbol.cpp:            ast_pool -> GenConstructorDeclaration();
astGeneration/symbol.cpp:        constructor_declaration -> constructor_declarator = method_declarator;
astGeneration/symbol.cpp:        constructor_declaration -> constructor_body = constructor_block;
astGeneration/symbol.cpp:        constructor_declaration -> constructor_symbol = read_method;
astGeneration/symbol.cpp:        read_method -> declaration = constructor_declaration;
astGeneration/symbol.cpp:        read_method -> accessed_member = ctor;
astGeneration/symbol.cpp:    TypeSymbol* containing_type = member -> owner -> TypeCast();
astGeneration/symbol.cpp:    assert((member -> ACC_PRIVATE() && this == containing_type) ||
astGeneration/symbol.cpp:           (member -> ACC_PROTECTED() &&
astGeneration/symbol.cpp:            (! semantic_environment -> sem -> ProtectedAccessCheck(containing_type) ||
astGeneration/symbol.cpp:             (base_type == super && ! member -> ACC_STATIC()))));
astGeneration/symbol.cpp:        // In 1.5 and later, we use the prefix "-" instead of "access$".
astGeneration/symbol.cpp:        Semantic* sem = semantic_environment -> sem;
astGeneration/symbol.cpp:        Control& control = sem -> control;
astGeneration/symbol.cpp:        StoragePool* ast_pool = sem -> compilation_unit -> ast_pool;
astGeneration/symbol.cpp:        int length = control.access_name_symbol -> NameLength() +
astGeneration/symbol.cpp:        wcscpy(name, control.access_name_symbol -> Name());
astGeneration/symbol.cpp:        TokenIndex loc = declaration -> identifier_token;
astGeneration/symbol.cpp:        Table() -> AddMethodSymbol(read_method);
astGeneration/symbol.cpp:        read_method -> SetType(member -> Type());
astGeneration/symbol.cpp:        read_method -> SetFlags(ACCESS_STATIC | ACCESS_SYNTHETIC);
astGeneration/symbol.cpp:            read_method -> SetACC_STRICTFP();
astGeneration/symbol.cpp:            read_method -> SetACC_FINAL();
astGeneration/symbol.cpp:        read_method -> SetContainingType(this);
astGeneration/symbol.cpp:            new BlockSymbol(member -> ACC_STATIC() ? 0 : 1);
astGeneration/symbol.cpp:        block_symbol -> max_variable_index = 0;
astGeneration/symbol.cpp:        read_method -> SetBlockSymbol(block_symbol);
astGeneration/symbol.cpp:        if (! member -> ACC_STATIC() && base_type == super)
astGeneration/symbol.cpp:            // Special case - for Outer.super.i where i is an instance field,
astGeneration/symbol.cpp:            base = ast_pool -> GenSuperExpression(loc);
astGeneration/symbol.cpp:        else base = ast_pool -> GenName(loc);
astGeneration/symbol.cpp:        AstFieldAccess* field_access = ast_pool -> GenFieldAccess();
astGeneration/symbol.cpp:        field_access -> base = base;
astGeneration/symbol.cpp:        field_access -> identifier_token = loc;
astGeneration/symbol.cpp:        field_access -> symbol = member;
astGeneration/symbol.cpp:            ast_pool -> GenMethodDeclarator();
astGeneration/symbol.cpp:        method_declarator -> identifier_token = loc;
astGeneration/symbol.cpp:        method_declarator -> left_parenthesis_token = loc;
astGeneration/symbol.cpp:        method_declarator -> right_parenthesis_token = loc;
astGeneration/symbol.cpp:        if (member -> ACC_STATIC())
astGeneration/symbol.cpp:            base -> symbol = base_type;
astGeneration/symbol.cpp:            method_declarator -> AllocateFormalParameters(1);
astGeneration/symbol.cpp:                block_symbol -> InsertVariableSymbol(instance_name);
astGeneration/symbol.cpp:            instance -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:            instance -> SetType(base_type == super ? this : base_type);
astGeneration/symbol.cpp:            instance -> SetOwner(read_method);
astGeneration/symbol.cpp:            instance -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:            instance -> MarkComplete();
astGeneration/symbol.cpp:            read_method -> AddFormalParameter(instance);
astGeneration/symbol.cpp:            base -> symbol = (base_type == super
astGeneration/symbol.cpp:        read_method -> SetSignature(control);
astGeneration/symbol.cpp:            ast_pool -> GenReturnStatement();
astGeneration/symbol.cpp:        return_statement -> return_token = loc;
astGeneration/symbol.cpp:        return_statement -> expression_opt = field_access;
astGeneration/symbol.cpp:        return_statement -> semicolon_token = loc;
astGeneration/symbol.cpp:        return_statement -> is_reachable = true;
astGeneration/symbol.cpp:        AstMethodBody* block = ast_pool -> GenMethodBody();
astGeneration/symbol.cpp:        block -> left_brace_token = loc;
astGeneration/symbol.cpp:        block -> right_brace_token = loc;
astGeneration/symbol.cpp:        block -> block_symbol = new BlockSymbol(0);
astGeneration/symbol.cpp:        block -> is_reachable = true;
astGeneration/symbol.cpp:        block -> AllocateStatements(1);
astGeneration/symbol.cpp:        block -> AddStatement(return_statement);
astGeneration/symbol.cpp:            ast_pool -> GenMethodDeclaration();
astGeneration/symbol.cpp:        method_declaration -> method_symbol = read_method;
astGeneration/symbol.cpp:        method_declaration -> method_declarator = method_declarator;
astGeneration/symbol.cpp:        method_declaration -> method_body_opt = block;
astGeneration/symbol.cpp:        read_method -> declaration = method_declaration;
astGeneration/symbol.cpp:        read_method -> accessed_member = member;
astGeneration/symbol.cpp:    TypeSymbol* containing_type = member -> owner -> TypeCast();
astGeneration/symbol.cpp:    assert((member -> ACC_PRIVATE() && this == containing_type) ||
astGeneration/symbol.cpp:           (member -> ACC_PROTECTED() &&
astGeneration/symbol.cpp:            (! semantic_environment -> sem -> ProtectedAccessCheck(containing_type) ||
astGeneration/symbol.cpp:             (base_type == super && ! member -> ACC_STATIC()))));
astGeneration/symbol.cpp:        // In 1.5 and later, we use the prefix "-" instead of "access$".
astGeneration/symbol.cpp:        Semantic* sem = semantic_environment -> sem;
astGeneration/symbol.cpp:        Control& control = sem -> control;
astGeneration/symbol.cpp:        StoragePool* ast_pool = sem -> compilation_unit -> ast_pool;
astGeneration/symbol.cpp:        int length = control.access_name_symbol -> NameLength() +
astGeneration/symbol.cpp:        wcscpy(name, control.access_name_symbol -> Name());
astGeneration/symbol.cpp:        TokenIndex loc = declaration -> identifier_token;
astGeneration/symbol.cpp:        Table() -> AddMethodSymbol(write_method);
astGeneration/symbol.cpp:        write_method -> SetType(sem -> control.void_type);
astGeneration/symbol.cpp:        write_method -> SetFlags(ACCESS_STATIC | ACCESS_SYNTHETIC);
astGeneration/symbol.cpp:            write_method -> SetACC_STRICTFP();
astGeneration/symbol.cpp:            write_method -> SetACC_FINAL();
astGeneration/symbol.cpp:        write_method -> SetContainingType(this);
astGeneration/symbol.cpp:            new BlockSymbol(member -> ACC_STATIC() ? 1 : 2);
astGeneration/symbol.cpp:        block_symbol -> max_variable_index = 0;
astGeneration/symbol.cpp:        write_method -> SetBlockSymbol(block_symbol);
astGeneration/symbol.cpp:        if (! member -> ACC_STATIC() && base_type == super)
astGeneration/symbol.cpp:            // Special case - for Outer.super.i where i is an instance field,
astGeneration/symbol.cpp:            base = ast_pool -> GenSuperExpression(loc);
astGeneration/symbol.cpp:        else base = ast_pool -> GenName(loc);
astGeneration/symbol.cpp:        AstFieldAccess* left_hand_side = ast_pool -> GenFieldAccess();
astGeneration/symbol.cpp:        left_hand_side -> base = base;
astGeneration/symbol.cpp:        left_hand_side -> identifier_token = loc;
astGeneration/symbol.cpp:        left_hand_side -> symbol = member;
astGeneration/symbol.cpp:            ast_pool -> GenMethodDeclarator();
astGeneration/symbol.cpp:        method_declarator -> identifier_token = loc;
astGeneration/symbol.cpp:        method_declarator -> left_parenthesis_token = loc;
astGeneration/symbol.cpp:        method_declarator -> right_parenthesis_token = loc;
astGeneration/symbol.cpp:        if (member -> ACC_STATIC())
astGeneration/symbol.cpp:            method_declarator -> AllocateFormalParameters(1);
astGeneration/symbol.cpp:            base -> symbol = base_type;
astGeneration/symbol.cpp:            method_declarator -> AllocateFormalParameters(2);
astGeneration/symbol.cpp:                block_symbol -> InsertVariableSymbol(instance_name);
astGeneration/symbol.cpp:            instance -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:            instance -> SetType(base_type == super ? this : base_type);
astGeneration/symbol.cpp:            instance -> SetOwner(write_method);
astGeneration/symbol.cpp:            instance -> SetLocalVariableIndex(block_symbol ->
astGeneration/symbol.cpp:            instance -> MarkComplete();
astGeneration/symbol.cpp:            write_method -> AddFormalParameter(instance);
astGeneration/symbol.cpp:            base -> symbol = (base_type == super
astGeneration/symbol.cpp:            block_symbol -> InsertVariableSymbol(member -> Identity());
astGeneration/symbol.cpp:        symbol -> SetACC_SYNTHETIC();
astGeneration/symbol.cpp:        symbol -> SetType(member -> Type());
astGeneration/symbol.cpp:        symbol -> SetOwner(write_method);
astGeneration/symbol.cpp:        symbol -> SetLocalVariableIndex(block_symbol -> max_variable_index++);
astGeneration/symbol.cpp:        symbol -> MarkComplete();
astGeneration/symbol.cpp:        if (control.IsDoubleWordType(member -> Type()))
astGeneration/symbol.cpp:            block_symbol -> max_variable_index++;
astGeneration/symbol.cpp:        write_method -> AddFormalParameter(symbol);
astGeneration/symbol.cpp:        write_method -> SetSignature(control);
astGeneration/symbol.cpp:        AstName* simple_name = ast_pool -> GenName(loc);
astGeneration/symbol.cpp:        simple_name -> symbol = symbol;
astGeneration/symbol.cpp:        AstAssignmentExpression* assignment_expression = ast_pool ->
astGeneration/symbol.cpp:        assignment_expression -> left_hand_side = left_hand_side;
astGeneration/symbol.cpp:        assignment_expression -> expression = simple_name;
astGeneration/symbol.cpp:            ast_pool -> GenExpressionStatement();
astGeneration/symbol.cpp:        expression_statement -> expression = assignment_expression;
astGeneration/symbol.cpp:        expression_statement -> semicolon_token_opt = loc;
astGeneration/symbol.cpp:        expression_statement -> is_reachable = true;
astGeneration/symbol.cpp:        expression_statement -> can_complete_normally = true;
astGeneration/symbol.cpp:            ast_pool -> GenReturnStatement();
astGeneration/symbol.cpp:        return_statement -> return_token = loc;
astGeneration/symbol.cpp:        return_statement -> semicolon_token = loc;
astGeneration/symbol.cpp:        return_statement -> is_reachable = true;
astGeneration/symbol.cpp:        AstMethodBody* block = ast_pool -> GenMethodBody();
astGeneration/symbol.cpp:        block -> left_brace_token = loc;
astGeneration/symbol.cpp:        block -> right_brace_token = loc;
astGeneration/symbol.cpp:        block -> block_symbol = new BlockSymbol(0);
astGeneration/symbol.cpp:        block -> is_reachable = true;
astGeneration/symbol.cpp:        block -> AllocateStatements(2);
astGeneration/symbol.cpp:        block -> AddStatement(expression_statement);
astGeneration/symbol.cpp:        block -> AddStatement(return_statement);
astGeneration/symbol.cpp:            ast_pool -> GenMethodDeclaration();
astGeneration/symbol.cpp:        method_declaration -> method_symbol = write_method;
astGeneration/symbol.cpp:        method_declaration -> method_declarator = method_declarator;
astGeneration/symbol.cpp:        method_declaration -> method_body_opt = block;
astGeneration/symbol.cpp:        write_method -> declaration = method_declaration;
astGeneration/symbol.cpp:        write_method -> accessed_member = member;
astGeneration/symbol.cpp:    assert(read_method && read_method -> ACC_SYNTHETIC() &&
astGeneration/symbol.cpp:           read_method -> containing_type == this);
astGeneration/symbol.cpp:        DYNAMIC_CAST<VariableSymbol*> (read_method -> accessed_member);
astGeneration/symbol.cpp:        DYNAMIC_CAST<AstMethodDeclaration*> (read_method -> declaration);
astGeneration/symbol.cpp:    AstMethodBody* block = method_declaration -> method_body_opt;
astGeneration/symbol.cpp:        DYNAMIC_CAST<AstReturnStatement*> (block -> Statement(0));
astGeneration/symbol.cpp:        DYNAMIC_CAST<AstFieldAccess*> (return_statement -> expression_opt);
astGeneration/symbol.cpp:    return GetWriteAccessMethod(variable, field_access -> base -> Type());
astGeneration/symbol.cpp:        Semantic* sem = semantic_environment -> sem;
astGeneration/symbol.cpp:        sem -> state_stack.Push(semantic_environment);
astGeneration/symbol.cpp:        TokenIndex loc = declaration -> identifier_token;
astGeneration/symbol.cpp:        Control& control = sem -> control;
astGeneration/symbol.cpp:        StoragePool* ast_pool = sem -> compilation_unit -> ast_pool;
astGeneration/symbol.cpp:        AstClassBody* class_body = ast_pool -> GenClassBody();
astGeneration/symbol.cpp:        class_body -> left_brace_token = loc;
astGeneration/symbol.cpp:        class_body -> right_brace_token = loc;
astGeneration/symbol.cpp:        AstName* ast_type = ast_pool -> GenName(loc);
astGeneration/symbol.cpp:            ast_pool -> GenClassCreationExpression();
astGeneration/symbol.cpp:        class_creation -> new_token = loc;
astGeneration/symbol.cpp:        class_creation -> class_type = ast_pool -> GenTypeName(ast_type);
astGeneration/symbol.cpp:        class_creation -> arguments = ast_pool -> GenArguments(loc, loc);
astGeneration/symbol.cpp:        class_creation -> class_body_opt = class_body;
astGeneration/symbol.cpp:        sem -> GetAnonymousType(class_creation, control.Object());
astGeneration/symbol.cpp:        sem -> state_stack.Pop();
astGeneration/symbol.cpp:        placeholder_type -> SetACC_SYNTHETIC();
declarations/symbol/symbol.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        return entries ? entries -> FindEntry(name, len)
declarations/symbol/symbol.h:        return entries ? entries -> FindCaseInsensitiveEntry(name, length)
declarations/symbol/symbol.h:        DirectoryEntry* entry = entries -> InsertEntry(this, name, length);
declarations/symbol/symbol.h:        entries -> InsertCaseInsensitiveEntry(entry);
declarations/symbol/symbol.h:        return owner -> PathCast() ? (PathSymbol*) owner
declarations/symbol/symbol.h:            : ((DirectorySymbol*) owner) -> PathSym();
declarations/symbol/symbol.h:    inline bool IsZip() { return PathSym() -> IsZip(); }
declarations/symbol/symbol.h:    // This field holds the time of last data modification for a non-zip file
declarations/symbol/symbol.h:        clone -> kind = kind;
declarations/symbol/symbol.h:        clone -> directory_symbol = directory_symbol;
declarations/symbol/symbol.h:        clone -> mtime = mtime;
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        return directory_symbol -> PathSym();
declarations/symbol/symbol.h:    inline bool IsZip() { return PathSym() -> IsZip(); }
declarations/symbol/symbol.h:    inline Zip* Zipfile() { return PathSym() -> zipfile; }
declarations/symbol/symbol.h:        char* file_name = file_symbol -> FileName();
declarations/symbol/symbol.h:        unsigned length = file_symbol -> FileNameLength();
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:            DYNAMIC_CAST<AccessFlags*> (accessed_member) -> ACC_STATIC();
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        return (wchar_t*) (file_location ? file_location -> location : NULL);
declarations/symbol/symbol.h:        //  ( "this -> ProcessMethodSignature(sem, tok);" )
declarations/symbol/symbol.h:        return formal_parameters ? formal_parameters -> Length() : 0;
declarations/symbol/symbol.h:        formal_parameters -> Next() = variable;
declarations/symbol/symbol.h:        return throws ? throws -> Length() : 0;
declarations/symbol/symbol.h:        throws -> Next() = exception;
declarations/symbol/symbol.h:        return throws_signatures ? throws_signatures -> Length() : 0;
declarations/symbol/symbol.h:        throws_signatures -> Next() = signature;
declarations/symbol/symbol.h:        return external_name_symbol ? external_name_symbol -> Name()
declarations/symbol/symbol.h:            : name_symbol -> Name();
declarations/symbol/symbol.h:        return external_name_symbol ? external_name_symbol -> NameLength()
declarations/symbol/symbol.h:            : name_symbol -> NameLength();
declarations/symbol/symbol.h:            ? external_name_symbol -> Utf8_literal -> value
declarations/symbol/symbol.h:            : name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return external_name_symbol && external_name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? external_name_symbol -> Utf8_literal -> length
declarations/symbol/symbol.h:            : name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:    const char* SignatureString() const { return signature -> value; }
declarations/symbol/symbol.h:    // forms an inter-type cycle in its "extends" or "implements" relationship.
declarations/symbol/symbol.h:    // forms an intra-type cycle in its "extends" or "implements" relationship;
declarations/symbol/symbol.h:            ? local_constructor_call_environments -> Length() : 0;
declarations/symbol/symbol.h:        local_constructor_call_environments -> Next() = environment;
declarations/symbol/symbol.h:            ? private_access_methods -> Length() : 0;
declarations/symbol/symbol.h:        private_access_methods -> Next() = method_symbol;
declarations/symbol/symbol.h:            ? private_access_constructors -> Length() : 0;
declarations/symbol/symbol.h:        private_access_constructors -> Next() = constructor_symbol;
declarations/symbol/symbol.h:            ? constructor_parameters -> Length() : 0;
declarations/symbol/symbol.h:        constructor_parameters -> Next() = variable_symbol;
declarations/symbol/symbol.h:        return class_literals ? class_literals -> Length() : 0;
declarations/symbol/symbol.h:        class_literals -> Next() = literal_symbol;
declarations/symbol/symbol.h:        return nested_types ? nested_types -> Length() : 0;
declarations/symbol/symbol.h:        nested_types -> Next() = type_symbol;
declarations/symbol/symbol.h:        return interfaces ? interfaces -> Length() : 0;
declarations/symbol/symbol.h:        interfaces -> Next() = type_symbol;
declarations/symbol/symbol.h:        return anonymous_types ? anonymous_types -> Length() : 0;
declarations/symbol/symbol.h:        anonymous_types -> Next() = type_symbol;
declarations/symbol/symbol.h:        if (! outermost_type -> placeholder_type)
declarations/symbol/symbol.h:            outermost_type -> placeholder_type = type_symbol;
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        return external_name_symbol ? external_name_symbol -> Name()
declarations/symbol/symbol.h:            : name_symbol -> Name();
declarations/symbol/symbol.h:        return external_name_symbol ? external_name_symbol -> NameLength()
declarations/symbol/symbol.h:            : name_symbol -> NameLength();
declarations/symbol/symbol.h:            ? external_name_symbol -> Utf8_literal -> value
declarations/symbol/symbol.h:            : name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return external_name_symbol && external_name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? external_name_symbol -> Utf8_literal -> length
declarations/symbol/symbol.h:            : name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        Symbol* sym = type -> owner;
declarations/symbol/symbol.h:        while (! sym -> PackageCast())
declarations/symbol/symbol.h:            MethodSymbol* method = sym -> MethodCast();
declarations/symbol/symbol.h:            sym = (method ? method -> containing_type
declarations/symbol/symbol.h:                   : ((TypeSymbol*) sym) -> owner);
declarations/symbol/symbol.h:            TypeSymbol* type = owner -> TypeCast();
declarations/symbol/symbol.h:            MethodSymbol* method = owner -> MethodCast();
declarations/symbol/symbol.h:                return method -> containing_type;
declarations/symbol/symbol.h:            TypeSymbol* type = owner -> TypeCast();
declarations/symbol/symbol.h:            MethodSymbol* method = owner -> MethodCast();
declarations/symbol/symbol.h:                return method -> containing_type;
declarations/symbol/symbol.h:    // For JSR 201, control.int_class -> BoxedType() returns control.Integer(),
declarations/symbol/symbol.h:        for (const TypeSymbol* type = this; type; type = type -> super)
declarations/symbol/symbol.h:            if (Interface(i) -> IsSubinterface(super_interface))
declarations/symbol/symbol.h:            if (Interface(i) -> IsSubinterface(inter))
declarations/symbol/symbol.h:        return super && super -> Implements(inter);
declarations/symbol/symbol.h:            return (type -> ACC_INTERFACE() && IsSubinterface(type)) ||
declarations/symbol/symbol.h:                type -> base_type ? type -> base_type : type;
declarations/symbol/symbol.h:            return (num_dimensions > type -> num_dimensions &&
declarations/symbol/symbol.h:                    ((base -> ACC_INTERFACE() && Implements(base)) ||
declarations/symbol/symbol.h:                (num_dimensions == type -> num_dimensions &&
declarations/symbol/symbol.h:                 base_type -> IsSubtype(base));
declarations/symbol/symbol.h:        return type -> ACC_INTERFACE() ? Implements(type) : IsSubclass(type);
declarations/symbol/symbol.h:        return file_location ? file_location -> location : (wchar_t*) NULL;
declarations/symbol/symbol.h:    // type as this (ie. Object[] -> GetArrayType(...,2) returns Object[][]).
declarations/symbol/symbol.h:        return base_type -> Array(num_dimensions - 1);
declarations/symbol/symbol.h:    const char* SignatureString() const { return signature -> value; }
declarations/symbol/symbol.h:        return outermost_type -> owner -> PackageCast();
declarations/symbol/symbol.h:    // Returns the fully-qualified '/' separated package name.
declarations/symbol/symbol.h:        return outermost_type -> owner -> PackageCast() -> PackageName();
declarations/symbol/symbol.h:             ! sym -> PackageCast(); sym = ((TypeSymbol*) sym) -> owner)
declarations/symbol/symbol.h:            if (sym -> MethodCast())
declarations/symbol/symbol.h:            ? nested_type_signatures -> Length() : 0;
declarations/symbol/symbol.h:        nested_type_signatures -> Next() = signature;
declarations/symbol/symbol.h:        return array ? array -> Length() : 0;
declarations/symbol/symbol.h:        array -> Next() = type_symbol;
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        return (wchar_t*) (file_location ? file_location -> location : NULL);
declarations/symbol/symbol.h:        return external_name_symbol ? external_name_symbol -> Name()
declarations/symbol/symbol.h:            : name_symbol -> Name();
declarations/symbol/symbol.h:        return external_name_symbol ? external_name_symbol -> NameLength()
declarations/symbol/symbol.h:            : name_symbol -> NameLength();
declarations/symbol/symbol.h:            ? external_name_symbol -> Utf8_literal -> value
declarations/symbol/symbol.h:            : name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return external_name_symbol && external_name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? external_name_symbol -> Utf8_literal -> length
declarations/symbol/symbol.h:            : name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        , local_variable_index(-1)
declarations/symbol/symbol.h:        assert(owner -> TypeCast() || owner -> MethodCast());
declarations/symbol/symbol.h:        MethodSymbol* method_owner = owner -> MethodCast();
declarations/symbol/symbol.h:        return method_owner ? method_owner -> containing_type
declarations/symbol/symbol.h:            : owner -> TypeCast();
declarations/symbol/symbol.h:        MethodSymbol* method_owner = owner -> MethodCast();
declarations/symbol/symbol.h:        return method_owner ? method_owner -> containing_type
declarations/symbol/symbol.h:            : owner -> TypeCast();
declarations/symbol/symbol.h:        signature = type_ -> signature;
declarations/symbol/symbol.h:        // ( "this -> ProcessVariableSignature(sem, tok);" )
declarations/symbol/symbol.h:    bool IsLocal() { return owner -> MethodCast() != NULL; }
declarations/symbol/symbol.h:    virtual const wchar_t* Name() const { return name_symbol -> Name(); }
declarations/symbol/symbol.h:    virtual unsigned NameLength() const { return name_symbol -> NameLength(); }
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> value : (char*) NULL;
declarations/symbol/symbol.h:        return name_symbol -> Utf8_literal
declarations/symbol/symbol.h:            ? name_symbol -> Utf8_literal -> length : 0;
declarations/symbol/symbol.h:        return anonymous_symbol_pool ? anonymous_symbol_pool -> Length() : 0;
declarations/symbol/symbol.h:        anonymous_symbol_pool -> Next() = symbol;
declarations/symbol/symbol.h:        return type_symbol_pool ? type_symbol_pool -> Length() : 0;
declarations/symbol/symbol.h:        symbol -> pool_index = NumTypeSymbols();
declarations/symbol/symbol.h:        type_symbol_pool -> Next() = symbol;
declarations/symbol/symbol.h:        return method_symbol_pool ? method_symbol_pool -> Length() : 0;
declarations/symbol/symbol.h:        symbol -> pool_index = NumMethodSymbols();
declarations/symbol/symbol.h:        method_symbol_pool -> Next() = symbol;
declarations/symbol/symbol.h:        return variable_symbol_pool ? variable_symbol_pool -> Length() : 0;
declarations/symbol/symbol.h:        symbol -> pool_index = NumVariableSymbols();
declarations/symbol/symbol.h:        variable_symbol_pool -> Next() = symbol;
declarations/symbol/symbol.h:        return other_symbol_pool ? other_symbol_pool -> Length() : 0;
declarations/symbol/symbol.h:        other_symbol_pool -> Next() = symbol;
declarations/symbol/symbol.h:            anonymous_symbol_pool -> Array();
declarations/symbol/symbol.h:            method_symbol_pool -> Array();
declarations/symbol/symbol.h:            variable_symbol_pool -> Array();
declarations/symbol/symbol.h:            other_symbol_pool -> Array();
declarations/symbol/symbol.h:        unsigned k = symbol -> Identity() -> index % hash_size;
declarations/symbol/symbol.h:        symbol -> next = base[k];
declarations/symbol/symbol.h:    return table ? table -> NumVariableSymbols() : 0;
declarations/symbol/symbol.h:    return table -> VariableSym(i);
declarations/symbol/symbol.h:    return table ? table -> NumVariableSymbols() : 0;
declarations/symbol/symbol.h:    return table -> VariableSym(i);
declarations/symbol/symbol.h:    return table ? table -> NumMethodSymbols() : 0;
declarations/symbol/symbol.h:    return table -> MethodSym(i);
declarations/symbol/symbol.h:    return table ? table -> NumTypeSymbols() : 0;
declarations/symbol/symbol.h:    return table -> TypeSym(i);
declarations/symbol/symbol.h:        table -> CompressSpace();
declarations/symbol/symbol.h:        table -> CompressSpace();
declarations/symbol/symbol.h:    directory_symbol -> owner = symbol;
declarations/symbol/symbol.h:    symbol -> root_directory = directory_symbol;
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> PathCast())
declarations/symbol/symbol.h:        Table() -> InsertDirectorySymbol(name_symbol, this,
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> DirectoryCast())
declarations/symbol/symbol.h:    return table ? table -> FindDirectorySymbol(name_symbol)
declarations/symbol/symbol.h:    return Table() -> InsertFileSymbol(name_symbol);
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> FileCast())
declarations/symbol/symbol.h:    return table ? table -> FindFileSymbol(name_symbol)
declarations/symbol/symbol.h:    return Table() -> InsertPackageSymbol(name_symbol, this);
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> PackageCast())
declarations/symbol/symbol.h:  return table ? table -> FindPackageSymbol(name_symbol)
declarations/symbol/symbol.h:    return Table() -> InsertAnonymousTypeSymbol(name_symbol);
declarations/symbol/symbol.h:    return Table() -> InsertTypeSymbol(name_symbol);
declarations/symbol/symbol.h:    return Table() -> InsertTypeSymbol(name_symbol);
declarations/symbol/symbol.h:    return Table() -> InsertTypeSymbol(name_symbol);
declarations/symbol/symbol.h:    unsigned k = type -> name_symbol -> index % hash_size;
declarations/symbol/symbol.h:        base[k] = type -> next;
declarations/symbol/symbol.h:        for (Symbol* symbol = previous -> next;
declarations/symbol/symbol.h:             symbol != type; previous = symbol, symbol = symbol -> next)
declarations/symbol/symbol.h:        previous -> next = type -> next;
declarations/symbol/symbol.h:    unsigned last_index = NumTypeSymbols() - 1;
declarations/symbol/symbol.h:    if (type -> pool_index != last_index)
declarations/symbol/symbol.h:        TypeSym(last_index) -> pool_index = type -> pool_index;
declarations/symbol/symbol.h:        TypeSym(type -> pool_index) = TypeSym(last_index);
declarations/symbol/symbol.h:    type_symbol_pool -> Reset(last_index); // remove last slot in symbol_pool
declarations/symbol/symbol.h:        table -> DeleteTypeSymbol(type);
declarations/symbol/symbol.h:        symbol -> UnlinkFromParents();
declarations/symbol/symbol.h:        table -> DeleteAnonymousTypes();
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> TypeCast())
declarations/symbol/symbol.h:    return table ? table -> FindTypeSymbol(name_symbol)
declarations/symbol/symbol.h:    return table ? table -> FindTypeSymbol(name_symbol)
declarations/symbol/symbol.h:    const NameSymbol* name_symbol = symbol -> Identity();
declarations/symbol/symbol.h:    for (candidate = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         candidate; candidate = candidate -> next)
declarations/symbol/symbol.h:        if (name_symbol == candidate -> Identity() &&
declarations/symbol/symbol.h:            candidate -> MethodCast())
declarations/symbol/symbol.h:        symbol -> next = symbol; // mark method as overloaded
declarations/symbol/symbol.h:        symbol -> next_method = base_method -> next_method;
declarations/symbol/symbol.h:        base_method -> next_method = symbol;
declarations/symbol/symbol.h:    return Table() -> InsertMethodSymbol(new MethodSymbol(name_symbol));
declarations/symbol/symbol.h:    Table() -> InsertMethodSymbol(method_symbol);
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> MethodCast())
declarations/symbol/symbol.h:    return table ? table -> FindMethodSymbol(name_symbol)
declarations/symbol/symbol.h:    return table ? table -> FindOverloadMethod(base_method, method_declarator)
declarations/symbol/symbol.h:    return Table() -> InsertVariableSymbol(name_symbol);
declarations/symbol/symbol.h:    return Table() -> InsertVariableSymbol(name_symbol);
declarations/symbol/symbol.h:    Table() -> InsertVariableSymbol(variable_symbol);
declarations/symbol/symbol.h:    Table() -> InsertVariableSymbol(variable_symbol);
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> VariableCast())
declarations/symbol/symbol.h:    return table ? table -> FindVariableSymbol(name_symbol)
declarations/symbol/symbol.h:    return table ? table -> FindVariableSymbol(name_symbol)
declarations/symbol/symbol.h:    for (Symbol* symbol = base[name_symbol -> index % hash_size];
declarations/symbol/symbol.h:         symbol; symbol = symbol -> next)
declarations/symbol/symbol.h:        if (name_symbol == symbol -> Identity() && symbol -> LabelCast())
declarations/symbol/symbol.h:    return Table() -> InsertBlockSymbol(hash_size);
Binary file symbol.o matches
orchestration/system.cpp:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $
orchestration/system.cpp:// non-ASCII systems (where 'a' != U_a), it is slightly inefficient. Hence it
orchestration/system.cpp:        case '-': wname[i] = U_MI; break;
orchestration/system.cpp:    if (! name_symbol -> Utf8_literal)
orchestration/system.cpp:        name_symbol -> Utf8_literal =
orchestration/system.cpp:            ConvertUnicodeToUtf8(name_symbol -> Name());
orchestration/system.cpp:    return ptr - target;
orchestration/system.cpp:    if (package -> directory.Length() == 0)
orchestration/system.cpp:        PackageSymbol* owner_package = package -> owner;
orchestration/system.cpp:            for (unsigned i = 0; i < owner_package -> directory.Length(); i++)
orchestration/system.cpp:                    owner_package -> directory[i];
orchestration/system.cpp:                    owner_directory_symbol -> FindDirectorySymbol(package -> Identity());
orchestration/system.cpp:                if (! owner_directory_symbol -> IsZip())
orchestration/system.cpp:                            owner_directory_symbol -> DirectoryNameLength() +
orchestration/system.cpp:                            package -> Utf8NameLength() + 1; // +1 for '/'
orchestration/system.cpp:                               owner_directory_symbol -> DirectoryName());
orchestration/system.cpp:                        if (owner_directory_symbol -> DirectoryName()[owner_directory_symbol -> DirectoryNameLength() - 1] != U_SLASH)
orchestration/system.cpp:                        strcat(directory_name, package -> Utf8Name());
orchestration/system.cpp:                            subdirectory_symbol = owner_directory_symbol ->
orchestration/system.cpp:                                InsertDirectorySymbol(package -> Identity(),
orchestration/system.cpp:                                                      owner_directory_symbol -> IsSourceDirectory());
orchestration/system.cpp:                        subdirectory_symbol -> ReadDirectory();
orchestration/system.cpp:                    package -> directory.Next() = subdirectory_symbol;
orchestration/system.cpp:                    path_symbol -> RootDirectory() -> FindDirectorySymbol(package -> Identity());
orchestration/system.cpp:                if (! path_symbol -> IsZip())
orchestration/system.cpp:                        int length = path_symbol -> Utf8NameLength() +
orchestration/system.cpp:                            package -> Utf8NameLength() + 1; // +1 for '/'
orchestration/system.cpp:                        strcpy(directory_name, path_symbol -> Utf8Name());
orchestration/system.cpp:                        char tail = path_symbol -> Utf8Name()[path_symbol -> Utf8NameLength() - 1];
orchestration/system.cpp:                        strcat(directory_name, package -> Utf8Name());
orchestration/system.cpp:                            directory_symbol = path_symbol -> RootDirectory() ->
orchestration/system.cpp:                                InsertDirectorySymbol(package -> Identity(),
orchestration/system.cpp:                                                      path_symbol -> RootDirectory() -> IsSourceDirectory());
orchestration/system.cpp:                        directory_symbol -> ReadDirectory();
orchestration/system.cpp:                    package -> directory.Next() = directory_symbol;
orchestration/system.cpp:    // VM names to include non-Java identifiers.
orchestration/system.cpp:                               ? "access$" : "-");
orchestration/system.cpp:    package_info_name_symbol = FindOrInsertSystemName("package-info");
orchestration/system.cpp:                               ? "val$" : "-");
orchestration/system.cpp:    no_type = unnamed_package -> InsertSystemTypeSymbol(question_name_symbol);
orchestration/system.cpp:    no_type -> SetSignature(dot_name_symbol -> Utf8_literal);
orchestration/system.cpp:    no_type -> outermost_type = no_type;
orchestration/system.cpp:    no_type -> SetOwner(unnamed_package);
orchestration/system.cpp:    no_type -> subtypes = new SymbolSet();
orchestration/system.cpp:    no_type -> MarkBad();
orchestration/system.cpp:    null_type = unnamed_package -> InsertSystemTypeSymbol(null_name_symbol);
orchestration/system.cpp:    null_type -> outermost_type = null_type;
orchestration/system.cpp:    null_type -> SetOwner(unnamed_package);
orchestration/system.cpp:    null_type -> SetACC_PUBLIC();
orchestration/system.cpp:    default_directory -> ReadDirectory();
orchestration/system.cpp:    if (SystemStat(dot_name_symbol -> Utf8Name(), &status) == 0 &&
orchestration/system.cpp:        system_table -> InsertDirectorySymbol(status.st_dev, status.st_ino,
orchestration/system.cpp:    default_directory -> ReadDirectory();
orchestration/system.cpp:        unnamed_package -> directory.Next() = classpath[0] -> RootDirectory();
orchestration/system.cpp:            int input_name_length = path - head;
orchestration/system.cpp:                        unnamed_package -> directory.Next() =
orchestration/system.cpp:                            classpath[0] -> RootDirectory();
orchestration/system.cpp:                    unnamed_package -> directory.Next() = dot_directory;
orchestration/system.cpp:                    if (! zipinfo -> IsValid())
orchestration/system.cpp:                            wchar_t* tail = &name[input_name_length - 3];
orchestration/system.cpp:                    unnamed_package -> directory.Next() =
orchestration/system.cpp:                        zipinfo -> RootDirectory();
orchestration/system.cpp:                                                         zipinfo -> RootDirectory());
orchestration/system.cpp:                    path_symbol -> zipfile = zipinfo;
orchestration/system.cpp:            int input_name_length = path - head;
orchestration/system.cpp:                            int entry_length = strlen(entry -> d_name);
orchestration/system.cpp:                            char* ending = &(entry->d_name[entry_length-3]);
orchestration/system.cpp:                            // skip ., .., non-zip, and non-jar
orchestration/system.cpp:                            if (! strcmp(entry -> d_name, ".") ||
orchestration/system.cpp:                                ! strcmp(entry -> d_name, "..") ||
orchestration/system.cpp:                            if (head[input_name_length - 1] != U_SLASH)
orchestration/system.cpp:                            strcat(extdir_entry, entry -> d_name);
orchestration/system.cpp:                            if (! zipinfo -> IsValid())
orchestration/system.cpp:                            unnamed_package->directory.Next() =
orchestration/system.cpp:                                zipinfo -> RootDirectory();
orchestration/system.cpp:                                                                 zipinfo -> RootDirectory());
orchestration/system.cpp:                            path_symbol -> zipfile = zipinfo;
orchestration/system.cpp:                    if (directory_name[input_name_length - 1] != U_SLASH)
orchestration/system.cpp:                            char* ending = &(entry.cFileName[entry_length-3]);
orchestration/system.cpp:                            if (head[input_name_length - 1] != U_SLASH)
orchestration/system.cpp:                            if (! zipinfo -> IsValid())
orchestration/system.cpp:                            unnamed_package -> directory.Next() =
orchestration/system.cpp:                                zipinfo -> RootDirectory();
orchestration/system.cpp:                                                                 zipinfo -> RootDirectory());
orchestration/system.cpp:                            path_symbol -> zipfile = zipinfo;
orchestration/system.cpp:            int input_name_length = path - head;
orchestration/system.cpp:                        unnamed_package -> directory.Next() =
orchestration/system.cpp:                            classpath[0] -> RootDirectory();
orchestration/system.cpp:                    unnamed_package -> directory.Next() = dot_directory;
orchestration/system.cpp:                    if (! zipinfo -> IsValid())
orchestration/system.cpp:                            wchar_t* tail = &name[input_name_length - 3];
orchestration/system.cpp:                    unnamed_package -> directory.Next() =
orchestration/system.cpp:                        zipinfo -> RootDirectory();
orchestration/system.cpp:                                                         zipinfo -> RootDirectory());
orchestration/system.cpp:                    path_symbol -> zipfile = zipinfo;
orchestration/system.cpp:            int input_name_length = path - head;
orchestration/system.cpp:                        unnamed_package -> directory.Next() =
orchestration/system.cpp:                            classpath[0] -> RootDirectory();
orchestration/system.cpp:                    unnamed_package -> directory.Next() = dot_directory;
orchestration/system.cpp:    TypeSymbol* type = unnamed_package -> InsertSystemTypeSymbol(name_symbol);
orchestration/system.cpp:    type -> SetSignature(Utf8_pool.FindOrInsert(sig, 1));
orchestration/system.cpp:    type -> outermost_type = type;
orchestration/system.cpp:    type -> SetOwner(unnamed_package);
orchestration/system.cpp:    type -> SetACC_PUBLIC();
orchestration/system.cpp:    type -> MarkPrimitive();
orchestration/system.cpp:    TypeSymbol* type = package -> FindTypeSymbol(name_symbol);
orchestration/system.cpp:        type = system_semantic -> ReadType(file_symbol, package,
orchestration/system.cpp:    else if (type -> SourcePending())
orchestration/system.cpp:        ProcessHeaders(type -> file_symbol);
orchestration/system.cpp:    if (! type -> Bad())
orchestration/system.cpp:        for (method = type -> FindMethodSymbol(name_symbol);
orchestration/system.cpp:             method; method = method -> next_method)
orchestration/system.cpp:            if (! strcmp(descriptor, method -> SignatureString()))
orchestration/system.cpp:        if (! type -> Bad())
orchestration/system.cpp:            system_semantic ->
orchestration/system.cpp:                               BAD_TOKEN, type -> ContainingPackageName(),
orchestration/system.cpp:                               type -> ExternalName());
orchestration/system.cpp:        method = type -> InsertMethodSymbol(name_symbol);
orchestration/system.cpp:        method -> SetType(no_type);
orchestration/system.cpp:        method -> SetContainingType(type);
orchestration/system.cpp:        method -> SetSignature(FindOrInsertSystemName(descriptor) ->
orchestration/system.cpp:    if (! type -> Bad())
orchestration/system.cpp:        field = type -> FindVariableSymbol(name_symbol);
orchestration/system.cpp:        if (! field -> IsTyped())
orchestration/system.cpp:            field -> ProcessVariableSignature(system_semantic, BAD_TOKEN);
orchestration/system.cpp:        field -> MarkInitialized();
orchestration/system.cpp:        if (! type -> Bad())
orchestration/system.cpp:            system_semantic ->
orchestration/system.cpp:                               BAD_TOKEN, type -> ContainingPackageName(),
orchestration/system.cpp:                               type -> ExternalName());
orchestration/system.cpp:        field = type -> InsertVariableSymbol(name_symbol);
orchestration/system.cpp:        field -> SetType(no_type);
orchestration/system.cpp:        field -> SetOwner(type);
orchestration/system.cpp:        field -> MarkInitialized();
orchestration/system.cpp:            FindOrInsertSystemName(descriptor) -> Utf8_literal;
orchestration/system.cpp:        field -> SetSignatureString(utf8 -> value, utf8 -> length);
orchestration/system.cpp:    if (file_symbol -> semantic == NULL ||
orchestration/system.cpp:        (file_symbol -> semantic -> control).option.directory == NULL) {
orchestration/system.cpp:        directory_symbol = file_symbol -> directory_symbol;
orchestration/system.cpp:        Control& control = file_symbol -> semantic -> control;
orchestration/system.cpp:            file_symbol -> package -> PackageNameLength() * 3;
orchestration/system.cpp:        if (file_symbol -> package != control.unnamed_package)
orchestration/system.cpp:            if (directory_prefix[directory_prefix_length - 1] != U_SLASH)
orchestration/system.cpp:            ConvertUnicodeToUtf8(file_symbol -> package -> PackageName(),
orchestration/system.cpp:    int length = name_symbol -> Utf8NameLength() +
orchestration/system.cpp:    strcpy(full_filename, name_symbol -> Utf8Name());
orchestration/system.cpp:    for (unsigned k = 0; k < package -> directory.Length(); k++)
orchestration/system.cpp:        directory_symbol = package -> directory[k];
orchestration/system.cpp:        if ((entry = directory_symbol -> FindEntry(full_filename, length)))
orchestration/system.cpp:        PathSymbol* path_symbol = directory_symbol -> PathSym();
orchestration/system.cpp:        file_symbol = directory_symbol -> FindFileSymbol(name_symbol);
orchestration/system.cpp:        if (! ((file_symbol && file_symbol -> IsJava()) ||
orchestration/system.cpp:               path_symbol -> IsZip()))
orchestration/system.cpp:            file_symbol = directory_symbol -> InsertFileSymbol(name_symbol);
orchestration/system.cpp:            file_symbol -> directory_symbol = directory_symbol;
orchestration/system.cpp:            file_symbol -> SetJava();
orchestration/system.cpp:            file_symbol -> mtime = entry -> Mtime();
orchestration/system.cpp:    int class_length = name_symbol -> Utf8NameLength() +
orchestration/system.cpp:    int java_length = name_symbol -> Utf8NameLength() +
orchestration/system.cpp:    strcpy(class_name, name_symbol -> Utf8Name());
orchestration/system.cpp:    strcpy(java_name, name_symbol -> Utf8Name());
orchestration/system.cpp:    for (unsigned k = 0; k < package -> directory.Length(); k++)
orchestration/system.cpp:        DirectorySymbol* directory_symbol = package -> directory[k];
orchestration/system.cpp:            directory_symbol -> FindFileSymbol(name_symbol);
orchestration/system.cpp:            PathSymbol* path_symbol = directory_symbol -> PathSym();
orchestration/system.cpp:            if (! path_symbol -> IsZip())
orchestration/system.cpp:                    directory_symbol -> FindEntry(java_name, java_length),
orchestration/system.cpp:                                 (! directory_symbol -> IsSourceDirectory()))
orchestration/system.cpp:                                ? directory_symbol -> FindEntry(class_name,
orchestration/system.cpp:                        directory_symbol -> InsertFileSymbol(name_symbol);
orchestration/system.cpp:                    file_symbol -> directory_symbol = directory_symbol;
orchestration/system.cpp:                         class_entry -> Mtime() < java_entry -> Mtime()))
orchestration/system.cpp:                        file_symbol -> SetJava();
orchestration/system.cpp:                        file_symbol -> mtime = java_entry -> Mtime();
orchestration/system.cpp:                            file_symbol -> SetClass();
orchestration/system.cpp:                        else file_symbol -> SetClassOnly();
orchestration/system.cpp:                        file_symbol -> mtime = class_entry -> Mtime();
orchestration/system.cpp:            if (file_symbol -> IsJava() && ! java_file_symbol)
orchestration/system.cpp:         class_file_symbol -> mtime < java_file_symbol -> mtime))
orchestration/system.cpp:    int class_length = name_symbol -> Utf8NameLength() +
orchestration/system.cpp:    int java_length = name_symbol -> Utf8NameLength() +
orchestration/system.cpp:    strcpy(class_name, name_symbol -> Utf8Name());
orchestration/system.cpp:    strcpy(java_name, name_symbol -> Utf8Name());
orchestration/system.cpp:    for (unsigned k = 0; k < package -> directory.Length(); k++)
orchestration/system.cpp:        DirectorySymbol* directory_symbol = package -> directory[k];
orchestration/system.cpp:        file_symbol = directory_symbol -> FindFileSymbol(name_symbol);
orchestration/system.cpp:        PathSymbol* path_symbol = directory_symbol -> PathSym();
orchestration/system.cpp:        if (! path_symbol -> IsZip())
orchestration/system.cpp:                directory_symbol -> FindEntry(java_name, java_length);
orchestration/system.cpp:                                           ? directory_symbol -> FindEntry(class_name,
orchestration/system.cpp:                    directory_symbol -> InsertFileSymbol(name_symbol);
orchestration/system.cpp:                file_symbol -> directory_symbol = directory_symbol;
orchestration/system.cpp:                     class_entry -> Mtime() < java_entry -> Mtime()))
orchestration/system.cpp:                    file_symbol -> SetJava();
orchestration/system.cpp:                    file_symbol -> mtime = java_entry -> Mtime();
orchestration/system.cpp:                         file_symbol -> SetClass();
orchestration/system.cpp:                    else file_symbol -> SetClassOnly();
orchestration/system.cpp:                    file_symbol -> mtime = class_entry -> Mtime();
Binary file system.o matches
orchestration/tab.cpp:// and any non-printable ASCII characters in unicode expansion mode.
orchestration/tab.cpp:    for (int i = start--; i <= end; i++)
orchestration/tab.cpp:            int offset = (i - start) - 1;
orchestration/tab.cpp:            start -= ((tab_size - 1) - offset % tab_size);
orchestration/tab.cpp:            start -= 5;
orchestration/tab.cpp:    return (end - start);
tab.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
Binary file tab.o matches
declarations/table.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/table.h:        return conflict ? conflict -> Length() : 0;
declarations/table.h:            conflict -> Next() = conflict_symbol;
declarations/table.h:            conflict -> Array();
declarations/table.h:        for (unsigned k = 0; k < conflict -> Length(); k++)
declarations/table.h:        return conflict ? conflict -> Length() : 0;
declarations/table.h:            conflict -> Next() = conflict_symbol;
declarations/table.h:            conflict -> Array();
declarations/table.h:        for (unsigned k = 0; k < conflict -> Length(); k++)
declarations/table.h:        return conflict ? conflict -> Length() : 0;
declarations/table.h:            conflict -> Next() = conflict_symbol;
declarations/table.h:            conflict -> Array();
declarations/table.h:        for (unsigned k = 0; k < conflict -> Length(); k++)
declarations/table.h:            array[i] -> CompressSpace();
declarations/table.h:                array[i] -> type_symbol -> name_symbol -> index % hash_size;
declarations/table.h:            array[i] -> next = base[k];
declarations/table.h:        unsigned i = type_symbol -> name_symbol -> index % hash_size;
declarations/table.h:        p -> next = base[i];
declarations/table.h:        for (p = base[name_symbol -> index % hash_size]; p; p = p -> next)
declarations/table.h:             if (p -> type_symbol -> name_symbol == name_symbol)
declarations/table.h:            array[i] -> CompressSpace();
declarations/table.h:            unsigned k = array[i] -> variable_symbol -> name_symbol -> index %
declarations/table.h:            array[i] -> next = base[k];
declarations/table.h:        unsigned i = variable_symbol -> name_symbol -> index % hash_size;
declarations/table.h:        p -> next = base[i];
declarations/table.h:        for (p = base[name_symbol -> index % hash_size]; p; p = p -> next)
declarations/table.h:            if (p -> variable_symbol -> name_symbol == name_symbol)
declarations/table.h:            array[i] -> CompressSpace();
declarations/table.h:                array[i] -> method_symbol -> name_symbol;
declarations/table.h:                unsigned k = name_symbol -> index % hash_size;
declarations/table.h:                array[i] -> next = base[k];
declarations/table.h:                array[i] -> next_method = NULL;
declarations/table.h:                array[i] -> next_method = base_shadow -> next_method;
declarations/table.h:                base_shadow -> next_method = array[i];
declarations/table.h:        for (p = base[name_symbol -> index % hash_size]; p; p = p -> next)
declarations/table.h:            if (p -> method_symbol -> name_symbol == name_symbol)
declarations/table.h:        unsigned i = method_symbol -> name_symbol -> index % hash_size;
declarations/table.h:        p -> next_method = NULL;
declarations/table.h:        p -> next = base[i];
declarations/table.h:        shadow -> next_method = base_shadow -> next_method;
declarations/table.h:        base_shadow -> next_method = shadow;
declarations/table.h:            FindMethodShadowSymbol(overload_method -> name_symbol);
declarations/table.h:        return base_shadow -> next_method;
declarations/table.h:        if (! overload_method -> IsTyped())
declarations/table.h:            overload_method -> ProcessMethodSignature(sem, tok);
declarations/table.h:        for (method_shadow = FindMethodShadowSymbol(overload_method ->
declarations/table.h:             method_shadow = method_shadow -> next_method)
declarations/table.h:            MethodSymbol* method = method_shadow -> method_symbol;
declarations/table.h:            if (! method -> IsTyped())
declarations/table.h:                method -> ProcessMethodSignature(sem, tok);
declarations/table.h:            if (overload_method -> NumFormalParameters() ==
declarations/table.h:                method -> NumFormalParameters())
declarations/table.h:                for (i = method -> NumFormalParameters() - 1; i >= 0; i--)
declarations/table.h:                    if (method -> FormalParameter(i) -> Type() !=
declarations/table.h:                        overload_method -> FormalParameter(i) -> Type())
declarations/tuple.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
declarations/tuple.h:                   (base_size - old_base_size) * sizeof(T*));
declarations/tuple.h:        base[k] = (new T[Blksize()]) - size;
declarations/tuple.h:    // I.e., that the array will be indexable in the range (0..n-1).
declarations/tuple.h:            // will contain the (n-1)th element.
declarations/tuple.h:            int slot = (n == 0 ? -1 : (n - 1) >> log_blksize);
declarations/tuple.h:            for (int k = (size >> log_blksize) - 1; k > slot; k--)
declarations/tuple.h:                size -= Blksize();
declarations/tuple.h:        // See the comments above. We purposefully pre-adjusted the pointers
declarations/tuple.h:        // base[i >> log_blocksize][i & ~(-1 << log_blocksize)].
declarations/tuple.h:    inline void Push(const T& elt) { this -> Next() = elt; }
declarations/tuple.h:        // Not "return (*this)[--top]" because that may violate an invariant
declarations/tuple.h:        top--;
declarations/tuple.h:        return (*this)[top - 1];
declarations/tuple.h:        return (*this)[top - 1];
declarations/tuple.h:                base_increment = 1U << (log_blksize - 4);
declarations/tuple.h:                base_increment = 1U << (log_blksize - 8);
declarations/tuple.h:            (const_cast<ConvertibleArray<T>*> (this)) -> Compact();
declarations/tuple.h:            ((ConvertibleArray<T>*) this) -> Compact();
declarations/tuple.h:        // problems with 0-length arrays.
declarations/tuple.h:        // the last non-empty slot!
declarations/tuple.h:        unsigned n = (Tuple<T>::top - 1) >> Tuple<T>::log_blksize;
declarations/tuple.h:               (Tuple<T>::top - processed_size) * sizeof(T));
declarations/tuple.h:        while (--n >= 0)
declarations/tuple.h:            JikesAPI::getInstance() -> write(file_name, buffer.top);
declarations/tuple.h:        // the last non-empty slot!
declarations/tuple.h:        unsigned n = (buffer.top - 1) >> buffer.log_blksize;
declarations/tuple.h:            file -> write(buffer.base[i] + size, buffer.Blksize());
declarations/tuple.h:        file -> write(buffer.base[n] + size, buffer.top - size);
astGeneration/unparse.cpp:// Special top-level form
astGeneration/unparse.cpp:    char* in_file_name = lex_stream -> FileName();
astGeneration/unparse.cpp:        os << lex_stream -> NameString(label_opt) << ": ";
astGeneration/unparse.cpp:        Statement(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        base_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(identifier_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(primitive_kind_token);
astGeneration/unparse.cpp:    type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    brackets -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(question_token);
astGeneration/unparse.cpp:        os << ' ' << lex_stream -> NameString(extends_token_opt) << ' ';
astGeneration/unparse.cpp:        bounds_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        os << ' ' << lex_stream -> NameString(super_token_opt) << ' ';
astGeneration/unparse.cpp:        bounds_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(left_angle_token);
astGeneration/unparse.cpp:        TypeArgument(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        TypeArgument(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(right_angle_token);
astGeneration/unparse.cpp:        base_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    name -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        type_arguments_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        os << lex_stream -> NameString(identifier_token_opt) << " = ";
astGeneration/unparse.cpp:    member_value -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    name -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        MemberValuePair(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        MemberValuePair(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(modifier_token);
astGeneration/unparse.cpp:        Modifier(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        if (Modifier(i) -> ModifierKeywordCast())
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(package_token) << ' ';
astGeneration/unparse.cpp:    name -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(import_token) << ' ';
astGeneration/unparse.cpp:        os << lex_stream -> NameString(static_token_opt) << ' ';
astGeneration/unparse.cpp:    name -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        os << '.' << lex_stream -> NameString(star_token_opt);
astGeneration/unparse.cpp:    os << "// " << lex_stream -> FileName() << endl;
astGeneration/unparse.cpp:        package_declaration_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        ImportDeclaration(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        TypeDeclaration(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(semicolon_token) << endl;
astGeneration/unparse.cpp:        ClassBodyDeclaration(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(identifier_token);
astGeneration/unparse.cpp:        Bound(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        Bound(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    TypeParameter(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        TypeParameter(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(class_token) << ' '
astGeneration/unparse.cpp:       << lex_stream -> NameString(class_body -> identifier_token) << ' ';
astGeneration/unparse.cpp:        type_parameters_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        super_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        Interface(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:            Interface(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    class_body -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        VariableInitializer(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        VariableInitializer(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(identifier_token);
astGeneration/unparse.cpp:        brackets_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    variable_declarator_name -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        variable_initializer_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    VariableDeclarator(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        VariableDeclarator(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    formal_declarator -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(identifier_token) << '(';
astGeneration/unparse.cpp:        FormalParameter(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        FormalParameter(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        brackets_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        explicit_constructor_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        type_parameters_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    method_declarator -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        Throw(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:            Throw(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        default_value_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        method_body_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    block -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(left_parenthesis_token);
astGeneration/unparse.cpp:        Argument(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        Argument(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(right_parenthesis_token);
astGeneration/unparse.cpp:        type_arguments_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(this_token);
astGeneration/unparse.cpp:    arguments -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(semicolon_token) << endl;
astGeneration/unparse.cpp:        if (base_opt && ! base_opt -> generated)
astGeneration/unparse.cpp:            base_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:            type_arguments_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        os << lex_stream -> NameString(super_token);
astGeneration/unparse.cpp:        arguments -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        os << lex_stream -> NameString(semicolon_token) << endl;
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        type_parameters_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    constructor_declarator -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        Throw(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:            Throw(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    constructor_body -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(enum_token) << ' '
astGeneration/unparse.cpp:       << lex_stream -> NameString(class_body -> identifier_token) << ' ';
astGeneration/unparse.cpp:        Interface(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:            Interface(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        EnumConstant(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    class_body -> Unparse(os, lex_stream, true);
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(identifier_token);
astGeneration/unparse.cpp:        arguments_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        class_body_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(interface_token) << ' '
astGeneration/unparse.cpp:       << lex_stream -> NameString(class_body -> identifier_token) << ' ';
astGeneration/unparse.cpp:        type_parameters_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        Interface(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:            Interface(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    class_body -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    if (lex_stream -> IsDeprecated(LeftToken()))
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(interface_token - 1)
astGeneration/unparse.cpp:       << lex_stream -> NameString(interface_token) << ' '
astGeneration/unparse.cpp:       << lex_stream -> NameString(class_body -> identifier_token) << ' ';
astGeneration/unparse.cpp:    class_body -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        modifiers_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    VariableDeclarator(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        VariableDeclarator(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    declaration -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(if_token) << '(';
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    true_statement -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        false_statement_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(semicolon_token) << endl;
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(case_token) << ' ';
astGeneration/unparse.cpp:        expression_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        SwitchLabel(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(switch_token) << '(';
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    switch_block -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(while_token) << " (";
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    statement -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(do_token) << endl;
astGeneration/unparse.cpp:    statement -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(while_token) << " (";
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << ')' << lex_stream -> NameString(semicolon_token) << endl;
astGeneration/unparse.cpp:    os << lex_stream -> NameString(for_token) << " (";
astGeneration/unparse.cpp:        ForInitStatement(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        ForInitStatement(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        end_expression_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        ForUpdateStatement(0) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        ForUpdateStatement(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    statement -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(for_token) << " (";
astGeneration/unparse.cpp:    formal_parameter -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    statement -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(break_token);
astGeneration/unparse.cpp:        os << ' ' << lex_stream -> NameString(identifier_token_opt);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(continue_token);
astGeneration/unparse.cpp:        os << ' ' << lex_stream -> NameString(identifier_token_opt);
astGeneration/unparse.cpp:        os << lex_stream -> NameString(return_token);
astGeneration/unparse.cpp:            expression_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(throw_token) << ' ';
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(synchronized_token) << " (";
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    block -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(assert_token) << ' ';
astGeneration/unparse.cpp:    condition -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        message_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(catch_token) << " (";
astGeneration/unparse.cpp:    formal_parameter -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    block -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(finally_token) << endl;
astGeneration/unparse.cpp:    block -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(try_token) << endl;
astGeneration/unparse.cpp:    block -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        CatchClause(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        finally_clause_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(integer_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(long_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(float_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(double_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(true_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(false_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(string_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(character_literal_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(null_token);
astGeneration/unparse.cpp:    type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << '.' << lex_stream -> NameString(class_token);
astGeneration/unparse.cpp:        base_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(this_token);
astGeneration/unparse.cpp:        base_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(super_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(left_parenthesis_token);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(right_parenthesis_token);
astGeneration/unparse.cpp:    if (base_opt && ! base_opt -> generated)
astGeneration/unparse.cpp:        base_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(new_token) << ' ';
astGeneration/unparse.cpp:        type_arguments_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    class_type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    arguments -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        class_body_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(new_token) << ' ';
astGeneration/unparse.cpp:    array_type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        DimExpr(i) -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        brackets_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        array_initializer_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    base -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << '.' << lex_stream -> NameString(identifier_token);
astGeneration/unparse.cpp:    if (base_opt && ! base_opt -> generated)
astGeneration/unparse.cpp:        base_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        type_arguments_opt -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(identifier_token);
astGeneration/unparse.cpp:    arguments -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    base -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(post_operator_token);
astGeneration/unparse.cpp:    os << lex_stream -> NameString(pre_operator_token);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:        type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    left_expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << ' ' << lex_stream -> NameString(binary_operator_token) << ' ';
astGeneration/unparse.cpp:    right_expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << ' ' << lex_stream -> NameString(instanceof_token) << ' ';
astGeneration/unparse.cpp:    type -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    test_expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    true_expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    false_expression -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    left_hand_side -> Unparse(os, lex_stream);
astGeneration/unparse.cpp:    os << ' ' << lex_stream -> NameString(assignment_operator_token) << ' ';
astGeneration/unparse.cpp:    expression -> Unparse(os, lex_stream);
Binary file unparse.o matches
orchestration/unzip.cpp:// NOTE: Jikes incorporates compression code from the Info-ZIP
orchestration/unzip.cpp:// files unzip.h and unzip.cpp, which are based on Info-ZIP's inflate.c and
orchestration/unzip.cpp:// M. Adler, G. Roelofs, J-l. Failly, J. Bush, C. Ghisler, A. Verheijen,
orchestration/unzip.cpp:// ----  ---------  --------------  ------------------------------------
orchestration/unzip.cpp://  a    ~~ Feb 92  M. Adler        used full (large, one-step) lookup table
orchestration/unzip.cpp:/*unsigned s              number of simple-valued codes (0..s-1) */
orchestration/unzip.cpp:/* unsigned short *d                  list of base values for non-simple codes */
orchestration/unzip.cpp:/*ush *e                  list of extra bits for non-simple codes */
orchestration/unzip.cpp:  int lx[BMAX+1];               /* memory for l[-1..BMAX-1] */
orchestration/unzip.cpp:  } while (--i);
orchestration/unzip.cpp:  if (c[0] == n)                /* null input--all zero length codes */
orchestration/unzip.cpp:  for (i = BMAX; i; i--)
orchestration/unzip.cpp:    if ((y -= c[j]) < 0)
orchestration/unzip.cpp:  if ((y -= c[i]) < 0)
orchestration/unzip.cpp:  while (--i) {                 /* note that i == g from above */
orchestration/unzip.cpp:  h = -1;                       /* no tables yet--level -1 */
orchestration/unzip.cpp:  w = l[-1] = 0;                /* no bits decoded yet */
orchestration/unzip.cpp:    while (a--)
orchestration/unzip.cpp:        z = (z = g - w) > (unsigned)*m ? *m : z;        /* upper limit */
orchestration/unzip.cpp:        if ((f = 1 << (j = k - w)) > a + 1)     /* try a k-w bit table */
orchestration/unzip.cpp:        {                       /* too few codes for k-w bit table */
orchestration/unzip.cpp:          f -= a + 1;           /* deduct codes from patterns left */
orchestration/unzip.cpp:            f -= *xp;           /* else deduct codes from patterns */
orchestration/unzip.cpp:          j = el - w;           /* make EOB code end at table */
orchestration/unzip.cpp:        z = 1 << j;             /* table entries for j-bit table */
orchestration/unzip.cpp:        *(t = &(q->v.t)) = (struct huft *)0;
orchestration/unzip.cpp:          r.b = (unsigned char)l[h-1];    /* bits to dump before this table */
orchestration/unzip.cpp:          j = (i & ((1 << w) - 1)) >> (w - l[h-1]);
orchestration/unzip.cpp:          u[h-1][j] = r;        /* connect to last table */
orchestration/unzip.cpp:      r.b = (unsigned char)(k - w);
orchestration/unzip.cpp:        r.e = 99;               /* out of values--invalid code */
orchestration/unzip.cpp:        r.e = (unsigned char)(*p < 256 ? 16 : 15);  /* 256 is end-of-block code */
orchestration/unzip.cpp:        r.e = (unsigned char)e[*p - s];   /* non-simple--look up in lists */
orchestration/unzip.cpp:        r.v.n = d[*p++ - s];
orchestration/unzip.cpp:      /* fill code-like entries with r */
orchestration/unzip.cpp:      f = 1 << (k - w);
orchestration/unzip.cpp:      /* backwards increment the k-bit code i */
orchestration/unzip.cpp:      for (j = 1 << (k - 1); i & j; j >>= 1)
orchestration/unzip.cpp:      while ((i & ((1 << w) - 1)) != x[h])
orchestration/unzip.cpp:        w -= l[--h];            /* don't need to update q */
orchestration/unzip.cpp:  /* Go through linked list, freeing from the malloced (t[-1]) address. */
orchestration/unzip.cpp:    q = (--p)->v.t;
orchestration/unzip.cpp:    if ((e = (t = tl + ((unsigned)b & ml))->e) > 16)
orchestration/unzip.cpp:        DUMPBITS(t->b)
orchestration/unzip.cpp:        e -= 16;
orchestration/unzip.cpp:      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
orchestration/unzip.cpp:    DUMPBITS(t->b)
orchestration/unzip.cpp:      slide_buffer[w++] = (unsigned char)t->v.n;
orchestration/unzip.cpp:      n = t->v.n + ((unsigned)b & mask_bits[e]);
orchestration/unzip.cpp:      if ((e = (t = td + ((unsigned)b & md))->e) > 16)
orchestration/unzip.cpp:          DUMPBITS(t->b)
orchestration/unzip.cpp:          e -= 16;
orchestration/unzip.cpp:        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
orchestration/unzip.cpp:      DUMPBITS(t->b)
orchestration/unzip.cpp:      d = w - t->v.n - ((unsigned)b & mask_bits[e]);
orchestration/unzip.cpp:          n -= (e = (e = wsize - ((d &= wsize-1) > w ? d : w)) > n ? n : e);
orchestration/unzip.cpp:        if (w - d >= e)         /* (this test assumes unsigned comparison) */
orchestration/unzip.cpp:          } while (--e);
orchestration/unzip.cpp:  while (n--)
orchestration/unzip.cpp:  /* decompress until an end-of-block code */
orchestration/unzip.cpp:  /* read in bit-length-code lengths */
orchestration/unzip.cpp:  /* build decoding table for trees--single level, 7 bit lookup */
orchestration/unzip.cpp:    j = (td = tl + ((unsigned)b & m))->b;
orchestration/unzip.cpp:    j = td->v.n;
orchestration/unzip.cpp:      while (j--)
orchestration/unzip.cpp:      while (j--)
orchestration/unzip.cpp:      while (j--)
orchestration/unzip.cpp:      MESSAGE((unsigned char *)"(incomplete l-tree)  ", 21L, 1);
orchestration/unzip.cpp:    MESSAGE((unsigned char *)"(incomplete d-tree)  ", 21L, 1);
orchestration/unzip.cpp:      MESSAGE((unsigned char *)"(incomplete d-tree)  ", 21L, 1);
orchestration/unzip.cpp:  /* decompress until an end-of-block code */
orchestration/unzip.h:// NOTE: Jikes incorporates compression code from the Info-ZIP
orchestration/unzip.h:// files unzip.h and unzip.cpp, which are based on Info-ZIP's inflate.c and
orchestration/unzip.h:// M. Adler, G. Roelofs, J-l. Failly, J. Bush, C. Ghisler, A. Verheijen,
orchestration/unzip.h:// ----  ---------  --------------  ------------------------------------
orchestration/unzip.h://  a    ~~ Feb 92  M. Adler        used full (large, one-step) lookup table
orchestration/unzip.h:// inflate.c -- put in the public domain by Mark Adler
orchestration/unzip.h:// the end of each deflated block is a special end-of-block (EOB) literal/
orchestration/unzip.h:// length then get the distance and emit the referred-to bytes from the
orchestration/unzip.h:// which method to use on a chunk-by-chunk basis.  A chunk might typically
orchestration/unzip.h:// can code it much better than the pre-determined fixed codes can.
orchestration/unzip.h:// The Huffman codes themselves are decoded using a multi-level table
orchestration/unzip.h:// 5. There is no way of sending zero distance codes--a dummy must be
orchestration/unzip.h://    end-of-block.  Note however that the static length tree defines
orchestration/unzip.h://11. Correction: 4 Bits: # of Bit Length codes - 4     (4 - 19)
orchestration/unzip.h://12. Note: length code 284 can represent 227-258, but length code 285
orchestration/unzip.h://    258 is special since 258 - 3 (the min match length) is 255.
orchestration/unzip.h:#define PKZIP_BUG_WORKAROUND    /* PKZIP 1.93a problem--live with it */
orchestration/unzip.h:#  define WSIZE 0x8000  /* window size--must be a power of two, and at least */
orchestration/unzip.h:#ifndef MESSAGE   /* only used twice, for fixed strings--NOT general-purpose */
orchestration/unzip.h:/* Warning: the fwrite above might not work on 16-bit compilers, since
orchestration/unzip.h:   0x8000 might be interpreted as -32768 by the library function. */
orchestration/unzip.h:/*---------------------------------------------------------------------------*/
orchestration/unzip.h:// enough bits to make up the end-of-block code (value 256).  Then no
orchestration/unzip.h:#define DUMPBITS(n) {b>>=(n);k-=(n);}
orchestration/unzip.h:// Huffman code lookup table entry--this entry is four bytes for machines
orchestration/unzip.h:// that have 16-bit pointers (e.g. PC's in the small or medium model).
orchestration/unzip.h:// the next table, which codes e - 16 bits, and lastly e == 99 indicates
orchestration/unzip.h:// and'ing with 0x7fff (32K-1). */
orchestration/unzip.h:    // Huffman code decoding is performed using a multi-level table lookup.
Binary file unzip.o matches
orchestration/zip.cpp:    Zip *zip = file_symbol -> Zipfile();
orchestration/zip.cpp:    assert(zip -> IsValid());
orchestration/zip.cpp:    zipfile = zip -> zipfile;
orchestration/zip.cpp:    int rc = fseek(zipfile, file_symbol -> offset, SEEK_SET);
orchestration/zip.cpp:    file_buffer = &zip -> zipbuffer[file_symbol -> offset];
orchestration/zip.cpp:    this -> buffer = new char[file_symbol -> uncompressed_size];
orchestration/zip.cpp:    if (! uncompress_file[compression_method < 9 ? compression_method : 9](zipfile, this -> buffer, file_symbol -> uncompressed_size))
orchestration/zip.cpp:        delete [] this -> buffer;
orchestration/zip.cpp:        this -> buffer = NULL;
orchestration/zip.cpp:        this -> buffer = new char[file_symbol -> uncompressed_size];
orchestration/zip.cpp:                                                                               this -> buffer,
orchestration/zip.cpp:                                                                               file_symbol -> uncompressed_size))
orchestration/zip.cpp:            delete [] this -> buffer;
orchestration/zip.cpp:            this -> buffer = NULL;
orchestration/zip.cpp:            this -> file_buffer = NULL;
orchestration/zip.cpp:        NameSymbol *name_symbol = control.FindOrInsertName(directory_name, end - start);
orchestration/zip.cpp:        DirectorySymbol *subdirectory_symbol = directory_symbol -> FindDirectorySymbol(name_symbol);
orchestration/zip.cpp:            subdirectory_symbol = directory_symbol -> InsertDirectorySymbol(name_symbol, false);
orchestration/zip.cpp:    // in processing a qualified-name that represents a package,
orchestration/zip.cpp:    // -1 to remove last '/'
orchestration/zip.cpp:    if (name[file_name_length - 1] == U_SLASH)
orchestration/zip.cpp:                                   file_name_length - 1);
orchestration/zip.cpp:                          FileSymbol::IsJavaSuffix(&name[file_name_length - FileSymbol::java_suffix_length])),
orchestration/zip.cpp:                           FileSymbol::IsClassSuffix(&name[file_name_length - FileSymbol::class_suffix_length]));
orchestration/zip.cpp:            int name_length = file_name_length - (java_file ? FileSymbol::java_suffix_length : FileSymbol::class_suffix_length);
orchestration/zip.cpp:            for (i = name_length - 1; i >= 0 && name[i] != U_SLASH; i--)
orchestration/zip.cpp:                                                      name_length - (i + 1));
orchestration/zip.cpp:            // same name or vice-versa... In that case keep
orchestration/zip.cpp:            FileSymbol *file_symbol = directory_symbol ->
orchestration/zip.cpp:                file_symbol = directory_symbol -> InsertFileSymbol(name_symbol);
orchestration/zip.cpp:                file_symbol -> directory_symbol = directory_symbol;
orchestration/zip.cpp:                     file_symbol -> SetJava();
orchestration/zip.cpp:                else file_symbol -> SetClassOnly();
orchestration/zip.cpp:                file_symbol -> uncompressed_size = uncompressed_size;
orchestration/zip.cpp:                file_symbol -> offset = relative_offset_of_local_header;
orchestration/zip.cpp:                file_symbol -> date_time = date_time;
orchestration/zip.cpp:            else if (file_symbol -> date_time < date_time)
orchestration/zip.cpp:                     file_symbol -> SetJava();
orchestration/zip.cpp:                else file_symbol -> SetClass();
orchestration/zip.cpp:                file_symbol -> uncompressed_size = uncompressed_size;
orchestration/zip.cpp:                file_symbol -> offset = relative_offset_of_local_header;
orchestration/zip.cpp:                file_symbol -> date_time = date_time;
orchestration/zip.cpp:        int rc = fseek(zipfile, -END_SIZE, SEEK_END);
orchestration/zip.cpp:            buffer_ptr = &zipbuffer[GetFileSize(zipfile, NULL) - END_SIZE];
orchestration/zip.cpp:    // deal with this crap will appreciate it. -=Chris
orchestration/zip.cpp:    // -------------------------------------------------
orchestration/zip.cpp:            for (; magic == 0 && num_loops >= 0 ; num_loops--) {
orchestration/zip.cpp:                if ((ftell(zipfile) - block_size) < 0)
orchestration/zip.cpp:                    res = fseek(zipfile, -block_size, SEEK_CUR);
orchestration/zip.cpp:                res = fseek(zipfile, -block_size, SEEK_CUR); // undo fread
orchestration/zip.cpp:                for (index_ptr = tmpbuffer + block_size - 1;
orchestration/zip.cpp:                     index_ptr--)
orchestration/zip.cpp:                        int span = (tmpbuffer + block_size) - index_ptr;
orchestration/zip.cpp:                            fseek(zipfile, block_size-span, SEEK_CUR);
orchestration/zip.cpp:            buffer_ptr = &zipbuffer[GetFileSize(zipfile, NULL) - END_SIZE];
orchestration/zip.cpp:            for ( ; buffer_ptr >= zipbuffer; buffer_ptr--)
orchestration/zip.cpp:                       buffer_ptr -= 4;
orchestration/zip.cpp:        buffer_ptr -= END_SIZE + central_directory_size;
orchestration/zip.h:// $Id: Print,v 1.1.1.1 2005/07/17 23:21:03 shini Exp $ -*- c++ -*-
Binary file zip.o matches
