bin_PROGRAMS = jikes

jikes_SOURCES = \
astGeneration/ast.cpp \
astGeneration/body.cpp \
astGeneration/bytecode.cpp \
declarations/case.cpp \
orchestration/class.cpp \
declarations/code.cpp \
orchestration/control.cpp \
astGeneration/decl.cpp \
astGeneration/definite.cpp \
astGeneration/depend.cpp \
orchestration/diagnose.cpp \
declarations/platform/double.cpp \
orchestration/dump.cpp \
orchestration/error.cpp \
astGeneration/expr.cpp \
astGeneration/incrmnt.cpp \
astGeneration/init.cpp \
javaact.cpp \
declarations/jikes/jikes.cpp \
declarations/jikes/jikesapi.cpp \
declarations/platform/long.cpp \
astGeneration/lookup.cpp \
lpginput.cpp \
orchestration/modifier.cpp \
declarations/op.cpp \
orchestration/option.cpp \
orchestration/parser.cpp \
declarations/platform/platform.cpp \
orchestration/scanner.cpp \
declarations/segment.cpp \
declarations/set.cpp \
orchestration/stream.cpp \
astGeneration/symbol.cpp \
orchestration/system.cpp \
orchestration/tab.cpp \
astGeneration/unparse.cpp \
orchestration/unzip.cpp \
orchestration/zip.cpp \
patterns/chainanalysis.cpp \
patterns/controlanalysis.cpp \
patterns/creationanalysis.cpp \
patterns/factoryanalysis.cpp \
patterns/flyweightanalysis.cpp \
patterns/singletonanalysis.cpp \
astGeneration/core/variableSymbolArray.cpp \
astGeneration/core/AstSwitchStatement.cpp \
astGeneration/core/AstWhileStatement.cpp 

include_HEADERS = \
declarations/jikes/jikesapi.h

noinst_HEADERS = \
declarations/access.h \
astGeneration/ast.h \
ControlAnalysis.h \
astGeneration/bytecode.h \
declarations/case.h \
orchestration/class.h \
declarations/code.h \
declarations/control.h \
astGeneration/depend.h \
orchestration/diagnose.h \
declarations/platform/double.h \
declarations/jikes/error.h \
astGeneration/javaact.h \
javadcl.h \
orchestration/javadef.h \
astGeneration/javaprs.h \
orchestration/javasym.h \
declarations/jikes/jikesapi.h \
declarations/platform/long.h \
declarations/symbol/lookup.h \
declarations/lpginput.h \
declarations/op.h \
declarations/option.h \
astGeneration/parser.h \
declarations/platform/platform.h \
declarations/scanner.h \
declarations/segment.h \
astGeneration/semantic.h \
declarations/set.h \
declarations/spell.h \
declarations/stream.h \
declarations/symbol/symbol.h \
orchestration/tab.h \
declarations/table.h \
declarations/tuple.h \
orchestration/unzip.h \
orchestration/zip.h \
astGeneration/core/variableSymbolArray.h \
astGeneration/core/AstSwitchStatement.h \
astGeneration/core/AstWhileStatement.h 
# Include the java.g and gencode.java files in the .tar ball

EXTRA_DIST = java.g gencode.java

if MAINTAINER_MODE
# Special rules to remake autogenerated files
PARSER_FILES = \
javaact.cpp \
astGeneration/javaact.h \
javadcl.h \
orchestration/javadef.h \
astGeneration/javaprs.h \
orchestration/javasym.h

BUILT_SOURCES = $(PARSER_FILES) declarations/code.cpp declarations/code.h

javaact.stamp: $(srcdir)/java.g
	@rm -f javaact.tmp
	@$(TOUCH) javaact.tmp
	(cd $(srcdir); $(JIKESPG) java.g)
	rm -f $(srcdir)/java.l
	@mv -f javaact.tmp $@

$(PARSER_FILES): javaact.stamp
	@if test -f $@; then :; else \
	  rm -f javaact.stamp; \
	  $(MAKE) $(AM_MAKEFLAGS) javaact.stamp; \
	fi

# FIXME: hardcoded at the moment, makes bootstrap difficult...
JAVA = java
JAVAC = jikes -nowarn -source 1.4
code.stamp: $(srcdir)/gencode.java
	@rm -f code.tmp
	@$(TOUCH) code.tmp
	$(JAVAC) -d $(srcdir) $<
	(cd $(srcdir); $(JAVA) -classpath . gencode)
	@mv -f code.tmp $@

code.cpp code.h: code.stamp
	@if test -f $@; then :; else \
	  rm -f code.stamp; \
	  $(MAKE) $(AM_MAKEFLAGS) code.stamp; \
	fi

# end special maintainer mode section
endif


# This rule will build an efence malloc debugging enabled version of jikes.
# This should be used for testing purposes only! It is really slow!
efence:
	@rm -f jikes$(EXEEXT)
	$(CXXLINK) -o jikes$(EXEEXT) $(jikes_OBJECTS) -lstdc++ -lefence
